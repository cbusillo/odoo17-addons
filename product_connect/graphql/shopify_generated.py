# noinspection SpellCheckingInspection
from __future__ import annotations

from enum import Enum
from typing import Optional, TypeAlias, Union

from pydantic import ShopifyBase, ConfigDict, Field
from typing_extensions import Literal

ARN: TypeAlias = str
BigInt: TypeAlias = str
Boolean: TypeAlias = bool

Color: TypeAlias = str
Date: TypeAlias = str
DateTime: TypeAlias = str
Decimal: TypeAlias = str
Float: TypeAlias = float

FormattedString: TypeAlias = str
HTML: TypeAlias = str
ID: TypeAlias = str

Int: TypeAlias = int

JSON: TypeAlias = str
Money: TypeAlias = str
StorefrontID: TypeAlias = str
String: TypeAlias = str

URL: TypeAlias = str
UnsignedInt64: TypeAlias = str
UtcOffset: TypeAlias = str


class AbandonmentAbandonmentType(Enum):
    browse = "BROWSE"
    cart = "CART"
    checkout = "CHECKOUT"


class AbandonmentDeliveryState(Enum):
    not_sent = "NOT_SENT"
    scheduled = "SCHEDULED"
    sent = "SENT"


class AbandonmentEmailState(Enum):
    not_sent = "NOT_SENT"
    scheduled = "SCHEDULED"
    sent = "SENT"


class AbandonmentEmailStateUpdateUserErrorCode(Enum):
    abandonment_not_found = "ABANDONMENT_NOT_FOUND"


class AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode(Enum):
    abandonment_not_found = "ABANDONMENT_NOT_FOUND"
    delivery_status_info_not_found = "DELIVERY_STATUS_INFO_NOT_FOUND"
    marketing_activity_not_found = "MARKETING_ACTIVITY_NOT_FOUND"


class AdjustmentsSortKeys(Enum):
    id = "ID"
    relevance = "RELEVANCE"
    time = "TIME"


class AppDeveloperType(Enum):
    merchant = "MERCHANT"
    partner = "PARTNER"
    shopify = "SHOPIFY"
    unknown = "UNKNOWN"


class AppInstallationCategory(Enum):
    channel = "CHANNEL"
    pos_embedded = "POS_EMBEDDED"


class AppInstallationPrivacy(Enum):
    private = "PRIVATE"
    public = "PUBLIC"


class AppInstallationSortKeys(Enum):
    app_title = "APP_TITLE"
    id = "ID"
    installed_at = "INSTALLED_AT"
    relevance = "RELEVANCE"


class AppPricingInterval(Enum):
    annual = "ANNUAL"
    every_30_days = "EVERY_30_DAYS"


class AppPublicCategory(Enum):
    custom = "CUSTOM"
    other = "OTHER"
    private = "PRIVATE"
    public = "PUBLIC"


class AppPurchaseStatus(Enum):
    accepted = "ACCEPTED"
    active = "ACTIVE"
    declined = "DECLINED"
    expired = "EXPIRED"
    pending = "PENDING"


class AppRevenueAttributionRecordSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    relevance = "RELEVANCE"


class AppRevenueAttributionType(Enum):
    application_purchase = "APPLICATION_PURCHASE"
    application_subscription = "APPLICATION_SUBSCRIPTION"
    application_usage = "APPLICATION_USAGE"
    other = "OTHER"


class AppSubscriptionReplacementBehavior(Enum):
    apply_immediately = "APPLY_IMMEDIATELY"
    apply_on_next_billing_cycle = "APPLY_ON_NEXT_BILLING_CYCLE"
    standard = "STANDARD"


class AppSubscriptionSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    relevance = "RELEVANCE"


class AppSubscriptionStatus(Enum):
    accepted = "ACCEPTED"
    active = "ACTIVE"
    cancelled = "CANCELLED"
    declined = "DECLINED"
    expired = "EXPIRED"
    frozen = "FROZEN"
    pending = "PENDING"


class AppSubscriptionTrialExtendUserErrorCode(Enum):
    subscription_not_active = "SUBSCRIPTION_NOT_ACTIVE"
    subscription_not_found = "SUBSCRIPTION_NOT_FOUND"
    trial_not_active = "TRIAL_NOT_ACTIVE"


class AppTransactionSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    relevance = "RELEVANCE"


class AppUsageRecordSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    relevance = "RELEVANCE"


class AutomaticDiscountSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    relevance = "RELEVANCE"


class BadgeType(Enum):
    attention = "ATTENTION"
    default = "DEFAULT"
    info = "INFO"
    success = "SUCCESS"
    warning = "WARNING"


class BalanceTransactionSortKeys(Enum):
    amount = "AMOUNT"
    fee = "FEE"
    id = "ID"
    net = "NET"
    order_name = "ORDER_NAME"
    payment_method_name = "PAYMENT_METHOD_NAME"
    payout_date = "PAYOUT_DATE"
    payout_status = "PAYOUT_STATUS"
    processed_at = "PROCESSED_AT"
    relevance = "RELEVANCE"
    transaction_type = "TRANSACTION_TYPE"


class BillingAttemptUserErrorCode(Enum):
    billing_cycle_charge_before_expected_date = "BILLING_CYCLE_CHARGE_BEFORE_EXPECTED_DATE"
    billing_cycle_skipped = "BILLING_CYCLE_SKIPPED"
    blank = "BLANK"
    contract_not_found = "CONTRACT_NOT_FOUND"
    contract_paused = "CONTRACT_PAUSED"
    contract_terminated = "CONTRACT_TERMINATED"
    contract_under_review = "CONTRACT_UNDER_REVIEW"
    cycle_index_out_of_range = "CYCLE_INDEX_OUT_OF_RANGE"
    cycle_start_date_out_of_range = "CYCLE_START_DATE_OUT_OF_RANGE"
    invalid = "INVALID"
    origin_time_before_contract_creation = "ORIGIN_TIME_BEFORE_CONTRACT_CREATION"
    origin_time_out_of_range = "ORIGIN_TIME_OUT_OF_RANGE"
    upcoming_cycle_limit_exceeded = "UPCOMING_CYCLE_LIMIT_EXCEEDED"


class BulkMutationErrorCode(Enum):
    internal_file_server_error = "INTERNAL_FILE_SERVER_ERROR"
    invalid_mutation = "INVALID_MUTATION"
    invalid_staged_upload_file = "INVALID_STAGED_UPLOAD_FILE"
    no_such_file = "NO_SUCH_FILE"
    operation_in_progress = "OPERATION_IN_PROGRESS"


class BulkOperationErrorCode(Enum):
    access_denied = "ACCESS_DENIED"
    internal_server_error = "INTERNAL_SERVER_ERROR"
    timeout = "TIMEOUT"


class BulkOperationStatus(Enum):
    canceled = "CANCELED"
    canceling = "CANCELING"
    completed = "COMPLETED"
    created = "CREATED"
    expired = "EXPIRED"
    failed = "FAILED"
    running = "RUNNING"


class BulkOperationType(Enum):
    mutation = "MUTATION"
    query = "QUERY"


class BulkProductResourceFeedbackCreateUserErrorCode(Enum):
    blank = "BLANK"
    invalid = "INVALID"
    less_than_or_equal_to = "LESS_THAN_OR_EQUAL_TO"
    maximum_feedback_limit_exceeded = "MAXIMUM_FEEDBACK_LIMIT_EXCEEDED"
    outdated_feedback = "OUTDATED_FEEDBACK"
    present = "PRESENT"
    product_not_found = "PRODUCT_NOT_FOUND"


class BusinessCustomerErrorCode(Enum):
    blank = "BLANK"
    failed_to_delete = "FAILED_TO_DELETE"
    internal_error = "INTERNAL_ERROR"
    invalid = "INVALID"
    invalid_input = "INVALID_INPUT"
    limit_reached = "LIMIT_REACHED"
    no_input = "NO_INPUT"
    required = "REQUIRED"
    resource_not_found = "RESOURCE_NOT_FOUND"
    taken = "TAKEN"
    too_long = "TOO_LONG"
    unexpected_type = "UNEXPECTED_TYPE"


class CalculatedShippingLineStagedStatus(Enum):
    added = "ADDED"
    none = "NONE"
    removed = "REMOVED"


class CarrierServiceCreateUserErrorCode(Enum):
    carrier_service_create_failed = "CARRIER_SERVICE_CREATE_FAILED"


class CarrierServiceDeleteUserErrorCode(Enum):
    carrier_service_delete_failed = "CARRIER_SERVICE_DELETE_FAILED"


class CarrierServiceSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    relevance = "RELEVANCE"
    updated_at = "UPDATED_AT"


class CarrierServiceUpdateUserErrorCode(Enum):
    carrier_service_update_failed = "CARRIER_SERVICE_UPDATE_FAILED"


class CartTransformCreateUserErrorCode(Enum):
    function_already_registered = "FUNCTION_ALREADY_REGISTERED"
    function_does_not_implement = "FUNCTION_DOES_NOT_IMPLEMENT"
    function_not_found = "FUNCTION_NOT_FOUND"
    input_invalid = "INPUT_INVALID"
    invalid_metafields = "INVALID_METAFIELDS"


class CartTransformDeleteUserErrorCode(Enum):
    not_found = "NOT_FOUND"
    unauthorized_app_scope = "UNAUTHORIZED_APP_SCOPE"


class CashTrackingSessionTransactionsSortKeys(Enum):
    id = "ID"
    processed_at = "PROCESSED_AT"
    relevance = "RELEVANCE"


class CashTrackingSessionsSortKeys(Enum):
    closing_time_asc = "CLOSING_TIME_ASC"
    closing_time_desc = "CLOSING_TIME_DESC"
    id = "ID"
    opening_time_asc = "OPENING_TIME_ASC"
    opening_time_desc = "OPENING_TIME_DESC"
    relevance = "RELEVANCE"
    total_discrepancy_asc = "TOTAL_DISCREPANCY_ASC"
    total_discrepancy_desc = "TOTAL_DISCREPANCY_DESC"


class CatalogSortKeys(Enum):
    id = "ID"
    relevance = "RELEVANCE"
    title = "TITLE"


class CatalogStatus(Enum):
    active = "ACTIVE"
    archived = "ARCHIVED"
    draft = "DRAFT"


class CatalogType(Enum):
    app = "APP"
    company_location = "COMPANY_LOCATION"
    market = "MARKET"
    none = "NONE"


class CatalogUserErrorCode(Enum):
    app_catalog_price_list_assignment = "APP_CATALOG_PRICE_LIST_ASSIGNMENT"
    blank = "BLANK"
    cannot_add_more_than_one_market = "CANNOT_ADD_MORE_THAN_ONE_MARKET"
    cannot_create_app_catalog = "CANNOT_CREATE_APP_CATALOG"
    cannot_create_market_catalog = "CANNOT_CREATE_MARKET_CATALOG"
    cannot_delete_app_catalog = "CANNOT_DELETE_APP_CATALOG"
    cannot_delete_market_catalog = "CANNOT_DELETE_MARKET_CATALOG"
    cannot_modify_app_catalog = "CANNOT_MODIFY_APP_CATALOG"
    cannot_modify_market_catalog = "CANNOT_MODIFY_MARKET_CATALOG"
    catalog_context_does_not_support_quantity_price_breaks = "CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_PRICE_BREAKS"
    catalog_context_does_not_support_quantity_rules = "CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES"
    catalog_failed_to_save = "CATALOG_FAILED_TO_SAVE"
    catalog_not_found = "CATALOG_NOT_FOUND"
    company_location_catalog_status_plan = "COMPANY_LOCATION_CATALOG_STATUS_PLAN"
    company_location_not_found = "COMPANY_LOCATION_NOT_FOUND"
    context_already_assigned_to_catalog = "CONTEXT_ALREADY_ASSIGNED_TO_CATALOG"
    context_catalog_limit_reached = "CONTEXT_CATALOG_LIMIT_REACHED"
    context_driver_mismatch = "CONTEXT_DRIVER_MISMATCH"
    country_price_list_assignment = "COUNTRY_PRICE_LIST_ASSIGNMENT"
    invalid = "INVALID"
    invalid_catalog_context_type = "INVALID_CATALOG_CONTEXT_TYPE"
    market_and_price_list_currency_mismatch = "MARKET_AND_PRICE_LIST_CURRENCY_MISMATCH"
    market_catalog_status = "MARKET_CATALOG_STATUS"
    market_not_found = "MARKET_NOT_FOUND"
    market_taken = "MARKET_TAKEN"
    must_provide_exactly_one_context_type = "MUST_PROVIDE_EXACTLY_ONE_CONTEXT_TYPE"
    price_list_failed_to_save = "PRICE_LIST_FAILED_TO_SAVE"
    price_list_locked = "PRICE_LIST_LOCKED"
    price_list_not_allowed_for_primary_market = "PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET"
    price_list_not_found = "PRICE_LIST_NOT_FOUND"
    publication_not_found = "PUBLICATION_NOT_FOUND"
    requires_contexts_to_add_or_remove = "REQUIRES_CONTEXTS_TO_ADD_OR_REMOVE"
    taken = "TAKEN"
    too_long = "TOO_LONG"
    too_short = "TOO_SHORT"
    unsupported_catalog_action = "UNSUPPORTED_CATALOG_ACTION"


class CheckoutBrandingBackground(Enum):
    base = "BASE"
    subdued = "SUBDUED"
    transparent = "TRANSPARENT"


class CheckoutBrandingBackgroundStyle(Enum):
    none = "NONE"
    solid = "SOLID"


class CheckoutBrandingBorder(Enum):
    block_end = "BLOCK_END"
    full = "FULL"
    none = "NONE"


class CheckoutBrandingBorderStyle(Enum):
    base = "BASE"
    dashed = "DASHED"
    dotted = "DOTTED"


class CheckoutBrandingBorderWidth(Enum):
    base = "BASE"
    large = "LARGE"
    large_100 = "LARGE_100"
    large_200 = "LARGE_200"


class CheckoutBrandingCartLinkContentType(Enum):
    icon = "ICON"
    image = "IMAGE"
    text = "TEXT"


class CheckoutBrandingColorSchemeSelection(Enum):
    color_scheme1 = "COLOR_SCHEME1"
    color_scheme2 = "COLOR_SCHEME2"
    color_scheme3 = "COLOR_SCHEME3"
    color_scheme4 = "COLOR_SCHEME4"
    transparent = "TRANSPARENT"


class CheckoutBrandingColorSelection(Enum):
    transparent = "TRANSPARENT"


class CheckoutBrandingCornerRadius(Enum):
    base = "BASE"
    large = "LARGE"
    none = "NONE"
    small = "SMALL"


class CheckoutBrandingFontLoadingStrategy(Enum):
    auto = "AUTO"
    block = "BLOCK"
    fallback = "FALLBACK"
    optional = "OPTIONAL"
    swap = "SWAP"


class CheckoutBrandingFooterAlignment(Enum):
    center = "CENTER"
    end = "END"
    start = "START"


class CheckoutBrandingFooterPosition(Enum):
    end = "END"
    inline = "INLINE"


class CheckoutBrandingGlobalCornerRadius(Enum):
    none = "NONE"


class CheckoutBrandingHeaderAlignment(Enum):
    center = "CENTER"
    end = "END"
    start = "START"


class CheckoutBrandingHeaderPosition(Enum):
    inline = "INLINE"
    inline_secondary = "INLINE_SECONDARY"
    start = "START"


class CheckoutBrandingLabelPosition(Enum):
    inside = "INSIDE"
    outside = "OUTSIDE"


class CheckoutBrandingShadow(Enum):
    base = "BASE"
    large_100 = "LARGE_100"
    large_200 = "LARGE_200"
    small_100 = "SMALL_100"
    small_200 = "SMALL_200"


class CheckoutBrandingSimpleBorder(Enum):
    full = "FULL"
    none = "NONE"


class CheckoutBrandingSpacing(Enum):
    base = "BASE"
    extra_loose = "EXTRA_LOOSE"
    extra_tight = "EXTRA_TIGHT"
    loose = "LOOSE"
    none = "NONE"
    tight = "TIGHT"


class CheckoutBrandingSpacingKeyword(Enum):
    base = "BASE"
    large = "LARGE"
    large_100 = "LARGE_100"
    large_200 = "LARGE_200"
    large_300 = "LARGE_300"
    large_400 = "LARGE_400"
    large_500 = "LARGE_500"
    none = "NONE"
    small = "SMALL"
    small_100 = "SMALL_100"
    small_200 = "SMALL_200"
    small_300 = "SMALL_300"
    small_400 = "SMALL_400"
    small_500 = "SMALL_500"


class CheckoutBrandingTypographyFont(Enum):
    primary = "PRIMARY"
    secondary = "SECONDARY"


class CheckoutBrandingTypographyKerning(Enum):
    base = "BASE"
    extra_loose = "EXTRA_LOOSE"
    loose = "LOOSE"


class CheckoutBrandingTypographyLetterCase(Enum):
    lower = "LOWER"
    none = "NONE"
    title = "TITLE"
    upper = "UPPER"


class CheckoutBrandingTypographySize(Enum):
    base = "BASE"
    extra_extra_large = "EXTRA_EXTRA_LARGE"
    extra_large = "EXTRA_LARGE"
    extra_small = "EXTRA_SMALL"
    large = "LARGE"
    medium = "MEDIUM"
    small = "SMALL"


class CheckoutBrandingTypographyWeight(Enum):
    base = "BASE"
    bold = "BOLD"


class CheckoutBrandingUpsertUserErrorCode(Enum):
    internal_error = "INTERNAL_ERROR"


class CheckoutBrandingVisibility(Enum):
    hidden = "HIDDEN"
    visible = "VISIBLE"


class CheckoutProfileSortKeys(Enum):
    created_at = "CREATED_AT"
    edited_at = "EDITED_AT"
    id = "ID"
    is_published = "IS_PUBLISHED"
    relevance = "RELEVANCE"
    updated_at = "UPDATED_AT"


class CodeDiscountSortKeys(Enum):
    created_at = "CREATED_AT"
    ends_at = "ENDS_AT"
    id = "ID"
    relevance = "RELEVANCE"
    starts_at = "STARTS_AT"
    title = "TITLE"
    updated_at = "UPDATED_AT"


class CollectionAddProductsV2UserErrorCode(Enum):
    cant_add_to_smart_collection = "CANT_ADD_TO_SMART_COLLECTION"
    collection_does_not_exist = "COLLECTION_DOES_NOT_EXIST"


class CollectionRuleColumn(Enum):
    is_price_reduced = "IS_PRICE_REDUCED"
    product_metafield_definition = "PRODUCT_METAFIELD_DEFINITION"
    product_taxonomy_node_id = "PRODUCT_TAXONOMY_NODE_ID"
    tag = "TAG"
    title = "TITLE"
    type = "TYPE"
    variant_compare_at_price = "VARIANT_COMPARE_AT_PRICE"
    variant_inventory = "VARIANT_INVENTORY"
    variant_metafield_definition = "VARIANT_METAFIELD_DEFINITION"
    variant_price = "VARIANT_PRICE"
    variant_title = "VARIANT_TITLE"
    variant_weight = "VARIANT_WEIGHT"
    vendor = "VENDOR"


class CollectionRuleRelation(Enum):
    contains = "CONTAINS"
    ends_with = "ENDS_WITH"
    equals = "EQUALS"
    greater_than = "GREATER_THAN"
    is_not_set = "IS_NOT_SET"
    is_set = "IS_SET"
    less_than = "LESS_THAN"
    not_contains = "NOT_CONTAINS"
    not_equals = "NOT_EQUALS"
    starts_with = "STARTS_WITH"


class CollectionSortKeys(Enum):
    id = "ID"
    relevance = "RELEVANCE"
    title = "TITLE"
    updated_at = "UPDATED_AT"


class CollectionSortOrder(Enum):
    alpha_asc = "ALPHA_ASC"
    alpha_desc = "ALPHA_DESC"
    best_selling = "BEST_SELLING"
    created = "CREATED"
    created_desc = "CREATED_DESC"
    manual = "MANUAL"
    price_asc = "PRICE_ASC"
    price_desc = "PRICE_DESC"


class CombinedListingUpdateUserErrorCode(Enum):
    cannot_have_duplicated_products = "CANNOT_HAVE_DUPLICATED_PRODUCTS"
    cannot_have_parent_as_child = "CANNOT_HAVE_PARENT_AS_CHILD"
    cannot_have_repeated_options = "CANNOT_HAVE_REPEATED_OPTIONS"
    cannot_have_repeated_option_values = "CANNOT_HAVE_REPEATED_OPTION_VALUES"
    cant_add_options_values_if_already_exists = "CANT_ADD_OPTIONS_VALUES_IF_ALREADY_EXISTS"
    combined_listings_not_enabled = "COMBINED_LISTINGS_NOT_ENABLED"
    edit_and_remove_on_same_products = "EDIT_AND_REMOVE_ON_SAME_PRODUCTS"
    failed_to_add_products = "FAILED_TO_ADD_PRODUCTS"
    failed_to_remove_products = "FAILED_TO_REMOVE_PRODUCTS"
    failed_to_update_products = "FAILED_TO_UPDATE_PRODUCTS"
    linked_metafields_cannot_be_repeated = "LINKED_METAFIELDS_CANNOT_BE_REPEATED"
    linked_metafield_cannot_be_changed = "LINKED_METAFIELD_CANNOT_BE_CHANGED"
    linked_metafield_value_missing = "LINKED_METAFIELD_VALUE_MISSING"
    linked_options_not_supported_for_shop = "LINKED_OPTIONS_NOT_SUPPORTED_FOR_SHOP"
    must_have_selected_option_values = "MUST_HAVE_SELECTED_OPTION_VALUES"
    options_must_be_equal_to_the_other_components = "OPTIONS_MUST_BE_EQUAL_TO_THE_OTHER_COMPONENTS"
    option_name_cannot_be_blank = "OPTION_NAME_CANNOT_BE_BLANK"
    option_not_found = "OPTION_NOT_FOUND"
    option_values_cannot_be_blank = "OPTION_VALUES_CANNOT_BE_BLANK"
    option_values_cannot_be_empty = "OPTION_VALUES_CANNOT_BE_EMPTY"
    parent_product_must_be_a_combined_listing = "PARENT_PRODUCT_MUST_BE_A_COMBINED_LISTING"
    product_is_already_a_child = "PRODUCT_IS_ALREADY_A_CHILD"
    product_membership_not_found = "PRODUCT_MEMBERSHIP_NOT_FOUND"
    product_not_found = "PRODUCT_NOT_FOUND"
    title_too_long = "TITLE_TOO_LONG"
    too_many_products = "TOO_MANY_PRODUCTS"
    too_many_variants = "TOO_MANY_VARIANTS"
    unexpected_error = "UNEXPECTED_ERROR"


class CombinedListingsRole(Enum):
    child = "CHILD"
    parent = "PARENT"


class CompanyAddressType(Enum):
    billing = "BILLING"
    shipping = "SHIPPING"


class CompanyContactRoleAssignmentSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    location_name = "LOCATION_NAME"
    relevance = "RELEVANCE"
    updated_at = "UPDATED_AT"


class CompanyContactRoleSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    relevance = "RELEVANCE"
    updated_at = "UPDATED_AT"


class CompanyContactSortKeys(Enum):
    company_id = "COMPANY_ID"
    created_at = "CREATED_AT"
    email = "EMAIL"
    id = "ID"
    name = "NAME"
    name_email = "NAME_EMAIL"
    relevance = "RELEVANCE"
    title = "TITLE"
    updated_at = "UPDATED_AT"


class CompanyLocationSortKeys(Enum):
    company_and_location_name = "COMPANY_AND_LOCATION_NAME"
    company_id = "COMPANY_ID"
    created_at = "CREATED_AT"
    id = "ID"
    name = "NAME"
    relevance = "RELEVANCE"
    updated_at = "UPDATED_AT"


class CompanySortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    name = "NAME"
    order_count = "ORDER_COUNT"
    relevance = "RELEVANCE"
    since_date = "SINCE_DATE"
    total_spent = "TOTAL_SPENT"
    updated_at = "UPDATED_AT"


class CountPrecision(Enum):
    at_least = "AT_LEAST"
    exact = "EXACT"


class CountryCode(Enum):
    ac = "AC"
    ad = "AD"
    ae = "AE"
    af = "AF"
    ag = "AG"
    ai = "AI"
    al = "AL"
    am = "AM"
    an = "AN"
    ao = "AO"
    ar = "AR"
    at = "AT"
    au = "AU"
    aw = "AW"
    ax = "AX"
    az = "AZ"
    ba = "BA"
    bb = "BB"
    bd = "BD"
    be = "BE"
    bf = "BF"
    bg = "BG"
    bh = "BH"
    bi = "BI"
    bj = "BJ"
    bl = "BL"
    bm = "BM"
    bn = "BN"
    bo = "BO"
    bq = "BQ"
    br = "BR"
    bs = "BS"
    bt = "BT"
    bv = "BV"
    bw = "BW"
    by = "BY"
    bz = "BZ"
    ca = "CA"
    cc = "CC"
    cd = "CD"
    cf = "CF"
    cg = "CG"
    ch = "CH"
    ci = "CI"
    ck = "CK"
    cl = "CL"
    cm = "CM"
    cn = "CN"
    co = "CO"
    cr = "CR"
    cu = "CU"
    cv = "CV"
    cw = "CW"
    cx = "CX"
    cy = "CY"
    cz = "CZ"
    de = "DE"
    dj = "DJ"
    dk = "DK"
    dm = "DM"
    do = "DO"
    dz = "DZ"
    ec = "EC"
    ee = "EE"
    eg = "EG"
    eh = "EH"
    er = "ER"
    es = "ES"
    et = "ET"
    fi = "FI"
    fj = "FJ"
    fk = "FK"
    fo = "FO"
    fr = "FR"
    ga = "GA"
    gb = "GB"
    gd = "GD"
    ge = "GE"
    gf = "GF"
    gg = "GG"
    gh = "GH"
    gi = "GI"
    gl = "GL"
    gm = "GM"
    gn = "GN"
    gp = "GP"
    gq = "GQ"
    gr = "GR"
    gs = "GS"
    gt = "GT"
    gw = "GW"
    gy = "GY"
    hk = "HK"
    hm = "HM"
    hn = "HN"
    hr = "HR"
    ht = "HT"
    hu = "HU"
    id = "ID"
    ie = "IE"
    il = "IL"
    im = "IM"
    in_ = "IN"
    io = "IO"
    iq = "IQ"
    ir = "IR"
    is_ = "IS"
    it = "IT"
    je = "JE"
    jm = "JM"
    jo = "JO"
    jp = "JP"
    ke = "KE"
    kg = "KG"
    kh = "KH"
    ki = "KI"
    km = "KM"
    kn = "KN"
    kp = "KP"
    kr = "KR"
    kw = "KW"
    ky = "KY"
    kz = "KZ"
    la = "LA"
    lb = "LB"
    lc = "LC"
    li = "LI"
    lk = "LK"
    lr = "LR"
    ls = "LS"
    lt = "LT"
    lu = "LU"
    lv = "LV"
    ly = "LY"
    ma = "MA"
    mc = "MC"
    md = "MD"
    me = "ME"
    mf = "MF"
    mg = "MG"
    mk = "MK"
    ml = "ML"
    mm = "MM"
    mn = "MN"
    mo = "MO"
    mq = "MQ"
    mr = "MR"
    ms = "MS"
    mt = "MT"
    mu = "MU"
    mv = "MV"
    mw = "MW"
    mx = "MX"
    my = "MY"
    mz = "MZ"
    na = "NA"
    nc = "NC"
    ne = "NE"
    nf = "NF"
    ng = "NG"
    ni = "NI"
    nl = "NL"
    no = "NO"
    np = "NP"
    nr = "NR"
    nu = "NU"
    nz = "NZ"
    om = "OM"
    pa = "PA"
    pe = "PE"
    pf = "PF"
    pg = "PG"
    ph = "PH"
    pk = "PK"
    pl = "PL"
    pm = "PM"
    pn = "PN"
    ps = "PS"
    pt = "PT"
    py = "PY"
    qa = "QA"
    re = "RE"
    ro = "RO"
    rs = "RS"
    ru = "RU"
    rw = "RW"
    sa = "SA"
    sb = "SB"
    sc = "SC"
    sd = "SD"
    se = "SE"
    sg = "SG"
    sh = "SH"
    si = "SI"
    sj = "SJ"
    sk = "SK"
    sl = "SL"
    sm = "SM"
    sn = "SN"
    so = "SO"
    sr = "SR"
    ss = "SS"
    st = "ST"
    sv = "SV"
    sx = "SX"
    sy = "SY"
    sz = "SZ"
    ta = "TA"
    tc = "TC"
    td = "TD"
    tf = "TF"
    tg = "TG"
    th = "TH"
    tj = "TJ"
    tk = "TK"
    tl = "TL"
    tm = "TM"
    tn = "TN"
    to = "TO"
    tr = "TR"
    tt = "TT"
    tv = "TV"
    tw = "TW"
    tz = "TZ"
    ua = "UA"
    ug = "UG"
    um = "UM"
    us = "US"
    uy = "UY"
    uz = "UZ"
    va = "VA"
    vc = "VC"
    ve = "VE"
    vg = "VG"
    vn = "VN"
    vu = "VU"
    wf = "WF"
    ws = "WS"
    xk = "XK"
    ye = "YE"
    yt = "YT"
    za = "ZA"
    zm = "ZM"
    zw = "ZW"
    zz = "ZZ"


class CropRegion(Enum):
    bottom = "BOTTOM"
    center = "CENTER"
    left = "LEFT"
    right = "RIGHT"
    top = "TOP"


class CurrencyCode(Enum):
    aed = "AED"
    afn = "AFN"
    all = "ALL"
    amd = "AMD"
    ang = "ANG"
    aoa = "AOA"
    ars = "ARS"
    aud = "AUD"
    awg = "AWG"
    azn = "AZN"
    bam = "BAM"
    bbd = "BBD"
    bdt = "BDT"
    bgn = "BGN"
    bhd = "BHD"
    bif = "BIF"
    bmd = "BMD"
    bnd = "BND"
    bob = "BOB"
    brl = "BRL"
    bsd = "BSD"
    btn = "BTN"
    bwp = "BWP"
    byn = "BYN"
    byr = "BYR"
    bzd = "BZD"
    cad = "CAD"
    cdf = "CDF"
    chf = "CHF"
    clp = "CLP"
    cny = "CNY"
    cop = "COP"
    crc = "CRC"
    cve = "CVE"
    czk = "CZK"
    djf = "DJF"
    dkk = "DKK"
    dop = "DOP"
    dzd = "DZD"
    egp = "EGP"
    ern = "ERN"
    etb = "ETB"
    eur = "EUR"
    fjd = "FJD"
    fkp = "FKP"
    gbp = "GBP"
    gel = "GEL"
    ghs = "GHS"
    gip = "GIP"
    gmd = "GMD"
    gnf = "GNF"
    gtq = "GTQ"
    gyd = "GYD"
    hkd = "HKD"
    hnl = "HNL"
    hrk = "HRK"
    htg = "HTG"
    huf = "HUF"
    idr = "IDR"
    ils = "ILS"
    inr = "INR"
    iqd = "IQD"
    irr = "IRR"
    isk = "ISK"
    jep = "JEP"
    jmd = "JMD"
    jod = "JOD"
    jpy = "JPY"
    kes = "KES"
    kgs = "KGS"
    khr = "KHR"
    kid = "KID"
    kmf = "KMF"
    krw = "KRW"
    kwd = "KWD"
    kyd = "KYD"
    kzt = "KZT"
    lak = "LAK"
    lbp = "LBP"
    lkr = "LKR"
    lrd = "LRD"
    lsl = "LSL"
    ltl = "LTL"
    lvl = "LVL"
    lyd = "LYD"
    mad = "MAD"
    mdl = "MDL"
    mga = "MGA"
    mkd = "MKD"
    mmk = "MMK"
    mnt = "MNT"
    mop = "MOP"
    mru = "MRU"
    mur = "MUR"
    mvr = "MVR"
    mwk = "MWK"
    mxn = "MXN"
    myr = "MYR"
    mzn = "MZN"
    nad = "NAD"
    ngn = "NGN"
    nio = "NIO"
    nok = "NOK"
    npr = "NPR"
    nzd = "NZD"
    omr = "OMR"
    pab = "PAB"
    pen = "PEN"
    pgk = "PGK"
    php = "PHP"
    pkr = "PKR"
    pln = "PLN"
    pyg = "PYG"
    qar = "QAR"
    ron = "RON"
    rsd = "RSD"
    rub = "RUB"
    rwf = "RWF"
    sar = "SAR"
    sbd = "SBD"
    scr = "SCR"
    sdg = "SDG"
    sek = "SEK"
    sgd = "SGD"
    shp = "SHP"
    sll = "SLL"
    sos = "SOS"
    srd = "SRD"
    ssp = "SSP"
    std = "STD"
    stn = "STN"
    syp = "SYP"
    szl = "SZL"
    thb = "THB"
    tjs = "TJS"
    tmt = "TMT"
    tnd = "TND"
    top = "TOP"
    try_ = "TRY"
    ttd = "TTD"
    twd = "TWD"
    tzs = "TZS"
    uah = "UAH"
    ugx = "UGX"
    usd = "USD"
    uyu = "UYU"
    uzs = "UZS"
    ved = "VED"
    vef = "VEF"
    ves = "VES"
    vnd = "VND"
    vuv = "VUV"
    wst = "WST"
    xaf = "XAF"
    xcd = "XCD"
    xof = "XOF"
    xpf = "XPF"
    xxx = "XXX"
    yer = "YER"
    zar = "ZAR"
    zmw = "ZMW"


class CustomerAccountsVersion(Enum):
    classic = "CLASSIC"
    new_customer_accounts = "NEW_CUSTOMER_ACCOUNTS"


class CustomerCancelDataErasureErrorCode(Enum):
    does_not_exist = "DOES_NOT_EXIST"
    failed_to_cancel = "FAILED_TO_CANCEL"
    not_being_erased = "NOT_BEING_ERASED"


class CustomerConsentCollectedFrom(Enum):
    other = "OTHER"
    shopify = "SHOPIFY"


class CustomerEmailAddressMarketingState(Enum):
    invalid = "INVALID"
    not_subscribed = "NOT_SUBSCRIBED"
    pending = "PENDING"
    subscribed = "SUBSCRIBED"
    unsubscribed = "UNSUBSCRIBED"


class CustomerEmailAddressOpenTrackingLevel(Enum):
    opted_in = "OPTED_IN"
    opted_out = "OPTED_OUT"
    unknown = "UNKNOWN"


class CustomerEmailMarketingConsentUpdateUserErrorCode(Enum):
    inclusion = "INCLUSION"
    internal_error = "INTERNAL_ERROR"
    invalid = "INVALID"
    missing_argument = "MISSING_ARGUMENT"


class CustomerEmailMarketingState(Enum):
    invalid = "INVALID"
    not_subscribed = "NOT_SUBSCRIBED"
    pending = "PENDING"
    redacted = "REDACTED"
    subscribed = "SUBSCRIBED"
    unsubscribed = "UNSUBSCRIBED"


class CustomerMarketingOptInLevel(Enum):
    confirmed_opt_in = "CONFIRMED_OPT_IN"
    single_opt_in = "SINGLE_OPT_IN"
    unknown = "UNKNOWN"


class CustomerMergeErrorCode(Enum):
    customer_has_gift_cards = "CUSTOMER_HAS_GIFT_CARDS"
    internal_error = "INTERNAL_ERROR"
    invalid_customer = "INVALID_CUSTOMER"
    invalid_customer_id = "INVALID_CUSTOMER_ID"
    missing_override_attribute = "MISSING_OVERRIDE_ATTRIBUTE"
    override_attribute_invalid = "OVERRIDE_ATTRIBUTE_INVALID"


class CustomerMergeErrorFieldType(Enum):
    company_contact = "COMPANY_CONTACT"
    customer_payment_methods = "CUSTOMER_PAYMENT_METHODS"
    deleted_at = "DELETED_AT"
    gift_cards = "GIFT_CARDS"
    merge_in_progress = "MERGE_IN_PROGRESS"
    multipass_identifier = "MULTIPASS_IDENTIFIER"
    pending_data_request = "PENDING_DATA_REQUEST"
    redacted_at = "REDACTED_AT"
    store_credit = "STORE_CREDIT"
    subscriptions = "SUBSCRIPTIONS"


class CustomerMergeRequestStatus(Enum):
    completed = "COMPLETED"
    failed = "FAILED"
    in_progress = "IN_PROGRESS"
    requested = "REQUESTED"


class CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode(Enum):
    customer_does_not_exist = "CUSTOMER_DOES_NOT_EXIST"
    invalid_encrypted_duplication_data = "INVALID_ENCRYPTED_DUPLICATION_DATA"
    too_many_requests = "TOO_MANY_REQUESTS"


class CustomerPaymentMethodGetDuplicationDataUserErrorCode(Enum):
    customer_does_not_exist = "CUSTOMER_DOES_NOT_EXIST"
    invalid_instrument = "INVALID_INSTRUMENT"
    invalid_organization_shop = "INVALID_ORGANIZATION_SHOP"
    payment_method_does_not_exist = "PAYMENT_METHOD_DOES_NOT_EXIST"
    same_shop = "SAME_SHOP"
    too_many_requests = "TOO_MANY_REQUESTS"


class CustomerPaymentMethodGetUpdateUrlUserErrorCode(Enum):
    customer_does_not_exist = "CUSTOMER_DOES_NOT_EXIST"
    invalid_instrument = "INVALID_INSTRUMENT"
    payment_method_does_not_exist = "PAYMENT_METHOD_DOES_NOT_EXIST"
    too_many_requests = "TOO_MANY_REQUESTS"


class CustomerPaymentMethodRemoteUserErrorCode(Enum):
    authorize_net_not_enabled_for_subscriptions = "AUTHORIZE_NET_NOT_ENABLED_FOR_SUBSCRIPTIONS"
    braintree_not_enabled_for_subscriptions = "BRAINTREE_NOT_ENABLED_FOR_SUBSCRIPTIONS"
    exactly_one_remote_reference_required = "EXACTLY_ONE_REMOTE_REFERENCE_REQUIRED"
    invalid = "INVALID"
    present = "PRESENT"
    taken = "TAKEN"


class CustomerPaymentMethodRevocationReason(Enum):
    authorize_net_gateway_not_enabled = "AUTHORIZE_NET_GATEWAY_NOT_ENABLED"
    authorize_net_returned_no_payment_method = "AUTHORIZE_NET_RETURNED_NO_PAYMENT_METHOD"
    braintree_api_authentication_error = "BRAINTREE_API_AUTHENTICATION_ERROR"
    braintree_gateway_not_enabled = "BRAINTREE_GATEWAY_NOT_ENABLED"
    braintree_payment_method_not_card = "BRAINTREE_PAYMENT_METHOD_NOT_CARD"
    braintree_returned_no_payment_method = "BRAINTREE_RETURNED_NO_PAYMENT_METHOD"
    failed_to_update_credit_card = "FAILED_TO_UPDATE_CREDIT_CARD"
    manually_revoked = "MANUALLY_REVOKED"
    merged = "MERGED"
    stripe_api_authentication_error = "STRIPE_API_AUTHENTICATION_ERROR"
    stripe_api_invalid_request_error = "STRIPE_API_INVALID_REQUEST_ERROR"
    stripe_gateway_not_enabled = "STRIPE_GATEWAY_NOT_ENABLED"
    stripe_payment_method_not_card = "STRIPE_PAYMENT_METHOD_NOT_CARD"
    stripe_returned_no_payment_method = "STRIPE_RETURNED_NO_PAYMENT_METHOD"


class CustomerPaymentMethodUserErrorCode(Enum):
    invalid = "INVALID"
    present = "PRESENT"
    taken = "TAKEN"


class CustomerPredictedSpendTier(Enum):
    high = "HIGH"
    low = "LOW"
    medium = "MEDIUM"


class CustomerProductSubscriberStatus(Enum):
    active = "ACTIVE"
    cancelled = "CANCELLED"
    expired = "EXPIRED"
    failed = "FAILED"
    never_subscribed = "NEVER_SUBSCRIBED"
    paused = "PAUSED"


class CustomerRequestDataErasureErrorCode(Enum):
    does_not_exist = "DOES_NOT_EXIST"
    failed_to_request = "FAILED_TO_REQUEST"


class CustomerSavedSearchSortKeys(Enum):
    id = "ID"
    name = "NAME"
    relevance = "RELEVANCE"


class CustomerSegmentMembersQueryUserErrorCode(Enum):
    invalid = "INVALID"


class CustomerSmsMarketingConsentErrorCode(Enum):
    inclusion = "INCLUSION"
    internal_error = "INTERNAL_ERROR"
    invalid = "INVALID"
    missing_argument = "MISSING_ARGUMENT"


class CustomerSmsMarketingState(Enum):
    not_subscribed = "NOT_SUBSCRIBED"
    pending = "PENDING"
    redacted = "REDACTED"
    subscribed = "SUBSCRIBED"
    unsubscribed = "UNSUBSCRIBED"


class CustomerSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    location = "LOCATION"
    name = "NAME"
    relevance = "RELEVANCE"
    updated_at = "UPDATED_AT"


class CustomerState(Enum):
    declined = "DECLINED"
    disabled = "DISABLED"
    enabled = "ENABLED"
    invited = "INVITED"


class DataSaleOptOutUserErrorCode(Enum):
    failed = "FAILED"


class DayOfTheWeek(Enum):
    friday = "FRIDAY"
    monday = "MONDAY"
    saturday = "SATURDAY"
    sunday = "SUNDAY"
    thursday = "THURSDAY"
    tuesday = "TUESDAY"
    wednesday = "WEDNESDAY"


class DelegateAccessTokenCreateUserErrorCode(Enum):
    delegate_access_token = "DELEGATE_ACCESS_TOKEN"
    empty_access_scope = "EMPTY_ACCESS_SCOPE"
    expires_after_parent = "EXPIRES_AFTER_PARENT"
    negative_expires_in = "NEGATIVE_EXPIRES_IN"
    persistence_failed = "PERSISTENCE_FAILED"
    refresh_token = "REFRESH_TOKEN"
    unknown_scopes = "UNKNOWN_SCOPES"


class DelegateAccessTokenDestroyUserErrorCode(Enum):
    access_denied = "ACCESS_DENIED"
    access_token_not_found = "ACCESS_TOKEN_NOT_FOUND"
    can_only_delete_delegate_tokens = "CAN_ONLY_DELETE_DELEGATE_TOKENS"
    persistence_failed = "PERSISTENCE_FAILED"


class DeletionEventSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    relevance = "RELEVANCE"


class DeletionEventSubjectType(Enum):
    collection = "COLLECTION"
    product = "PRODUCT"


class DeliveryConditionField(Enum):
    total_price = "TOTAL_PRICE"
    total_weight = "TOTAL_WEIGHT"


class DeliveryConditionOperator(Enum):
    greater_than_or_equal_to = "GREATER_THAN_OR_EQUAL_TO"
    less_than_or_equal_to = "LESS_THAN_OR_EQUAL_TO"


class DeliveryCustomizationErrorCode(Enum):
    custom_app_function_not_eligible = "CUSTOM_APP_FUNCTION_NOT_ELIGIBLE"
    delivery_customization_function_not_eligible = "DELIVERY_CUSTOMIZATION_FUNCTION_NOT_ELIGIBLE"
    delivery_customization_not_found = "DELIVERY_CUSTOMIZATION_NOT_FOUND"
    function_does_not_implement = "FUNCTION_DOES_NOT_IMPLEMENT"
    function_id_cannot_be_changed = "FUNCTION_ID_CANNOT_BE_CHANGED"
    function_not_found = "FUNCTION_NOT_FOUND"
    function_pending_deletion = "FUNCTION_PENDING_DELETION"
    invalid = "INVALID"
    invalid_metafields = "INVALID_METAFIELDS"
    maximum_active_delivery_customizations = "MAXIMUM_ACTIVE_DELIVERY_CUSTOMIZATIONS"
    required_input_field = "REQUIRED_INPUT_FIELD"
    unauthorized_app_scope = "UNAUTHORIZED_APP_SCOPE"


class DeliveryLegacyModeBlockedReason(Enum):
    multi_location_disabled = "MULTI_LOCATION_DISABLED"
    no_locations_fulfilling_online_orders = "NO_LOCATIONS_FULFILLING_ONLINE_ORDERS"


class DeliveryLocalPickupTime(Enum):
    five_or_more_days = "FIVE_OR_MORE_DAYS"
    four_hours = "FOUR_HOURS"
    one_hour = "ONE_HOUR"
    twenty_four_hours = "TWENTY_FOUR_HOURS"
    two_hours = "TWO_HOURS"
    two_to_four_days = "TWO_TO_FOUR_DAYS"


class DeliveryLocationLocalPickupSettingsErrorCode(Enum):
    active_location_not_found = "ACTIVE_LOCATION_NOT_FOUND"
    generic_error = "GENERIC_ERROR"


class DeliveryMethodDefinitionType(Enum):
    merchant = "MERCHANT"
    participant = "PARTICIPANT"


class DeliveryMethodType(Enum):
    local = "LOCAL"
    none = "NONE"
    pickup_point = "PICKUP_POINT"
    pick_up = "PICK_UP"
    retail = "RETAIL"
    shipping = "SHIPPING"


class DeliveryPromiseProviderUpsertUserErrorCode(Enum):
    invalid_time_zone = "INVALID_TIME_ZONE"
    must_belong_to_app = "MUST_BELONG_TO_APP"
    not_found = "NOT_FOUND"
    too_long = "TOO_LONG"


class DigitalWallet(Enum):
    android_pay = "ANDROID_PAY"
    apple_pay = "APPLE_PAY"
    google_pay = "GOOGLE_PAY"
    shopify_pay = "SHOPIFY_PAY"


class DiscountApplicationAllocationMethod(Enum):
    across = "ACROSS"
    each = "EACH"
    one = "ONE"


class DiscountApplicationLevel(Enum):
    line = "LINE"
    order = "ORDER"


class DiscountApplicationTargetSelection(Enum):
    all = "ALL"
    entitled = "ENTITLED"
    explicit = "EXPLICIT"


class DiscountApplicationTargetType(Enum):
    line_item = "LINE_ITEM"
    shipping_line = "SHIPPING_LINE"


class DiscountClass(Enum):
    order = "ORDER"
    product = "PRODUCT"
    shipping = "SHIPPING"


class DiscountCodeSortKeys(Enum):
    code = "CODE"
    created_at = "CREATED_AT"
    id = "ID"
    relevance = "RELEVANCE"


class DiscountErrorCode(Enum):
    active_period_overlap = "ACTIVE_PERIOD_OVERLAP"
    blank = "BLANK"
    conflict = "CONFLICT"
    duplicate = "DUPLICATE"
    equal_to = "EQUAL_TO"
    exceeded_max = "EXCEEDED_MAX"
    greater_than = "GREATER_THAN"
    greater_than_or_equal_to = "GREATER_THAN_OR_EQUAL_TO"
    implicit_duplicate = "IMPLICIT_DUPLICATE"
    inclusion = "INCLUSION"
    internal_error = "INTERNAL_ERROR"
    invalid = "INVALID"
    invalid_combines_with_for_discount_class = "INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS"
    invalid_discount_class_for_price_rule = "INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE"
    less_than = "LESS_THAN"
    less_than_or_equal_to = "LESS_THAN_OR_EQUAL_TO"
    max_app_discounts = "MAX_APP_DISCOUNTS"
    minimum_subtotal_and_quantity_range_both_present = "MINIMUM_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT"
    missing_argument = "MISSING_ARGUMENT"
    present = "PRESENT"
    taken = "TAKEN"
    too_long = "TOO_LONG"
    too_many_arguments = "TOO_MANY_ARGUMENTS"
    too_short = "TOO_SHORT"
    value_outside_range = "VALUE_OUTSIDE_RANGE"


class DiscountShareableUrlTargetType(Enum):
    collection = "COLLECTION"
    home = "HOME"
    product = "PRODUCT"


class DiscountSortKeys(Enum):
    created_at = "CREATED_AT"
    ends_at = "ENDS_AT"
    id = "ID"
    relevance = "RELEVANCE"
    starts_at = "STARTS_AT"
    title = "TITLE"
    updated_at = "UPDATED_AT"


class DiscountStatus(Enum):
    active = "ACTIVE"
    expired = "EXPIRED"
    scheduled = "SCHEDULED"


class DiscountTargetType(Enum):
    line_item = "LINE_ITEM"
    shipping_line = "SHIPPING_LINE"


class DiscountType(Enum):
    automatic_discount = "AUTOMATIC_DISCOUNT"
    code_discount = "CODE_DISCOUNT"
    manual = "MANUAL"


class DisputeEvidenceUpdateUserErrorCode(Enum):
    dispute_evidence_not_found = "DISPUTE_EVIDENCE_NOT_FOUND"
    evidence_already_accepted = "EVIDENCE_ALREADY_ACCEPTED"
    evidence_past_due_date = "EVIDENCE_PAST_DUE_DATE"
    files_size_exceeded_limit = "FILES_SIZE_EXCEEDED_LIMIT"
    invalid = "INVALID"
    too_large = "TOO_LARGE"


class DisputeStatus(Enum):
    accepted = "ACCEPTED"
    charge_refunded = "CHARGE_REFUNDED"
    lost = "LOST"
    needs_response = "NEEDS_RESPONSE"
    under_review = "UNDER_REVIEW"
    won = "WON"


class DisputeType(Enum):
    chargeback = "CHARGEBACK"
    inquiry = "INQUIRY"


class DraftOrderAppliedDiscountType(Enum):
    fixed_amount = "FIXED_AMOUNT"
    percentage = "PERCENTAGE"


class DraftOrderSortKeys(Enum):
    customer_name = "CUSTOMER_NAME"
    id = "ID"
    number = "NUMBER"
    relevance = "RELEVANCE"
    status = "STATUS"
    total_price = "TOTAL_PRICE"
    updated_at = "UPDATED_AT"


class DraftOrderStatus(Enum):
    completed = "COMPLETED"
    invoice_sent = "INVOICE_SENT"
    open = "OPEN"


class ErrorsServerPixelUserErrorCode(Enum):
    already_exists = "ALREADY_EXISTS"
    needs_configuration_to_connect = "NEEDS_CONFIGURATION_TO_CONNECT"
    not_found = "NOT_FOUND"
    pub_sub_error = "PUB_SUB_ERROR"


class ErrorsWebPixelUserErrorCode(Enum):
    blank = "BLANK"
    invalid_settings = "INVALID_SETTINGS"
    not_found = "NOT_FOUND"
    taken = "TAKEN"
    unable_to_delete = "UNABLE_TO_DELETE"


class EventSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    relevance = "RELEVANCE"


class FileContentType(Enum):
    external_video = "EXTERNAL_VIDEO"
    file = "FILE"
    image = "IMAGE"
    model_3_d = "MODEL_3D"
    video = "VIDEO"


class FileCreateInputDuplicateResolutionMode(Enum):
    append_uuid = "APPEND_UUID"
    raise_error = "RAISE_ERROR"
    replace = "REPLACE"


class FileErrorCode(Enum):
    duplicate_filename_error = "DUPLICATE_FILENAME_ERROR"
    external_video_embed_disabled = "EXTERNAL_VIDEO_EMBED_DISABLED"
    external_video_embed_not_found_or_transcoding = "EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING"
    external_video_invalid_aspect_ratio = "EXTERNAL_VIDEO_INVALID_ASPECT_RATIO"
    external_video_not_found = "EXTERNAL_VIDEO_NOT_FOUND"
    external_video_unlisted = "EXTERNAL_VIDEO_UNLISTED"
    file_storage_limit_exceeded = "FILE_STORAGE_LIMIT_EXCEEDED"
    generic_file_download_failure = "GENERIC_FILE_DOWNLOAD_FAILURE"
    generic_file_invalid_size = "GENERIC_FILE_INVALID_SIZE"
    image_download_failure = "IMAGE_DOWNLOAD_FAILURE"
    image_processing_failure = "IMAGE_PROCESSING_FAILURE"
    invalid_image_aspect_ratio = "INVALID_IMAGE_ASPECT_RATIO"
    invalid_image_file_size = "INVALID_IMAGE_FILE_SIZE"
    invalid_image_resolution = "INVALID_IMAGE_RESOLUTION"
    invalid_signed_url = "INVALID_SIGNED_URL"
    media_timeout_error = "MEDIA_TIMEOUT_ERROR"
    model3_d_glb_output_creation_error = "MODEL3D_GLB_OUTPUT_CREATION_ERROR"
    model3_d_glb_to_usdz_conversion_error = "MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR"
    model3_d_processing_failure = "MODEL3D_PROCESSING_FAILURE"
    model3_d_thumbnail_generation_error = "MODEL3D_THUMBNAIL_GENERATION_ERROR"
    model3_d_thumbnail_regeneration_error = "MODEL3D_THUMBNAIL_REGENERATION_ERROR"
    model3_d_validation_error = "MODEL3D_VALIDATION_ERROR"
    unknown = "UNKNOWN"
    unsupported_image_file_type = "UNSUPPORTED_IMAGE_FILE_TYPE"
    video_invalid_filetype_error = "VIDEO_INVALID_FILETYPE_ERROR"
    video_max_duration_error = "VIDEO_MAX_DURATION_ERROR"
    video_max_height_error = "VIDEO_MAX_HEIGHT_ERROR"
    video_max_width_error = "VIDEO_MAX_WIDTH_ERROR"
    video_metadata_read_error = "VIDEO_METADATA_READ_ERROR"
    video_min_duration_error = "VIDEO_MIN_DURATION_ERROR"
    video_min_height_error = "VIDEO_MIN_HEIGHT_ERROR"
    video_min_width_error = "VIDEO_MIN_WIDTH_ERROR"
    video_validation_error = "VIDEO_VALIDATION_ERROR"


class FileSortKeys(Enum):
    created_at = "CREATED_AT"
    filename = "FILENAME"
    id = "ID"
    original_upload_size = "ORIGINAL_UPLOAD_SIZE"
    relevance = "RELEVANCE"
    updated_at = "UPDATED_AT"


class FileStatus(Enum):
    failed = "FAILED"
    processing = "PROCESSING"
    ready = "READY"
    uploaded = "UPLOADED"


class FilesErrorCode(Enum):
    alt_value_limit_exceeded = "ALT_VALUE_LIMIT_EXCEEDED"
    blank_search = "BLANK_SEARCH"
    filename_already_exists = "FILENAME_ALREADY_EXISTS"
    file_does_not_exist = "FILE_DOES_NOT_EXIST"
    file_locked = "FILE_LOCKED"
    invalid = "INVALID"
    invalid_duplicate_mode_for_type = "INVALID_DUPLICATE_MODE_FOR_TYPE"
    invalid_filename = "INVALID_FILENAME"
    invalid_filename_extension = "INVALID_FILENAME_EXTENSION"
    invalid_image_source_url = "INVALID_IMAGE_SOURCE_URL"
    invalid_query = "INVALID_QUERY"
    mismatched_filename_and_original_source = "MISMATCHED_FILENAME_AND_ORIGINAL_SOURCE"
    missing_arguments = "MISSING_ARGUMENTS"
    missing_filename_for_duplicate_mode_replace = "MISSING_FILENAME_FOR_DUPLICATE_MODE_REPLACE"
    non_image_media_per_shop_limit_exceeded = "NON_IMAGE_MEDIA_PER_SHOP_LIMIT_EXCEEDED"
    non_ready_state = "NON_READY_STATE"
    product_media_limit_exceeded = "PRODUCT_MEDIA_LIMIT_EXCEEDED"
    reference_target_does_not_exist = "REFERENCE_TARGET_DOES_NOT_EXIST"
    too_many_arguments = "TOO_MANY_ARGUMENTS"
    too_many_file_reference = "TOO_MANY_FILE_REFERENCE"
    unacceptable_asset = "UNACCEPTABLE_ASSET"
    unacceptable_trial_asset = "UNACCEPTABLE_TRIAL_ASSET"
    unacceptable_unverified_trial_asset = "UNACCEPTABLE_UNVERIFIED_TRIAL_ASSET"
    unsupported_file_reference = "UNSUPPORTED_FILE_REFERENCE"
    unsupported_media_type_for_filename_update = "UNSUPPORTED_MEDIA_TYPE_FOR_FILENAME_UPDATE"


class FulfillmentConstraintRuleCreateUserErrorCode(Enum):
    custom_app_function_not_eligible = "CUSTOM_APP_FUNCTION_NOT_ELIGIBLE"
    function_already_registered = "FUNCTION_ALREADY_REGISTERED"
    function_does_not_implement = "FUNCTION_DOES_NOT_IMPLEMENT"
    function_not_found = "FUNCTION_NOT_FOUND"
    function_pending_deletion = "FUNCTION_PENDING_DELETION"
    input_invalid = "INPUT_INVALID"
    maximum_fulfillment_constraint_rules_reached = "MAXIMUM_FULFILLMENT_CONSTRAINT_RULES_REACHED"


class FulfillmentConstraintRuleDeleteUserErrorCode(Enum):
    not_found = "NOT_FOUND"
    unauthorized_app_scope = "UNAUTHORIZED_APP_SCOPE"


class FulfillmentDisplayStatus(Enum):
    attempted_delivery = "ATTEMPTED_DELIVERY"
    canceled = "CANCELED"
    confirmed = "CONFIRMED"
    delivered = "DELIVERED"
    failure = "FAILURE"
    fulfilled = "FULFILLED"
    in_transit = "IN_TRANSIT"
    label_printed = "LABEL_PRINTED"
    label_purchased = "LABEL_PURCHASED"
    label_voided = "LABEL_VOIDED"
    marked_as_fulfilled = "MARKED_AS_FULFILLED"
    not_delivered = "NOT_DELIVERED"
    out_for_delivery = "OUT_FOR_DELIVERY"
    picked_up = "PICKED_UP"
    ready_for_pickup = "READY_FOR_PICKUP"
    submitted = "SUBMITTED"


class FulfillmentEventSortKeys(Enum):
    happened_at = "HAPPENED_AT"
    id = "ID"
    relevance = "RELEVANCE"


class FulfillmentEventStatus(Enum):
    attempted_delivery = "ATTEMPTED_DELIVERY"
    confirmed = "CONFIRMED"
    delivered = "DELIVERED"
    failure = "FAILURE"
    in_transit = "IN_TRANSIT"
    label_printed = "LABEL_PRINTED"
    label_purchased = "LABEL_PURCHASED"
    out_for_delivery = "OUT_FOR_DELIVERY"
    ready_for_pickup = "READY_FOR_PICKUP"


class FulfillmentHoldReason(Enum):
    awaiting_payment = "AWAITING_PAYMENT"
    awaiting_return_items = "AWAITING_RETURN_ITEMS"
    high_risk_of_fraud = "HIGH_RISK_OF_FRAUD"
    incorrect_address = "INCORRECT_ADDRESS"
    inventory_out_of_stock = "INVENTORY_OUT_OF_STOCK"
    online_store_post_purchase_cross_sell = "ONLINE_STORE_POST_PURCHASE_CROSS_SELL"
    other = "OTHER"
    unknown_delivery_date = "UNKNOWN_DELIVERY_DATE"


class FulfillmentOrderAction(Enum):
    cancel_fulfillment_order = "CANCEL_FULFILLMENT_ORDER"
    create_fulfillment = "CREATE_FULFILLMENT"
    external = "EXTERNAL"
    hold = "HOLD"
    mark_as_open = "MARK_AS_OPEN"
    merge = "MERGE"
    move = "MOVE"
    release_hold = "RELEASE_HOLD"
    request_cancellation = "REQUEST_CANCELLATION"
    request_fulfillment = "REQUEST_FULFILLMENT"
    split = "SPLIT"


class FulfillmentOrderAssignmentStatus(Enum):
    cancellation_requested = "CANCELLATION_REQUESTED"
    fulfillment_accepted = "FULFILLMENT_ACCEPTED"
    fulfillment_requested = "FULFILLMENT_REQUESTED"
    fulfillment_unsubmitted = "FULFILLMENT_UNSUBMITTED"


class FulfillmentOrderHoldUserErrorCode(Enum):
    fulfillment_order_not_found = "FULFILLMENT_ORDER_NOT_FOUND"
    greater_than_zero = "GREATER_THAN_ZERO"
    invalid_line_item_quantity = "INVALID_LINE_ITEM_QUANTITY"
    taken = "TAKEN"


class FulfillmentOrderLineItemsPreparedForPickupUserErrorCode(Enum):
    fulfillment_order_invalid = "FULFILLMENT_ORDER_INVALID"
    no_line_items_to_prepare_for_fulfillment_order = "NO_LINE_ITEMS_TO_PREPARE_FOR_FULFILLMENT_ORDER"
    unable_to_prepare_quantity = "UNABLE_TO_PREPARE_QUANTITY"


class FulfillmentOrderMerchantRequestKind(Enum):
    cancellation_request = "CANCELLATION_REQUEST"
    fulfillment_request = "FULFILLMENT_REQUEST"


class FulfillmentOrderMergeUserErrorCode(Enum):
    fulfillment_order_not_found = "FULFILLMENT_ORDER_NOT_FOUND"
    greater_than = "GREATER_THAN"
    invalid_line_item_quantity = "INVALID_LINE_ITEM_QUANTITY"


class FulfillmentOrderRejectionReason(Enum):
    incorrect_address = "INCORRECT_ADDRESS"
    ineligible_product = "INELIGIBLE_PRODUCT"
    inventory_out_of_stock = "INVENTORY_OUT_OF_STOCK"
    other = "OTHER"
    undeliverable_destination = "UNDELIVERABLE_DESTINATION"


class FulfillmentOrderReleaseHoldUserErrorCode(Enum):
    fulfillment_order_not_found = "FULFILLMENT_ORDER_NOT_FOUND"


class FulfillmentOrderRequestStatus(Enum):
    accepted = "ACCEPTED"
    cancellation_accepted = "CANCELLATION_ACCEPTED"
    cancellation_rejected = "CANCELLATION_REJECTED"
    cancellation_requested = "CANCELLATION_REQUESTED"
    closed = "CLOSED"
    rejected = "REJECTED"
    submitted = "SUBMITTED"
    unsubmitted = "UNSUBMITTED"


class FulfillmentOrderRescheduleUserErrorCode(Enum):
    fulfillment_order_not_found = "FULFILLMENT_ORDER_NOT_FOUND"


class FulfillmentOrderSortKeys(Enum):
    id = "ID"
    relevance = "RELEVANCE"
    updated_at = "UPDATED_AT"


class FulfillmentOrderSplitUserErrorCode(Enum):
    fulfillment_order_not_found = "FULFILLMENT_ORDER_NOT_FOUND"
    greater_than = "GREATER_THAN"
    invalid_line_item_quantity = "INVALID_LINE_ITEM_QUANTITY"
    no_line_items_provided_to_split = "NO_LINE_ITEMS_PROVIDED_TO_SPLIT"


class FulfillmentOrderStatus(Enum):
    cancelled = "CANCELLED"
    closed = "CLOSED"
    incomplete = "INCOMPLETE"
    in_progress = "IN_PROGRESS"
    on_hold = "ON_HOLD"
    open = "OPEN"
    scheduled = "SCHEDULED"


class FulfillmentOrdersReleaseHoldsUserErrorCode(Enum):
    failed_to_create_job = "FAILED_TO_CREATE_JOB"


class FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode(Enum):
    fulfillment_orders_not_found = "FULFILLMENT_ORDERS_NOT_FOUND"


class FulfillmentServiceType(Enum):
    gift_card = "GIFT_CARD"
    manual = "MANUAL"
    third_party = "THIRD_PARTY"


class FulfillmentStatus(Enum):
    cancelled = "CANCELLED"
    error = "ERROR"
    failure = "FAILURE"
    open = "OPEN"
    pending = "PENDING"
    success = "SUCCESS"


class GiftCardErrorCode(Enum):
    greater_than = "GREATER_THAN"
    internal_error = "INTERNAL_ERROR"
    invalid = "INVALID"
    missing_argument = "MISSING_ARGUMENT"
    taken = "TAKEN"
    too_long = "TOO_LONG"
    too_short = "TOO_SHORT"


class GiftCardSortKeys(Enum):
    amount_spent = "AMOUNT_SPENT"
    balance = "BALANCE"
    code = "CODE"
    created_at = "CREATED_AT"
    customer_name = "CUSTOMER_NAME"
    disabled_at = "DISABLED_AT"
    expires_on = "EXPIRES_ON"
    id = "ID"
    initial_value = "INITIAL_VALUE"
    relevance = "RELEVANCE"
    updated_at = "UPDATED_AT"


class ImageContentType(Enum):
    jpg = "JPG"
    png = "PNG"
    webp = "WEBP"


class InventoryAdjustQuantitiesUserErrorCode(Enum):
    adjust_quantities_failed = "ADJUST_QUANTITIES_FAILED"
    internal_ledger_document = "INTERNAL_LEDGER_DOCUMENT"
    invalid_available_document = "INVALID_AVAILABLE_DOCUMENT"
    invalid_inventory_item = "INVALID_INVENTORY_ITEM"
    invalid_ledger_document = "INVALID_LEDGER_DOCUMENT"
    invalid_location = "INVALID_LOCATION"
    invalid_quantity_document = "INVALID_QUANTITY_DOCUMENT"
    invalid_quantity_name = "INVALID_QUANTITY_NAME"
    invalid_quantity_too_high = "INVALID_QUANTITY_TOO_HIGH"
    invalid_quantity_too_low = "INVALID_QUANTITY_TOO_LOW"
    invalid_reason = "INVALID_REASON"
    invalid_reference_document = "INVALID_REFERENCE_DOCUMENT"
    item_not_stocked_at_location = "ITEM_NOT_STOCKED_AT_LOCATION"
    max_one_ledger_document = "MAX_ONE_LEDGER_DOCUMENT"
    non_mutable_inventory_item = "NON_MUTABLE_INVENTORY_ITEM"


class InventoryBulkToggleActivationUserErrorCode(Enum):
    cannot_deactivate_from_only_location = "CANNOT_DEACTIVATE_FROM_ONLY_LOCATION"
    committed_and_incoming_inventory_at_location = "COMMITTED_AND_INCOMING_INVENTORY_AT_LOCATION"
    committed_inventory_at_location = "COMMITTED_INVENTORY_AT_LOCATION"
    failed_to_stock_at_location = "FAILED_TO_STOCK_AT_LOCATION"
    failed_to_unstock_from_location = "FAILED_TO_UNSTOCK_FROM_LOCATION"
    generic_error = "GENERIC_ERROR"
    incoming_inventory_at_location = "INCOMING_INVENTORY_AT_LOCATION"
    inventory_item_not_found = "INVENTORY_ITEM_NOT_FOUND"
    inventory_managed_by_3_rd_party = "INVENTORY_MANAGED_BY_3RD_PARTY"
    inventory_managed_by_shopify = "INVENTORY_MANAGED_BY_SHOPIFY"
    location_not_found = "LOCATION_NOT_FOUND"
    missing_sku = "MISSING_SKU"
    reserved_inventory_at_location = "RESERVED_INVENTORY_AT_LOCATION"


class InventoryMoveQuantitiesUserErrorCode(Enum):
    different_locations = "DIFFERENT_LOCATIONS"
    internal_ledger_document = "INTERNAL_LEDGER_DOCUMENT"
    invalid_available_document = "INVALID_AVAILABLE_DOCUMENT"
    invalid_inventory_item = "INVALID_INVENTORY_ITEM"
    invalid_ledger_document = "INVALID_LEDGER_DOCUMENT"
    invalid_location = "INVALID_LOCATION"
    invalid_quantity_document = "INVALID_QUANTITY_DOCUMENT"
    invalid_quantity_name = "INVALID_QUANTITY_NAME"
    invalid_quantity_negative = "INVALID_QUANTITY_NEGATIVE"
    invalid_quantity_too_high = "INVALID_QUANTITY_TOO_HIGH"
    invalid_reason = "INVALID_REASON"
    invalid_reference_document = "INVALID_REFERENCE_DOCUMENT"
    item_not_stocked_at_location = "ITEM_NOT_STOCKED_AT_LOCATION"
    maximum_ledger_document_uris = "MAXIMUM_LEDGER_DOCUMENT_URIS"
    move_quantities_failed = "MOVE_QUANTITIES_FAILED"
    non_mutable_inventory_item = "NON_MUTABLE_INVENTORY_ITEM"
    same_quantity_name = "SAME_QUANTITY_NAME"


class InventorySetOnHandQuantitiesUserErrorCode(Enum):
    invalid_inventory_item = "INVALID_INVENTORY_ITEM"
    invalid_location = "INVALID_LOCATION"
    invalid_quantity_negative = "INVALID_QUANTITY_NEGATIVE"
    invalid_quantity_too_high = "INVALID_QUANTITY_TOO_HIGH"
    invalid_reason = "INVALID_REASON"
    invalid_reference_document = "INVALID_REFERENCE_DOCUMENT"
    item_not_stocked_at_location = "ITEM_NOT_STOCKED_AT_LOCATION"
    non_mutable_inventory_item = "NON_MUTABLE_INVENTORY_ITEM"
    set_on_hand_quantities_failed = "SET_ON_HAND_QUANTITIES_FAILED"


class InventorySetQuantitiesUserErrorCode(Enum):
    compare_quantity_required = "COMPARE_QUANTITY_REQUIRED"
    compare_quantity_stale = "COMPARE_QUANTITY_STALE"
    invalid_inventory_item = "INVALID_INVENTORY_ITEM"
    invalid_location = "INVALID_LOCATION"
    invalid_name = "INVALID_NAME"
    invalid_quantity_negative = "INVALID_QUANTITY_NEGATIVE"
    invalid_quantity_too_high = "INVALID_QUANTITY_TOO_HIGH"
    invalid_reason = "INVALID_REASON"
    invalid_reference_document = "INVALID_REFERENCE_DOCUMENT"
    item_not_stocked_at_location = "ITEM_NOT_STOCKED_AT_LOCATION"
    no_duplicate_inventory_item_id_group_id_pair = "NO_DUPLICATE_INVENTORY_ITEM_ID_GROUP_ID_PAIR"


class InventorySetScheduledChangesUserErrorCode(Enum):
    duplicate_from_name = "DUPLICATE_FROM_NAME"
    duplicate_to_name = "DUPLICATE_TO_NAME"
    error_updating_scheduled = "ERROR_UPDATING_SCHEDULED"
    inclusion = "INCLUSION"
    invalid_from_name = "INVALID_FROM_NAME"
    invalid_reason = "INVALID_REASON"
    invalid_to_name = "INVALID_TO_NAME"
    inventory_item_not_found = "INVENTORY_ITEM_NOT_FOUND"
    inventory_state_not_found = "INVENTORY_STATE_NOT_FOUND"
    items_empty = "ITEMS_EMPTY"
    ledger_document_invalid = "LEDGER_DOCUMENT_INVALID"
    location_not_found = "LOCATION_NOT_FOUND"
    same_from_to_names = "SAME_FROM_TO_NAMES"


class LanguageCode(Enum):
    af = "AF"
    ak = "AK"
    am = "AM"
    ar = "AR"
    as_ = "AS"
    az = "AZ"
    be = "BE"
    bg = "BG"
    bm = "BM"
    bn = "BN"
    bo = "BO"
    br = "BR"
    bs = "BS"
    ca = "CA"
    ce = "CE"
    cs = "CS"
    cu = "CU"
    cy = "CY"
    da = "DA"
    de = "DE"
    dz = "DZ"
    ee = "EE"
    el = "EL"
    en = "EN"
    eo = "EO"
    es = "ES"
    et = "ET"
    eu = "EU"
    fa = "FA"
    ff = "FF"
    fi = "FI"
    fo = "FO"
    fr = "FR"
    fy = "FY"
    ga = "GA"
    gd = "GD"
    gl = "GL"
    gu = "GU"
    gv = "GV"
    ha = "HA"
    he = "HE"
    hi = "HI"
    hr = "HR"
    hu = "HU"
    hy = "HY"
    ia = "IA"
    id = "ID"
    ig = "IG"
    ii = "II"
    is_ = "IS"
    it = "IT"
    ja = "JA"
    jv = "JV"
    ka = "KA"
    ki = "KI"
    kk = "KK"
    kl = "KL"
    km = "KM"
    kn = "KN"
    ko = "KO"
    ks = "KS"
    ku = "KU"
    kw = "KW"
    ky = "KY"
    lb = "LB"
    lg = "LG"
    ln = "LN"
    lo = "LO"
    lt = "LT"
    lu = "LU"
    lv = "LV"
    mg = "MG"
    mi = "MI"
    mk = "MK"
    ml = "ML"
    mn = "MN"
    mr = "MR"
    ms = "MS"
    mt = "MT"
    my = "MY"
    nb = "NB"
    nd = "ND"
    ne = "NE"
    nl = "NL"
    nn = "NN"
    no = "NO"
    om = "OM"
    or_ = "OR"
    os = "OS"
    pa = "PA"
    pl = "PL"
    ps = "PS"
    pt = "PT"
    pt_br = "PT_BR"
    pt_pt = "PT_PT"
    qu = "QU"
    rm = "RM"
    rn = "RN"
    ro = "RO"
    ru = "RU"
    rw = "RW"
    sd = "SD"
    se = "SE"
    sg = "SG"
    si = "SI"
    sk = "SK"
    sl = "SL"
    sn = "SN"
    so = "SO"
    sq = "SQ"
    sr = "SR"
    su = "SU"
    sv = "SV"
    sw = "SW"
    ta = "TA"
    te = "TE"
    tg = "TG"
    th = "TH"
    ti = "TI"
    tk = "TK"
    to = "TO"
    tr = "TR"
    tt = "TT"
    ug = "UG"
    uk = "UK"
    ur = "UR"
    uz = "UZ"
    vi = "VI"
    vo = "VO"
    wo = "WO"
    xh = "XH"
    yi = "YI"
    yo = "YO"
    zh = "ZH"
    zh_cn = "ZH_CN"
    zh_tw = "ZH_TW"
    zu = "ZU"


class LengthUnit(Enum):
    centimeters = "CENTIMETERS"
    feet = "FEET"
    inches = "INCHES"
    meters = "METERS"
    millimeters = "MILLIMETERS"
    yards = "YARDS"


class LocalizableContentType(Enum):
    file_reference = "FILE_REFERENCE"
    html = "HTML"
    inline_rich_text = "INLINE_RICH_TEXT"
    json = "JSON"
    json_string = "JSON_STRING"
    link = "LINK"
    list_file_reference = "LIST_FILE_REFERENCE"
    list_link = "LIST_LINK"
    list_multi_line_text_field = "LIST_MULTI_LINE_TEXT_FIELD"
    list_single_line_text_field = "LIST_SINGLE_LINE_TEXT_FIELD"
    list_url = "LIST_URL"
    multi_line_text_field = "MULTI_LINE_TEXT_FIELD"
    rich_text_field = "RICH_TEXT_FIELD"
    single_line_text_field = "SINGLE_LINE_TEXT_FIELD"
    string = "STRING"
    uri = "URI"
    url = "URL"


class LocalizationExtensionKey(Enum):
    shipping_credential_br = "SHIPPING_CREDENTIAL_BR"
    shipping_credential_cl = "SHIPPING_CREDENTIAL_CL"
    shipping_credential_cn = "SHIPPING_CREDENTIAL_CN"
    shipping_credential_co = "SHIPPING_CREDENTIAL_CO"
    shipping_credential_cr = "SHIPPING_CREDENTIAL_CR"
    shipping_credential_ec = "SHIPPING_CREDENTIAL_EC"
    shipping_credential_es = "SHIPPING_CREDENTIAL_ES"
    shipping_credential_gt = "SHIPPING_CREDENTIAL_GT"
    shipping_credential_id = "SHIPPING_CREDENTIAL_ID"
    shipping_credential_kr = "SHIPPING_CREDENTIAL_KR"
    shipping_credential_my = "SHIPPING_CREDENTIAL_MY"
    shipping_credential_pe = "SHIPPING_CREDENTIAL_PE"
    shipping_credential_pt = "SHIPPING_CREDENTIAL_PT"
    shipping_credential_py = "SHIPPING_CREDENTIAL_PY"
    shipping_credential_tr = "SHIPPING_CREDENTIAL_TR"
    shipping_credential_tw = "SHIPPING_CREDENTIAL_TW"
    shipping_credential_type_co = "SHIPPING_CREDENTIAL_TYPE_CO"
    tax_credential_br = "TAX_CREDENTIAL_BR"
    tax_credential_cl = "TAX_CREDENTIAL_CL"
    tax_credential_co = "TAX_CREDENTIAL_CO"
    tax_credential_cr = "TAX_CREDENTIAL_CR"
    tax_credential_ec = "TAX_CREDENTIAL_EC"
    tax_credential_es = "TAX_CREDENTIAL_ES"
    tax_credential_gt = "TAX_CREDENTIAL_GT"
    tax_credential_id = "TAX_CREDENTIAL_ID"
    tax_credential_it = "TAX_CREDENTIAL_IT"
    tax_credential_mx = "TAX_CREDENTIAL_MX"
    tax_credential_my = "TAX_CREDENTIAL_MY"
    tax_credential_pe = "TAX_CREDENTIAL_PE"
    tax_credential_pt = "TAX_CREDENTIAL_PT"
    tax_credential_py = "TAX_CREDENTIAL_PY"
    tax_credential_tr = "TAX_CREDENTIAL_TR"
    tax_credential_type_co = "TAX_CREDENTIAL_TYPE_CO"
    tax_credential_type_mx = "TAX_CREDENTIAL_TYPE_MX"
    tax_credential_use_mx = "TAX_CREDENTIAL_USE_MX"
    tax_email_it = "TAX_EMAIL_IT"


class LocalizationExtensionPurpose(Enum):
    shipping = "SHIPPING"
    tax = "TAX"


class LocationActivateUserErrorCode(Enum):
    generic_error = "GENERIC_ERROR"
    has_non_unique_name = "HAS_NON_UNIQUE_NAME"
    has_ongoing_relocation = "HAS_ONGOING_RELOCATION"
    location_limit = "LOCATION_LIMIT"
    location_not_found = "LOCATION_NOT_FOUND"


class LocationAddUserErrorCode(Enum):
    app_not_authorized = "APP_NOT_AUTHORIZED"
    blank = "BLANK"
    capability_violation = "CAPABILITY_VIOLATION"
    disallowed_owner_type = "DISALLOWED_OWNER_TYPE"
    generic_error = "GENERIC_ERROR"
    inclusion = "INCLUSION"
    internal_error = "INTERNAL_ERROR"
    invalid = "INVALID"
    invalid_type = "INVALID_TYPE"
    invalid_us_zipcode = "INVALID_US_ZIPCODE"
    invalid_value = "INVALID_VALUE"
    present = "PRESENT"
    taken = "TAKEN"
    too_long = "TOO_LONG"
    too_short = "TOO_SHORT"
    unstructured_reserved_namespace = "UNSTRUCTURED_RESERVED_NAMESPACE"


class LocationDeactivateUserErrorCode(Enum):
    cannot_disable_online_order_fulfillment = "CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT"
    destination_location_is_the_same_location = "DESTINATION_LOCATION_IS_THE_SAME_LOCATION"
    destination_location_not_found_or_inactive = "DESTINATION_LOCATION_NOT_FOUND_OR_INACTIVE"
    failed_to_relocate_active_inventories = "FAILED_TO_RELOCATE_ACTIVE_INVENTORIES"
    failed_to_relocate_incoming_movements = "FAILED_TO_RELOCATE_INCOMING_MOVEMENTS"
    failed_to_relocate_open_purchase_orders = "FAILED_TO_RELOCATE_OPEN_PURCHASE_ORDERS"
    failed_to_relocate_open_transfers = "FAILED_TO_RELOCATE_OPEN_TRANSFERS"
    has_active_inventory_error = "HAS_ACTIVE_INVENTORY_ERROR"
    has_active_retail_subscriptions = "HAS_ACTIVE_RETAIL_SUBSCRIPTIONS"
    has_fulfillment_orders_error = "HAS_FULFILLMENT_ORDERS_ERROR"
    has_incoming_movements_error = "HAS_INCOMING_MOVEMENTS_ERROR"
    has_open_purchase_orders_error = "HAS_OPEN_PURCHASE_ORDERS_ERROR"
    has_open_transfers_error = "HAS_OPEN_TRANSFERS_ERROR"
    location_not_found = "LOCATION_NOT_FOUND"
    permanently_blocked_from_deactivation_error = "PERMANENTLY_BLOCKED_FROM_DEACTIVATION_ERROR"
    temporarily_blocked_from_deactivation_error = "TEMPORARILY_BLOCKED_FROM_DEACTIVATION_ERROR"


class LocationDeleteUserErrorCode(Enum):
    generic_error = "GENERIC_ERROR"
    location_has_active_retail_subscription = "LOCATION_HAS_ACTIVE_RETAIL_SUBSCRIPTION"
    location_has_inventory = "LOCATION_HAS_INVENTORY"
    location_has_pending_orders = "LOCATION_HAS_PENDING_ORDERS"
    location_is_active = "LOCATION_IS_ACTIVE"
    location_not_found = "LOCATION_NOT_FOUND"


class LocationEditUserErrorCode(Enum):
    app_not_authorized = "APP_NOT_AUTHORIZED"
    blank = "BLANK"
    cannot_disable_online_order_fulfillment = "CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT"
    cannot_modify_online_order_fulfillment_for_fs_location = "CANNOT_MODIFY_ONLINE_ORDER_FULFILLMENT_FOR_FS_LOCATION"
    capability_violation = "CAPABILITY_VIOLATION"
    disallowed_owner_type = "DISALLOWED_OWNER_TYPE"
    generic_error = "GENERIC_ERROR"
    inclusion = "INCLUSION"
    internal_error = "INTERNAL_ERROR"
    invalid = "INVALID"
    invalid_type = "INVALID_TYPE"
    invalid_us_zipcode = "INVALID_US_ZIPCODE"
    invalid_value = "INVALID_VALUE"
    not_found = "NOT_FOUND"
    present = "PRESENT"
    taken = "TAKEN"
    too_long = "TOO_LONG"
    too_short = "TOO_SHORT"
    unstructured_reserved_namespace = "UNSTRUCTURED_RESERVED_NAMESPACE"


class LocationSortKeys(Enum):
    id = "ID"
    name = "NAME"
    relevance = "RELEVANCE"


class MailingAddressValidationResult(Enum):
    error = "ERROR"
    no_issues = "NO_ISSUES"
    warning = "WARNING"


class MarketCurrencySettingsUserErrorCode(Enum):
    managed_market = "MANAGED_MARKET"
    market_not_found = "MARKET_NOT_FOUND"
    multiple_currencies_not_supported = "MULTIPLE_CURRENCIES_NOT_SUPPORTED"
    no_local_currencies_on_single_country_market = "NO_LOCAL_CURRENCIES_ON_SINGLE_COUNTRY_MARKET"
    primary_market_uses_shop_currency = "PRIMARY_MARKET_USES_SHOP_CURRENCY"
    unsupported_currency = "UNSUPPORTED_CURRENCY"


class MarketLocalizableResourceType(Enum):
    metafield = "METAFIELD"
    metaobject = "METAOBJECT"


class MarketUserErrorCode(Enum):
    blank = "BLANK"
    cannot_add_customer_domain = "CANNOT_ADD_CUSTOMER_DOMAIN"
    cannot_add_regions_to_primary_market = "CANNOT_ADD_REGIONS_TO_PRIMARY_MARKET"
    cannot_add_web_presence_to_primary_market = "CANNOT_ADD_WEB_PRESENCE_TO_PRIMARY_MARKET"
    cannot_delete_only_region = "CANNOT_DELETE_ONLY_REGION"
    cannot_delete_primary_market = "CANNOT_DELETE_PRIMARY_MARKET"
    cannot_delete_primary_market_web_presence = "CANNOT_DELETE_PRIMARY_MARKET_WEB_PRESENCE"
    cannot_disable_primary_market = "CANNOT_DISABLE_PRIMARY_MARKET"
    cannot_have_both_subfolder_and_domain_web_presences = "CANNOT_HAVE_BOTH_SUBFOLDER_AND_DOMAIN_WEB_PRESENCES"
    cannot_have_multiple_subfolders_per_market = "CANNOT_HAVE_MULTIPLE_SUBFOLDERS_PER_MARKET"
    cannot_have_subfolder_and_domain = "CANNOT_HAVE_SUBFOLDER_AND_DOMAIN"
    cannot_set_default_locale_to_null = "CANNOT_SET_DEFAULT_LOCALE_TO_NULL"
    disabled_language = "DISABLED_LANGUAGE"
    domain_not_found = "DOMAIN_NOT_FOUND"
    duplicate_languages = "DUPLICATE_LANGUAGES"
    invalid = "INVALID"
    market_not_found = "MARKET_NOT_FOUND"
    market_reached_web_presence_limit = "MARKET_REACHED_WEB_PRESENCE_LIMIT"
    no_languages = "NO_LANGUAGES"
    primary_market_must_use_primary_domain = "PRIMARY_MARKET_MUST_USE_PRIMARY_DOMAIN"
    region_not_found = "REGION_NOT_FOUND"
    region_specific_language = "REGION_SPECIFIC_LANGUAGE"
    requires_domain_or_subfolder = "REQUIRES_DOMAIN_OR_SUBFOLDER"
    requires_exactly_one_option = "REQUIRES_EXACTLY_ONE_OPTION"
    shop_reached_markets_limit = "SHOP_REACHED_MARKETS_LIMIT"
    subfolder_suffix_cannot_be_script_code = "SUBFOLDER_SUFFIX_CANNOT_BE_SCRIPT_CODE"
    subfolder_suffix_must_contain_only_letters = "SUBFOLDER_SUFFIX_MUST_CONTAIN_ONLY_LETTERS"
    taken = "TAKEN"
    too_long = "TOO_LONG"
    too_short = "TOO_SHORT"
    unpublished_language = "UNPUBLISHED_LANGUAGE"
    unsupported_country_region = "UNSUPPORTED_COUNTRY_REGION"
    web_presence_not_found = "WEB_PRESENCE_NOT_FOUND"


class MarketingActivityExtensionAppErrorCode(Enum):
    api_error = "API_ERROR"
    install_required_error = "INSTALL_REQUIRED_ERROR"
    not_onboarded_error = "NOT_ONBOARDED_ERROR"
    platform_error = "PLATFORM_ERROR"
    validation_error = "VALIDATION_ERROR"


class MarketingActivityExternalStatus(Enum):
    active = "ACTIVE"
    deleted_externally = "DELETED_EXTERNALLY"
    inactive = "INACTIVE"
    paused = "PAUSED"
    scheduled = "SCHEDULED"
    undefined = "UNDEFINED"


class MarketingActivityHierarchyLevel(Enum):
    ad = "AD"
    ad_group = "AD_GROUP"
    campaign = "CAMPAIGN"


class MarketingActivitySortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    relevance = "RELEVANCE"
    title = "TITLE"


class MarketingActivityStatus(Enum):
    active = "ACTIVE"
    deleted = "DELETED"
    deleted_externally = "DELETED_EXTERNALLY"
    disconnected = "DISCONNECTED"
    draft = "DRAFT"
    failed = "FAILED"
    inactive = "INACTIVE"
    paused = "PAUSED"
    pending = "PENDING"
    scheduled = "SCHEDULED"
    undefined = "UNDEFINED"


class MarketingActivityStatusBadgeType(Enum):
    attention = "ATTENTION"
    default = "DEFAULT"
    info = "INFO"
    success = "SUCCESS"
    warning = "WARNING"


class MarketingActivityUserErrorCode(Enum):
    activity_not_external = "ACTIVITY_NOT_EXTERNAL"
    cannot_delete_activity_with_child_events = "CANNOT_DELETE_ACTIVITY_WITH_CHILD_EVENTS"
    cannot_update_tactic_if_originally_storefront_app = "CANNOT_UPDATE_TACTIC_IF_ORIGINALLY_STOREFRONT_APP"
    cannot_update_tactic_to_storefront_app = "CANNOT_UPDATE_TACTIC_TO_STOREFRONT_APP"
    currency_code_mismatch_input = "CURRENCY_CODE_MISMATCH_INPUT"
    delete_job_enqueued = "DELETE_JOB_ENQUEUED"
    delete_job_failed_to_enqueue = "DELETE_JOB_FAILED_TO_ENQUEUE"
    immutable_channel_handle = "IMMUTABLE_CHANNEL_HANDLE"
    immutable_hierarchy_level = "IMMUTABLE_HIERARCHY_LEVEL"
    immutable_parent_id = "IMMUTABLE_PARENT_ID"
    immutable_url_parameter = "IMMUTABLE_URL_PARAMETER"
    immutable_utm_parameters = "IMMUTABLE_UTM_PARAMETERS"
    invalid = "INVALID"
    invalid_channel_handle = "INVALID_CHANNEL_HANDLE"
    invalid_delete_activity_external_arguments = "INVALID_DELETE_ACTIVITY_EXTERNAL_ARGUMENTS"
    invalid_delete_engagements_arguments = "INVALID_DELETE_ENGAGEMENTS_ARGUMENTS"
    invalid_marketing_activity_external_arguments = "INVALID_MARKETING_ACTIVITY_EXTERNAL_ARGUMENTS"
    invalid_marketing_engagement_arguments = "INVALID_MARKETING_ENGAGEMENT_ARGUMENTS"
    invalid_marketing_engagement_argument_missing = "INVALID_MARKETING_ENGAGEMENT_ARGUMENT_MISSING"
    invalid_remote_id = "INVALID_REMOTE_ID"
    marketing_activity_currency_code_mismatch = "MARKETING_ACTIVITY_CURRENCY_CODE_MISMATCH"
    marketing_activity_does_not_exist = "MARKETING_ACTIVITY_DOES_NOT_EXIST"
    marketing_event_does_not_exist = "MARKETING_EVENT_DOES_NOT_EXIST"
    non_hierarchial_requires_utm_url_parameter = "NON_HIERARCHIAL_REQUIRES_UTM_URL_PARAMETER"
    taken = "TAKEN"


class MarketingBudgetBudgetType(Enum):
    daily = "DAILY"
    lifetime = "LIFETIME"


class MarketingChannel(Enum):
    display = "DISPLAY"
    email = "EMAIL"
    referral = "REFERRAL"
    search = "SEARCH"
    social = "SOCIAL"


class MarketingEventSortKeys(Enum):
    id = "ID"
    relevance = "RELEVANCE"
    started_at = "STARTED_AT"


class MarketingTactic(Enum):
    abandoned_cart = "ABANDONED_CART"
    ad = "AD"
    affiliate = "AFFILIATE"
    link = "LINK"
    loyalty = "LOYALTY"
    message = "MESSAGE"
    newsletter = "NEWSLETTER"
    notification = "NOTIFICATION"
    post = "POST"
    retargeting = "RETARGETING"
    seo = "SEO"
    storefront_app = "STOREFRONT_APP"
    transactional = "TRANSACTIONAL"


class MediaContentType(Enum):
    external_video = "EXTERNAL_VIDEO"
    image = "IMAGE"
    model_3_d = "MODEL_3D"
    video = "VIDEO"


class MediaErrorCode(Enum):
    duplicate_filename_error = "DUPLICATE_FILENAME_ERROR"
    external_video_embed_disabled = "EXTERNAL_VIDEO_EMBED_DISABLED"
    external_video_embed_not_found_or_transcoding = "EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING"
    external_video_invalid_aspect_ratio = "EXTERNAL_VIDEO_INVALID_ASPECT_RATIO"
    external_video_not_found = "EXTERNAL_VIDEO_NOT_FOUND"
    external_video_unlisted = "EXTERNAL_VIDEO_UNLISTED"
    file_storage_limit_exceeded = "FILE_STORAGE_LIMIT_EXCEEDED"
    generic_file_download_failure = "GENERIC_FILE_DOWNLOAD_FAILURE"
    generic_file_invalid_size = "GENERIC_FILE_INVALID_SIZE"
    image_download_failure = "IMAGE_DOWNLOAD_FAILURE"
    image_processing_failure = "IMAGE_PROCESSING_FAILURE"
    invalid_image_aspect_ratio = "INVALID_IMAGE_ASPECT_RATIO"
    invalid_image_file_size = "INVALID_IMAGE_FILE_SIZE"
    invalid_image_resolution = "INVALID_IMAGE_RESOLUTION"
    invalid_signed_url = "INVALID_SIGNED_URL"
    media_timeout_error = "MEDIA_TIMEOUT_ERROR"
    model3_d_glb_output_creation_error = "MODEL3D_GLB_OUTPUT_CREATION_ERROR"
    model3_d_glb_to_usdz_conversion_error = "MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR"
    model3_d_processing_failure = "MODEL3D_PROCESSING_FAILURE"
    model3_d_thumbnail_generation_error = "MODEL3D_THUMBNAIL_GENERATION_ERROR"
    model3_d_thumbnail_regeneration_error = "MODEL3D_THUMBNAIL_REGENERATION_ERROR"
    model3_d_validation_error = "MODEL3D_VALIDATION_ERROR"
    unknown = "UNKNOWN"
    unsupported_image_file_type = "UNSUPPORTED_IMAGE_FILE_TYPE"
    video_invalid_filetype_error = "VIDEO_INVALID_FILETYPE_ERROR"
    video_max_duration_error = "VIDEO_MAX_DURATION_ERROR"
    video_max_height_error = "VIDEO_MAX_HEIGHT_ERROR"
    video_max_width_error = "VIDEO_MAX_WIDTH_ERROR"
    video_metadata_read_error = "VIDEO_METADATA_READ_ERROR"
    video_min_duration_error = "VIDEO_MIN_DURATION_ERROR"
    video_min_height_error = "VIDEO_MIN_HEIGHT_ERROR"
    video_min_width_error = "VIDEO_MIN_WIDTH_ERROR"
    video_validation_error = "VIDEO_VALIDATION_ERROR"


class MediaHost(Enum):
    vimeo = "VIMEO"
    youtube = "YOUTUBE"


class MediaPreviewImageStatus(Enum):
    failed = "FAILED"
    processing = "PROCESSING"
    ready = "READY"
    uploaded = "UPLOADED"


class MediaStatus(Enum):
    failed = "FAILED"
    processing = "PROCESSING"
    ready = "READY"
    uploaded = "UPLOADED"


class MediaUserErrorCode(Enum):
    blank = "BLANK"
    invalid = "INVALID"
    invalid_media_type = "INVALID_MEDIA_TYPE"
    maximum_variant_media_pairs_exceeded = "MAXIMUM_VARIANT_MEDIA_PAIRS_EXCEEDED"
    media_cannot_be_modified = "MEDIA_CANNOT_BE_MODIFIED"
    media_does_not_exist = "MEDIA_DOES_NOT_EXIST"
    media_does_not_exist_on_product = "MEDIA_DOES_NOT_EXIST_ON_PRODUCT"
    media_is_not_attached_to_variant = "MEDIA_IS_NOT_ATTACHED_TO_VARIANT"
    missing_arguments = "MISSING_ARGUMENTS"
    model3_d_throttle_exceeded = "MODEL3D_THROTTLE_EXCEEDED"
    model3_d_validation_error = "MODEL3D_VALIDATION_ERROR"
    non_ready_media = "NON_READY_MEDIA"
    product_does_not_exist = "PRODUCT_DOES_NOT_EXIST"
    product_media_limit_exceeded = "PRODUCT_MEDIA_LIMIT_EXCEEDED"
    product_variant_already_has_media = "PRODUCT_VARIANT_ALREADY_HAS_MEDIA"
    product_variant_does_not_exist_on_product = "PRODUCT_VARIANT_DOES_NOT_EXIST_ON_PRODUCT"
    product_variant_specified_multiple_times = "PRODUCT_VARIANT_SPECIFIED_MULTIPLE_TIMES"
    shop_media_limit_exceeded = "SHOP_MEDIA_LIMIT_EXCEEDED"
    too_many_media_per_input_pair = "TOO_MANY_MEDIA_PER_INPUT_PAIR"
    video_throttle_exceeded = "VIDEO_THROTTLE_EXCEEDED"
    video_validation_error = "VIDEO_VALIDATION_ERROR"


class MediaWarningCode(Enum):
    model_large_physical_size = "MODEL_LARGE_PHYSICAL_SIZE"
    model_small_physical_size = "MODEL_SMALL_PHYSICAL_SIZE"


class MenuCreateUserErrorCode(Enum):
    nesting_too_deep = "NESTING_TOO_DEEP"
    not_found = "NOT_FOUND"


class MenuDeleteUserErrorCode(Enum):
    menu_does_not_exist = "MENU_DOES_NOT_EXIST"
    unable_to_delete_default_menu = "UNABLE_TO_DELETE_DEFAULT_MENU"


class MenuItemType(Enum):
    article = "ARTICLE"
    blog = "BLOG"
    catalog = "CATALOG"
    collection = "COLLECTION"
    collections = "COLLECTIONS"
    frontpage = "FRONTPAGE"
    http = "HTTP"
    metaobject = "METAOBJECT"
    page = "PAGE"
    product = "PRODUCT"
    search = "SEARCH"
    shop_policy = "SHOP_POLICY"


class MenuSortKeys(Enum):
    id = "ID"
    relevance = "RELEVANCE"
    title = "TITLE"
    updated_at = "UPDATED_AT"


class MenuUpdateUserErrorCode(Enum):
    nesting_too_deep = "NESTING_TOO_DEEP"
    not_found = "NOT_FOUND"


class MerchandiseDiscountClass(Enum):
    order = "ORDER"
    product = "PRODUCT"


class MetafieldAdminAccess(Enum):
    merchant_read = "MERCHANT_READ"
    merchant_read_write = "MERCHANT_READ_WRITE"
    private = "PRIVATE"
    public_read = "PUBLIC_READ"
    public_read_write = "PUBLIC_READ_WRITE"


class MetafieldAdminAccessInput(Enum):
    merchant_read = "MERCHANT_READ"
    merchant_read_write = "MERCHANT_READ_WRITE"
    private = "PRIVATE"
    public_read = "PUBLIC_READ"
    public_read_write = "PUBLIC_READ_WRITE"


class MetafieldCustomerAccountAccess(Enum):
    none = "NONE"
    read = "READ"
    read_write = "READ_WRITE"


class MetafieldCustomerAccountAccessInput(Enum):
    none = "NONE"
    read = "READ"
    read_write = "READ_WRITE"


class MetafieldDefinitionConstraintStatus(Enum):
    constrained_and_unconstrained = "CONSTRAINED_AND_UNCONSTRAINED"
    constrained_only = "CONSTRAINED_ONLY"
    unconstrained_only = "UNCONSTRAINED_ONLY"


class MetafieldDefinitionCreateUserErrorCode(Enum):
    duplicate_option = "DUPLICATE_OPTION"
    grant_limit_exceeded = "GRANT_LIMIT_EXCEEDED"
    inclusion = "INCLUSION"
    invalid = "INVALID"
    invalid_character = "INVALID_CHARACTER"
    invalid_input_combination = "INVALID_INPUT_COMBINATION"
    invalid_option = "INVALID_OPTION"
    limit_exceeded = "LIMIT_EXCEEDED"
    owner_type_limit_exceeded_for_automated_collections = "OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS"
    pinned_limit_reached = "PINNED_LIMIT_REACHED"
    present = "PRESENT"
    reserved_namespace_key = "RESERVED_NAMESPACE_KEY"
    resource_type_limit_exceeded = "RESOURCE_TYPE_LIMIT_EXCEEDED"
    taken = "TAKEN"
    too_long = "TOO_LONG"
    too_short = "TOO_SHORT"
    type_not_allowed_for_conditions = "TYPE_NOT_ALLOWED_FOR_CONDITIONS"
    unstructured_already_exists = "UNSTRUCTURED_ALREADY_EXISTS"


class MetafieldDefinitionDeleteUserErrorCode(Enum):
    disallowed_owner_type = "DISALLOWED_OWNER_TYPE"
    internal_error = "INTERNAL_ERROR"
    metafield_definition_in_use = "METAFIELD_DEFINITION_IN_USE"
    not_found = "NOT_FOUND"
    present = "PRESENT"
    reference_type_deletion_error = "REFERENCE_TYPE_DELETION_ERROR"
    reserved_namespace_orphaned_metafields = "RESERVED_NAMESPACE_ORPHANED_METAFIELDS"


class MetafieldDefinitionPinUserErrorCode(Enum):
    already_pinned = "ALREADY_PINNED"
    disallowed_owner_type = "DISALLOWED_OWNER_TYPE"
    internal_error = "INTERNAL_ERROR"
    not_found = "NOT_FOUND"
    pinned_limit_reached = "PINNED_LIMIT_REACHED"


class MetafieldDefinitionPinnedStatus(Enum):
    any = "ANY"
    pinned = "PINNED"
    unpinned = "UNPINNED"


class MetafieldDefinitionSortKeys(Enum):
    id = "ID"
    name = "NAME"
    pinned_position = "PINNED_POSITION"
    relevance = "RELEVANCE"


class MetafieldDefinitionUnpinUserErrorCode(Enum):
    disallowed_owner_type = "DISALLOWED_OWNER_TYPE"
    internal_error = "INTERNAL_ERROR"
    not_found = "NOT_FOUND"
    not_pinned = "NOT_PINNED"


class MetafieldDefinitionUpdateUserErrorCode(Enum):
    grant_limit_exceeded = "GRANT_LIMIT_EXCEEDED"
    internal_error = "INTERNAL_ERROR"
    invalid_input = "INVALID_INPUT"
    invalid_input_combination = "INVALID_INPUT_COMBINATION"
    metafield_definition_in_use = "METAFIELD_DEFINITION_IN_USE"
    metaobject_definition_changed = "METAOBJECT_DEFINITION_CHANGED"
    not_found = "NOT_FOUND"
    owner_type_limit_exceeded_for_automated_collections = "OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS"
    pinned_limit_reached = "PINNED_LIMIT_REACHED"
    present = "PRESENT"
    too_long = "TOO_LONG"
    type_not_allowed_for_conditions = "TYPE_NOT_ALLOWED_FOR_CONDITIONS"


class MetafieldDefinitionValidationStatus(Enum):
    all_valid = "ALL_VALID"
    in_progress = "IN_PROGRESS"
    some_invalid = "SOME_INVALID"


class MetafieldGrantAccessLevel(Enum):
    read = "READ"
    read_write = "READ_WRITE"


class MetafieldOwnerType(Enum):
    api_permission = "API_PERMISSION"
    article = "ARTICLE"
    blog = "BLOG"
    carttransform = "CARTTRANSFORM"
    collection = "COLLECTION"
    company = "COMPANY"
    company_location = "COMPANY_LOCATION"
    customer = "CUSTOMER"
    delivery_customization = "DELIVERY_CUSTOMIZATION"
    discount = "DISCOUNT"
    draftorder = "DRAFTORDER"
    fulfillment_constraint_rule = "FULFILLMENT_CONSTRAINT_RULE"
    location = "LOCATION"
    market = "MARKET"
    media_image = "MEDIA_IMAGE"
    order = "ORDER"
    order_routing_location_rule = "ORDER_ROUTING_LOCATION_RULE"
    page = "PAGE"
    payment_customization = "PAYMENT_CUSTOMIZATION"
    product = "PRODUCT"
    productvariant = "PRODUCTVARIANT"
    selling_plan = "SELLING_PLAN"
    shop = "SHOP"
    validation = "VALIDATION"


class MetafieldStorefrontAccess(Enum):
    legacy_liquid_only = "LEGACY_LIQUID_ONLY"
    none = "NONE"
    public_read = "PUBLIC_READ"


class MetafieldStorefrontAccessInput(Enum):
    none = "NONE"
    public_read = "PUBLIC_READ"


class MetafieldValidationStatus(Enum):
    any = "ANY"
    invalid = "INVALID"
    valid = "VALID"


class MetafieldValueType(Enum):
    boolean = "BOOLEAN"
    integer = "INTEGER"
    json_string = "JSON_STRING"
    string = "STRING"


class MetafieldsSetUserErrorCode(Enum):
    app_not_authorized = "APP_NOT_AUTHORIZED"
    blank = "BLANK"
    capability_violation = "CAPABILITY_VIOLATION"
    inclusion = "INCLUSION"
    internal_error = "INTERNAL_ERROR"
    invalid_compare_digest = "INVALID_COMPARE_DIGEST"
    invalid_type = "INVALID_TYPE"
    invalid_value = "INVALID_VALUE"
    less_than_or_equal_to = "LESS_THAN_OR_EQUAL_TO"
    present = "PRESENT"
    stale_object = "STALE_OBJECT"
    too_long = "TOO_LONG"
    too_short = "TOO_SHORT"


class MetaobjectAdminAccess(Enum):
    merchant_read = "MERCHANT_READ"
    merchant_read_write = "MERCHANT_READ_WRITE"
    private = "PRIVATE"
    public_read = "PUBLIC_READ"
    public_read_write = "PUBLIC_READ_WRITE"


class MetaobjectStatus(Enum):
    active = "ACTIVE"
    draft = "DRAFT"


class MetaobjectStorefrontAccess(Enum):
    none = "NONE"
    public_read = "PUBLIC_READ"


class MetaobjectUserErrorCode(Enum):
    blank = "BLANK"
    capability_not_enabled = "CAPABILITY_NOT_ENABLED"
    display_name_conflict = "DISPLAY_NAME_CONFLICT"
    duplicate_field_input = "DUPLICATE_FIELD_INPUT"
    field_type_invalid = "FIELD_TYPE_INVALID"
    immutable = "IMMUTABLE"
    inclusion = "INCLUSION"
    internal_error = "INTERNAL_ERROR"
    invalid = "INVALID"
    invalid_option = "INVALID_OPTION"
    invalid_type = "INVALID_TYPE"
    invalid_value = "INVALID_VALUE"
    max_definitions_exceeded = "MAX_DEFINITIONS_EXCEEDED"
    max_objects_exceeded = "MAX_OBJECTS_EXCEEDED"
    missing_required_keys = "MISSING_REQUIRED_KEYS"
    not_authorized = "NOT_AUTHORIZED"
    object_field_required = "OBJECT_FIELD_REQUIRED"
    object_field_taken = "OBJECT_FIELD_TAKEN"
    present = "PRESENT"
    record_not_found = "RECORD_NOT_FOUND"
    reserved_name = "RESERVED_NAME"
    taken = "TAKEN"
    too_long = "TOO_LONG"
    too_short = "TOO_SHORT"
    undefined_object_field = "UNDEFINED_OBJECT_FIELD"
    undefined_object_type = "UNDEFINED_OBJECT_TYPE"
    url_handle_blank = "URL_HANDLE_BLANK"
    url_handle_invalid = "URL_HANDLE_INVALID"
    url_handle_taken = "URL_HANDLE_TAKEN"


class MethodDefinitionSortKeys(Enum):
    id = "ID"
    rate_provider_type = "RATE_PROVIDER_TYPE"
    relevance = "RELEVANCE"


class MobilePlatformApplicationUserErrorCode(Enum):
    invalid = "INVALID"
    not_found = "NOT_FOUND"
    too_long = "TOO_LONG"


class OrderActionType(Enum):
    order = "ORDER"
    order_edit = "ORDER_EDIT"
    refund = "REFUND"
    return_ = "RETURN"
    unknown = "UNKNOWN"


class OrderCancelReason(Enum):
    customer = "CUSTOMER"
    declined = "DECLINED"
    fraud = "FRAUD"
    inventory = "INVENTORY"
    other = "OTHER"
    staff = "STAFF"


class OrderCancelUserErrorCode(Enum):
    invalid = "INVALID"
    not_found = "NOT_FOUND"
    no_refund_permission = "NO_REFUND_PERMISSION"


class OrderCreateMandatePaymentUserErrorCode(Enum):
    order_mandate_payment_error_code = "ORDER_MANDATE_PAYMENT_ERROR_CODE"


class OrderDeleteUserErrorCode(Enum):
    invalid = "INVALID"
    not_found = "NOT_FOUND"


class OrderDisplayFinancialStatus(Enum):
    authorized = "AUTHORIZED"
    expired = "EXPIRED"
    paid = "PAID"
    partially_paid = "PARTIALLY_PAID"
    partially_refunded = "PARTIALLY_REFUNDED"
    pending = "PENDING"
    refunded = "REFUNDED"
    voided = "VOIDED"


class OrderDisplayFulfillmentStatus(Enum):
    fulfilled = "FULFILLED"
    in_progress = "IN_PROGRESS"
    on_hold = "ON_HOLD"
    open = "OPEN"
    partially_fulfilled = "PARTIALLY_FULFILLED"
    pending_fulfillment = "PENDING_FULFILLMENT"
    request_declined = "REQUEST_DECLINED"
    restocked = "RESTOCKED"
    scheduled = "SCHEDULED"
    unfulfilled = "UNFULFILLED"


class OrderEditAddShippingLineUserErrorCode(Enum):
    invalid = "INVALID"


class OrderEditRemoveDiscountUserErrorCode(Enum):
    invalid = "INVALID"


class OrderEditRemoveShippingLineUserErrorCode(Enum):
    invalid = "INVALID"


class OrderEditUpdateDiscountUserErrorCode(Enum):
    invalid = "INVALID"


class OrderEditUpdateShippingLineUserErrorCode(Enum):
    invalid = "INVALID"


class OrderInvoiceSendUserErrorCode(Enum):
    order_invoice_send_unsuccessful = "ORDER_INVOICE_SEND_UNSUCCESSFUL"


class OrderPaymentStatusResult(Enum):
    authorized = "AUTHORIZED"
    captured = "CAPTURED"
    error = "ERROR"
    initiated = "INITIATED"
    pending = "PENDING"
    processing = "PROCESSING"
    purchased = "PURCHASED"
    redirect_required = "REDIRECT_REQUIRED"
    refunded = "REFUNDED"
    retryable = "RETRYABLE"
    success = "SUCCESS"
    unknown = "UNKNOWN"
    voided = "VOIDED"


class OrderReturnStatus(Enum):
    inspection_complete = "INSPECTION_COMPLETE"
    in_progress = "IN_PROGRESS"
    no_return = "NO_RETURN"
    returned = "RETURNED"
    return_failed = "RETURN_FAILED"
    return_requested = "RETURN_REQUESTED"


class OrderRiskAssessmentCreateUserErrorCode(Enum):
    invalid = "INVALID"
    not_found = "NOT_FOUND"
    order_already_fulfilled = "ORDER_ALREADY_FULFILLED"
    too_many_facts = "TOO_MANY_FACTS"


class OrderRiskLevel(Enum):
    high = "HIGH"
    low = "LOW"
    medium = "MEDIUM"


class OrderRiskRecommendationResult(Enum):
    accept = "ACCEPT"
    cancel = "CANCEL"
    investigate = "INVESTIGATE"
    none = "NONE"


class OrderSortKeys(Enum):
    created_at = "CREATED_AT"
    customer_name = "CUSTOMER_NAME"
    destination = "DESTINATION"
    financial_status = "FINANCIAL_STATUS"
    fulfillment_status = "FULFILLMENT_STATUS"
    id = "ID"
    order_number = "ORDER_NUMBER"
    po_number = "PO_NUMBER"
    processed_at = "PROCESSED_AT"
    relevance = "RELEVANCE"
    total_items_quantity = "TOTAL_ITEMS_QUANTITY"
    total_price = "TOTAL_PRICE"
    updated_at = "UPDATED_AT"


class OrderTransactionErrorCode(Enum):
    amazon_payments_invalid_payment_method = "AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD"
    amazon_payments_max_amount_charged = "AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED"
    amazon_payments_max_amount_refunded = "AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED"
    amazon_payments_max_authorizations_captured = "AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED"
    amazon_payments_max_refunds_processed = "AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED"
    amazon_payments_order_reference_canceled = "AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED"
    amazon_payments_stale = "AMAZON_PAYMENTS_STALE"
    call_issuer = "CALL_ISSUER"
    card_declined = "CARD_DECLINED"
    config_error = "CONFIG_ERROR"
    expired_card = "EXPIRED_CARD"
    generic_error = "GENERIC_ERROR"
    incorrect_address = "INCORRECT_ADDRESS"
    incorrect_cvc = "INCORRECT_CVC"
    incorrect_number = "INCORRECT_NUMBER"
    incorrect_pin = "INCORRECT_PIN"
    incorrect_zip = "INCORRECT_ZIP"
    invalid_amount = "INVALID_AMOUNT"
    invalid_country = "INVALID_COUNTRY"
    invalid_cvc = "INVALID_CVC"
    invalid_expiry_date = "INVALID_EXPIRY_DATE"
    invalid_number = "INVALID_NUMBER"
    payment_method_unavailable = "PAYMENT_METHOD_UNAVAILABLE"
    pick_up_card = "PICK_UP_CARD"
    processing_error = "PROCESSING_ERROR"
    test_mode_live_card = "TEST_MODE_LIVE_CARD"
    unsupported_feature = "UNSUPPORTED_FEATURE"


class OrderTransactionKind(Enum):
    authorization = "AUTHORIZATION"
    capture = "CAPTURE"
    change = "CHANGE"
    emv_authorization = "EMV_AUTHORIZATION"
    refund = "REFUND"
    sale = "SALE"
    suggested_refund = "SUGGESTED_REFUND"
    void = "VOID"


class OrderTransactionStatus(Enum):
    awaiting_response = "AWAITING_RESPONSE"
    error = "ERROR"
    failure = "FAILURE"
    pending = "PENDING"
    success = "SUCCESS"
    unknown = "UNKNOWN"


class PaymentCustomizationErrorCode(Enum):
    custom_app_function_not_eligible = "CUSTOM_APP_FUNCTION_NOT_ELIGIBLE"
    function_does_not_implement = "FUNCTION_DOES_NOT_IMPLEMENT"
    function_id_cannot_be_changed = "FUNCTION_ID_CANNOT_BE_CHANGED"
    function_not_found = "FUNCTION_NOT_FOUND"
    function_pending_deletion = "FUNCTION_PENDING_DELETION"
    invalid = "INVALID"
    invalid_metafields = "INVALID_METAFIELDS"
    maximum_active_payment_customizations = "MAXIMUM_ACTIVE_PAYMENT_CUSTOMIZATIONS"
    payment_customization_function_not_eligible = "PAYMENT_CUSTOMIZATION_FUNCTION_NOT_ELIGIBLE"
    payment_customization_not_found = "PAYMENT_CUSTOMIZATION_NOT_FOUND"
    required_input_field = "REQUIRED_INPUT_FIELD"


class PaymentMethods(Enum):
    american_express = "AMERICAN_EXPRESS"
    bitcoin = "BITCOIN"
    bogus = "BOGUS"
    dankort = "DANKORT"
    diners_club = "DINERS_CLUB"
    discover = "DISCOVER"
    dogecoin = "DOGECOIN"
    eftpos = "EFTPOS"
    elo = "ELO"
    forbrugsforeningen = "FORBRUGSFORENINGEN"
    interac = "INTERAC"
    jcb = "JCB"
    litecoin = "LITECOIN"
    maestro = "MAESTRO"
    mastercard = "MASTERCARD"
    paypal = "PAYPAL"
    unionpay = "UNIONPAY"
    visa = "VISA"


class PaymentReminderSendUserErrorCode(Enum):
    payment_reminder_send_unsuccessful = "PAYMENT_REMINDER_SEND_UNSUCCESSFUL"


class PaymentTermsCreateUserErrorCode(Enum):
    payment_terms_creation_unsuccessful = "PAYMENT_TERMS_CREATION_UNSUCCESSFUL"


class PaymentTermsDeleteUserErrorCode(Enum):
    payment_terms_delete_unsuccessful = "PAYMENT_TERMS_DELETE_UNSUCCESSFUL"


class PaymentTermsType(Enum):
    fixed = "FIXED"
    fulfillment = "FULFILLMENT"
    net = "NET"
    receipt = "RECEIPT"
    unknown = "UNKNOWN"


class PaymentTermsUpdateUserErrorCode(Enum):
    payment_terms_update_unsuccessful = "PAYMENT_TERMS_UPDATE_UNSUCCESSFUL"


class PayoutSortKeys(Enum):
    adjustment_gross = "ADJUSTMENT_GROSS"
    amount = "AMOUNT"
    charge_gross = "CHARGE_GROSS"
    duties_gross = "DUTIES_GROSS"
    fee_amount = "FEE_AMOUNT"
    id = "ID"
    issued_at = "ISSUED_AT"
    refund_gross = "REFUND_GROSS"
    relevance = "RELEVANCE"
    shipping_label_gross = "SHIPPING_LABEL_GROSS"
    status = "STATUS"


class PaypalExpressSubscriptionsGatewayStatus(Enum):
    disabled = "DISABLED"
    enabled = "ENABLED"
    pending = "PENDING"


class PriceCalculationType(Enum):
    components_sum = "COMPONENTS_SUM"
    fixed = "FIXED"
    none = "NONE"


class PriceListAdjustmentType(Enum):
    percentage_decrease = "PERCENTAGE_DECREASE"
    percentage_increase = "PERCENTAGE_INCREASE"


class PriceListCompareAtMode(Enum):
    adjusted = "ADJUSTED"
    nullify = "NULLIFY"


class PriceListFixedPricesByProductBulkUpdateUserErrorCode(Enum):
    duplicate_id_in_input = "DUPLICATE_ID_IN_INPUT"
    id_must_be_mutually_exclusive = "ID_MUST_BE_MUTUALLY_EXCLUSIVE"
    no_update_operations_specified = "NO_UPDATE_OPERATIONS_SPECIFIED"
    prices_to_add_currency_mismatch = "PRICES_TO_ADD_CURRENCY_MISMATCH"
    price_limit_exceeded = "PRICE_LIMIT_EXCEEDED"
    price_list_does_not_exist = "PRICE_LIST_DOES_NOT_EXIST"
    product_does_not_exist = "PRODUCT_DOES_NOT_EXIST"


class PriceListPriceOriginType(Enum):
    fixed = "FIXED"
    relative = "RELATIVE"


class PriceListPriceUserErrorCode(Enum):
    blank = "BLANK"
    price_list_currency_mismatch = "PRICE_LIST_CURRENCY_MISMATCH"
    price_list_not_found = "PRICE_LIST_NOT_FOUND"
    price_not_fixed = "PRICE_NOT_FIXED"
    variant_not_found = "VARIANT_NOT_FOUND"


class PriceListSortKeys(Enum):
    id = "ID"
    name = "NAME"
    relevance = "RELEVANCE"


class PriceListUserErrorCode(Enum):
    app_catalog_price_list_assignment = "APP_CATALOG_PRICE_LIST_ASSIGNMENT"
    blank = "BLANK"
    catalog_assignment_not_allowed = "CATALOG_ASSIGNMENT_NOT_ALLOWED"
    catalog_cannot_change_context_type = "CATALOG_CANNOT_CHANGE_CONTEXT_TYPE"
    catalog_context_does_not_support_quantity_price_breaks = "CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_PRICE_BREAKS"
    catalog_context_does_not_support_quantity_rules = "CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES"
    catalog_does_not_exist = "CATALOG_DOES_NOT_EXIST"
    catalog_market_and_price_list_currency_mismatch = "CATALOG_MARKET_AND_PRICE_LIST_CURRENCY_MISMATCH"
    catalog_taken = "CATALOG_TAKEN"
    context_rule_countries_limit = "CONTEXT_RULE_COUNTRIES_LIMIT"
    context_rule_country_taken = "CONTEXT_RULE_COUNTRY_TAKEN"
    context_rule_limit_one_option = "CONTEXT_RULE_LIMIT_ONE_OPTION"
    context_rule_limit_reached = "CONTEXT_RULE_LIMIT_REACHED"
    context_rule_market_not_found = "CONTEXT_RULE_MARKET_NOT_FOUND"
    context_rule_market_taken = "CONTEXT_RULE_MARKET_TAKEN"
    country_currency_mismatch = "COUNTRY_CURRENCY_MISMATCH"
    country_price_list_assignment = "COUNTRY_PRICE_LIST_ASSIGNMENT"
    currency_country_mismatch = "CURRENCY_COUNTRY_MISMATCH"
    currency_market_mismatch = "CURRENCY_MARKET_MISMATCH"
    currency_not_supported = "CURRENCY_NOT_SUPPORTED"
    generic_error = "GENERIC_ERROR"
    inclusion = "INCLUSION"
    invalid_adjustment_max_value = "INVALID_ADJUSTMENT_MAX_VALUE"
    invalid_adjustment_min_value = "INVALID_ADJUSTMENT_MIN_VALUE"
    invalid_adjustment_value = "INVALID_ADJUSTMENT_VALUE"
    market_currency_mismatch = "MARKET_CURRENCY_MISMATCH"
    price_list_locked = "PRICE_LIST_LOCKED"
    price_list_not_allowed_for_primary_market = "PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET"
    price_list_not_found = "PRICE_LIST_NOT_FOUND"
    taken = "TAKEN"
    too_long = "TOO_LONG"


class PriceRuleAllocationMethod(Enum):
    across = "ACROSS"
    each = "EACH"


class PriceRuleErrorCode(Enum):
    allocation_method_must_be_across_for_given_target_selection = (
        "ALLOCATION_METHOD_MUST_BE_ACROSS_FOR_GIVEN_TARGET_SELECTION"
    )
    applies_on_nothing = "APPLIES_ON_NOTHING"
    blank = "BLANK"
    bogo_invalid_target_selection = "BOGO_INVALID_TARGET_SELECTION"
    bogo_invalid_target_type = "BOGO_INVALID_TARGET_TYPE"
    bogo_invalid_value_type = "BOGO_INVALID_VALUE_TYPE"
    both_customer_and_saved_search_prerequisites_selected = "BOTH_CUSTOMER_AND_SAVED_SEARCH_PREREQUISITES_SELECTED"
    both_customer_and_segment_prerequisites_selected = "BOTH_CUSTOMER_AND_SEGMENT_PREREQUISITES_SELECTED"
    both_saved_search_and_segment_prerequisites_selected = "BOTH_SAVED_SEARCH_AND_SEGMENT_PREREQUISITES_SELECTED"
    cannot_entitle_collections_with_products_or_variants = "CANNOT_ENTITLE_COLLECTIONS_WITH_PRODUCTS_OR_VARIANTS"
    cannot_prerequisite_collection_with_product_or_variants = "CANNOT_PREREQUISITE_COLLECTION_WITH_PRODUCT_OR_VARIANTS"
    customer_prerequisites_exceeded_max = "CUSTOMER_PREREQUISITES_EXCEEDED_MAX"
    customer_prerequisites_invalid_selection = "CUSTOMER_PREREQUISITES_INVALID_SELECTION"
    customer_prerequisites_missing = "CUSTOMER_PREREQUISITES_MISSING"
    customer_prerequisite_duplicate = "CUSTOMER_PREREQUISITE_DUPLICATE"
    customer_saved_search_duplicate = "CUSTOMER_SAVED_SEARCH_DUPLICATE"
    customer_saved_search_exceeded_max = "CUSTOMER_SAVED_SEARCH_EXCEEDED_MAX"
    customer_saved_search_invalid = "CUSTOMER_SAVED_SEARCH_INVALID"
    customer_segment_exceeded_max = "CUSTOMER_SEGMENT_EXCEEDED_MAX"
    customer_segment_invalid = "CUSTOMER_SEGMENT_INVALID"
    customer_segment_prerequisite_duplicate = "CUSTOMER_SEGMENT_PREREQUISITE_DUPLICATE"
    discount_code_duplicate = "DISCOUNT_CODE_DUPLICATE"
    end_date_before_start_date = "END_DATE_BEFORE_START_DATE"
    equal_to = "EQUAL_TO"
    exceeded_max = "EXCEEDED_MAX"
    greater_than = "GREATER_THAN"
    greater_than_or_equal_to = "GREATER_THAN_OR_EQUAL_TO"
    internal_error = "INTERNAL_ERROR"
    invalid = "INVALID"
    invalid_combines_with_for_discount_class = "INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS"
    invalid_discount_class_for_price_rule = "INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE"
    invalid_target_type_prerequisite_shipping_price_range = "INVALID_TARGET_TYPE_PREREQUISITE_SHIPPING_PRICE_RANGE"
    item_entitlements_duplicate_collection = "ITEM_ENTITLEMENTS_DUPLICATE_COLLECTION"
    item_entitlements_duplicate_product = "ITEM_ENTITLEMENTS_DUPLICATE_PRODUCT"
    item_entitlements_duplicate_variant = "ITEM_ENTITLEMENTS_DUPLICATE_VARIANT"
    item_entitlements_exceeded_max_collection = "ITEM_ENTITLEMENTS_EXCEEDED_MAX_COLLECTION"
    item_entitlements_exceeded_max_product = "ITEM_ENTITLEMENTS_EXCEEDED_MAX_PRODUCT"
    item_entitlements_exceeded_max_variant = "ITEM_ENTITLEMENTS_EXCEEDED_MAX_VARIANT"
    item_entitlements_invalid_collection = "ITEM_ENTITLEMENTS_INVALID_COLLECTION"
    item_entitlements_invalid_product = "ITEM_ENTITLEMENTS_INVALID_PRODUCT"
    item_entitlements_invalid_target_type_or_selection = "ITEM_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION"
    item_entitlements_invalid_variant = "ITEM_ENTITLEMENTS_INVALID_VARIANT"
    item_entitlements_missing = "ITEM_ENTITLEMENTS_MISSING"
    item_entitlement_invalid_type = "ITEM_ENTITLEMENT_INVALID_TYPE"
    item_prerequisites_duplicate_collection = "ITEM_PREREQUISITES_DUPLICATE_COLLECTION"
    item_prerequisites_duplicate_product = "ITEM_PREREQUISITES_DUPLICATE_PRODUCT"
    item_prerequisites_duplicate_variant = "ITEM_PREREQUISITES_DUPLICATE_VARIANT"
    item_prerequisites_exceeded_max = "ITEM_PREREQUISITES_EXCEEDED_MAX"
    item_prerequisites_invalid_collection = "ITEM_PREREQUISITES_INVALID_COLLECTION"
    item_prerequisites_invalid_product = "ITEM_PREREQUISITES_INVALID_PRODUCT"
    item_prerequisites_invalid_type = "ITEM_PREREQUISITES_INVALID_TYPE"
    item_prerequisites_invalid_variant = "ITEM_PREREQUISITES_INVALID_VARIANT"
    item_prerequisites_missing = "ITEM_PREREQUISITES_MISSING"
    item_prerequisites_must_be_empty = "ITEM_PREREQUISITES_MUST_BE_EMPTY"
    less_than = "LESS_THAN"
    less_than_or_equal_to = "LESS_THAN_OR_EQUAL_TO"
    missing_argument = "MISSING_ARGUMENT"
    multiple_recurring_cycle_limit_for_non_subscription_items = (
        "MULTIPLE_RECURRING_CYCLE_LIMIT_FOR_NON_SUBSCRIPTION_ITEMS"
    )
    prerequisite_subtotal_and_quantity_range_both_present = "PREREQUISITE_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT"
    price_rule_allocation_limit_is_zero = "PRICE_RULE_ALLOCATION_LIMIT_IS_ZERO"
    price_rule_allocation_limit_on_non_bogo = "PRICE_RULE_ALLOCATION_LIMIT_ON_NON_BOGO"
    price_rule_exceeded_max_discount_code = "PRICE_RULE_EXCEEDED_MAX_DISCOUNT_CODE"
    price_rule_percentage_value_outside_range = "PRICE_RULE_PERCENTAGE_VALUE_OUTSIDE_RANGE"
    shipping_entitlements_duplicate_country = "SHIPPING_ENTITLEMENTS_DUPLICATE_COUNTRY"
    shipping_entitlements_exceeded_max = "SHIPPING_ENTITLEMENTS_EXCEEDED_MAX"
    shipping_entitlements_invalid_country = "SHIPPING_ENTITLEMENTS_INVALID_COUNTRY"
    shipping_entitlements_invalid_target_type_or_selection = "SHIPPING_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION"
    shipping_entitlements_missing = "SHIPPING_ENTITLEMENTS_MISSING"
    shipping_entitlements_unsupported_destination_type = "SHIPPING_ENTITLEMENTS_UNSUPPORTED_DESTINATION_TYPE"
    shop_exceeded_max_price_rules = "SHOP_EXCEEDED_MAX_PRICE_RULES"
    taken = "TAKEN"
    too_long = "TOO_LONG"
    too_many_arguments = "TOO_MANY_ARGUMENTS"
    too_short = "TOO_SHORT"
    variant_already_entitled_through_product = "VARIANT_ALREADY_ENTITLED_THROUGH_PRODUCT"


class PriceRuleFeature(Enum):
    bulk = "BULK"
    buy_one_get_one = "BUY_ONE_GET_ONE"
    buy_one_get_one_with_allocation_limit = "BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT"
    quantity_discounts = "QUANTITY_DISCOUNTS"
    specific_customers = "SPECIFIC_CUSTOMERS"


class PriceRuleShareableUrlTargetType(Enum):
    collection = "COLLECTION"
    home = "HOME"
    product = "PRODUCT"


class PriceRuleSortKeys(Enum):
    created_at = "CREATED_AT"
    ends_at = "ENDS_AT"
    id = "ID"
    relevance = "RELEVANCE"
    starts_at = "STARTS_AT"
    title = "TITLE"
    updated_at = "UPDATED_AT"


class PriceRuleStatus(Enum):
    active = "ACTIVE"
    expired = "EXPIRED"
    scheduled = "SCHEDULED"


class PriceRuleTarget(Enum):
    line_item = "LINE_ITEM"
    shipping_line = "SHIPPING_LINE"


class PriceRuleTrait(Enum):
    bulk = "BULK"
    buy_one_get_one = "BUY_ONE_GET_ONE"
    buy_one_get_one_with_allocation_limit = "BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT"
    quantity_discounts = "QUANTITY_DISCOUNTS"
    specific_customers = "SPECIFIC_CUSTOMERS"


class PrivateMetafieldValueType(Enum):
    integer = "INTEGER"
    json_string = "JSON_STRING"
    string = "STRING"


class ProductBundleComponentOptionSelectionStatus(Enum):
    deselected = "DESELECTED"
    new = "NEW"
    selected = "SELECTED"
    unavailable = "UNAVAILABLE"


class ProductBundleMutationUserErrorCode(Enum):
    generic_error = "GENERIC_ERROR"
    invalid_input = "INVALID_INPUT"
    job_error = "JOB_ERROR"
    product_does_not_exist = "PRODUCT_DOES_NOT_EXIST"


class ProductChangeStatusUserErrorCode(Enum):
    combined_listings_not_compatible_with_shop = "COMBINED_LISTINGS_NOT_COMPATIBLE_WITH_SHOP"
    product_not_found = "PRODUCT_NOT_FOUND"


class ProductCollectionSortKeys(Enum):
    best_selling = "BEST_SELLING"
    collection_default = "COLLECTION_DEFAULT"
    created = "CREATED"
    id = "ID"
    manual = "MANUAL"
    price = "PRICE"
    relevance = "RELEVANCE"
    title = "TITLE"


class ProductFeedCreateUserErrorCode(Enum):
    invalid = "INVALID"
    taken = "TAKEN"


class ProductFeedDeleteUserErrorCode(Enum):
    invalid = "INVALID"


class ProductFeedStatus(Enum):
    active = "ACTIVE"
    inactive = "INACTIVE"


class ProductFullSyncUserErrorCode(Enum):
    invalid = "INVALID"


class ProductImageSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    position = "POSITION"
    relevance = "RELEVANCE"


class ProductMediaSortKeys(Enum):
    id = "ID"
    position = "POSITION"
    relevance = "RELEVANCE"


class ProductOperationStatus(Enum):
    active = "ACTIVE"
    complete = "COMPLETE"
    created = "CREATED"


class ProductOptionDeleteStrategy(Enum):
    default = "DEFAULT"
    non_destructive = "NON_DESTRUCTIVE"
    position = "POSITION"


class ProductOptionUpdateUserErrorCode(Enum):
    cannot_combine_linked_and_nonlinked_option_values = "CANNOT_COMBINE_LINKED_AND_NONLINKED_OPTION_VALUES"
    cannot_create_variants_above_limit = "CANNOT_CREATE_VARIANTS_ABOVE_LIMIT"
    cannot_delete_all_option_values_in_option = "CANNOT_DELETE_ALL_OPTION_VALUES_IN_OPTION"
    cannot_delete_variant_without_permission = "CANNOT_DELETE_VARIANT_WITHOUT_PERMISSION"
    cannot_leave_options_without_variants = "CANNOT_LEAVE_OPTIONS_WITHOUT_VARIANTS"
    cannot_make_changes_if_variant_is_missing_required_sku = "CANNOT_MAKE_CHANGES_IF_VARIANT_IS_MISSING_REQUIRED_SKU"
    duplicated_option_value = "DUPLICATED_OPTION_VALUE"
    duplicate_linked_option = "DUPLICATE_LINKED_OPTION"
    invalid_metafield_value_for_linked_option = "INVALID_METAFIELD_VALUE_FOR_LINKED_OPTION"
    invalid_name = "INVALID_NAME"
    invalid_position = "INVALID_POSITION"
    key_missing_in_input = "KEY_MISSING_IN_INPUT"
    linked_metafield_definition_not_found = "LINKED_METAFIELD_DEFINITION_NOT_FOUND"
    linked_options_not_supported_for_shop = "LINKED_OPTIONS_NOT_SUPPORTED_FOR_SHOP"
    linked_option_update_missing_values = "LINKED_OPTION_UPDATE_MISSING_VALUES"
    no_key_on_create = "NO_KEY_ON_CREATE"
    option_already_exists = "OPTION_ALREADY_EXISTS"
    option_does_not_exist = "OPTION_DOES_NOT_EXIST"
    option_linked_metafield_already_taken = "OPTION_LINKED_METAFIELD_ALREADY_TAKEN"
    option_name_too_long = "OPTION_NAME_TOO_LONG"
    option_values_over_limit = "OPTION_VALUES_OVER_LIMIT"
    option_value_already_exists = "OPTION_VALUE_ALREADY_EXISTS"
    option_value_conflicting_operation = "OPTION_VALUE_CONFLICTING_OPERATION"
    option_value_does_not_exist = "OPTION_VALUE_DOES_NOT_EXIST"
    option_value_has_variants = "OPTION_VALUE_HAS_VARIANTS"
    option_value_name_too_long = "OPTION_VALUE_NAME_TOO_LONG"
    product_does_not_exist = "PRODUCT_DOES_NOT_EXIST"
    product_suspended = "PRODUCT_SUSPENDED"
    unsupported_combined_listing_parent_operation = "UNSUPPORTED_COMBINED_LISTING_PARENT_OPERATION"


class ProductOptionUpdateVariantStrategy(Enum):
    leave_as_is = "LEAVE_AS_IS"
    manage = "MANAGE"


class ProductOptionsCreateUserErrorCode(Enum):
    cannot_combine_linked_metafield_and_option_values = "CANNOT_COMBINE_LINKED_METAFIELD_AND_OPTION_VALUES"
    cannot_make_changes_if_variant_is_missing_required_sku = "CANNOT_MAKE_CHANGES_IF_VARIANT_IS_MISSING_REQUIRED_SKU"
    duplicated_option_name = "DUPLICATED_OPTION_NAME"
    duplicated_option_value = "DUPLICATED_OPTION_VALUE"
    duplicate_linked_option = "DUPLICATE_LINKED_OPTION"
    invalid_metafield_value_for_linked_option = "INVALID_METAFIELD_VALUE_FOR_LINKED_OPTION"
    invalid_name = "INVALID_NAME"
    linked_metafield_definition_not_found = "LINKED_METAFIELD_DEFINITION_NOT_FOUND"
    linked_metafield_value_without_linked_option = "LINKED_METAFIELD_VALUE_WITHOUT_LINKED_OPTION"
    linked_options_not_supported_for_shop = "LINKED_OPTIONS_NOT_SUPPORTED_FOR_SHOP"
    missing_metafield_values_for_linked_option = "MISSING_METAFIELD_VALUES_FOR_LINKED_OPTION"
    new_option_without_value_for_existing_variants = "NEW_OPTION_WITHOUT_VALUE_FOR_EXISTING_VARIANTS"
    options_over_limit = "OPTIONS_OVER_LIMIT"
    option_already_exists = "OPTION_ALREADY_EXISTS"
    option_linked_metafield_already_taken = "OPTION_LINKED_METAFIELD_ALREADY_TAKEN"
    option_name_missing = "OPTION_NAME_MISSING"
    option_position_missing = "OPTION_POSITION_MISSING"
    option_values_missing = "OPTION_VALUES_MISSING"
    option_values_over_limit = "OPTION_VALUES_OVER_LIMIT"
    position_out_of_bounds = "POSITION_OUT_OF_BOUNDS"
    product_does_not_exist = "PRODUCT_DOES_NOT_EXIST"
    product_suspended = "PRODUCT_SUSPENDED"
    unsupported_combined_listing_parent_operation = "UNSUPPORTED_COMBINED_LISTING_PARENT_OPERATION"


class ProductOptionsDeleteUserErrorCode(Enum):
    cannot_delete_option_with_multiple_values = "CANNOT_DELETE_OPTION_WITH_MULTIPLE_VALUES"
    cannot_make_changes_if_variant_is_missing_required_sku = "CANNOT_MAKE_CHANGES_IF_VARIANT_IS_MISSING_REQUIRED_SKU"
    cannot_use_non_destructive_strategy = "CANNOT_USE_NON_DESTRUCTIVE_STRATEGY"
    options_do_not_belong_to_the_same_product = "OPTIONS_DO_NOT_BELONG_TO_THE_SAME_PRODUCT"
    option_does_not_exist = "OPTION_DOES_NOT_EXIST"
    product_does_not_exist = "PRODUCT_DOES_NOT_EXIST"
    product_suspended = "PRODUCT_SUSPENDED"
    unsupported_combined_listing_parent_operation = "UNSUPPORTED_COMBINED_LISTING_PARENT_OPERATION"


class ProductOptionsReorderUserErrorCode(Enum):
    cannot_make_changes_if_variant_is_missing_required_sku = "CANNOT_MAKE_CHANGES_IF_VARIANT_IS_MISSING_REQUIRED_SKU"
    duplicated_option_name = "DUPLICATED_OPTION_NAME"
    duplicated_option_value = "DUPLICATED_OPTION_VALUE"
    missing_option_name = "MISSING_OPTION_NAME"
    missing_option_value = "MISSING_OPTION_VALUE"
    mixing_id_and_name_keys_is_not_allowed = "MIXING_ID_AND_NAME_KEYS_IS_NOT_ALLOWED"
    no_key_on_reorder = "NO_KEY_ON_REORDER"
    option_id_does_not_exist = "OPTION_ID_DOES_NOT_EXIST"
    option_name_does_not_exist = "OPTION_NAME_DOES_NOT_EXIST"
    option_value_does_not_exist = "OPTION_VALUE_DOES_NOT_EXIST"
    option_value_id_does_not_exist = "OPTION_VALUE_ID_DOES_NOT_EXIST"
    product_does_not_exist = "PRODUCT_DOES_NOT_EXIST"


class ProductSetUserErrorCode(Enum):
    cannot_combine_linked_and_nonlinked_option_values = "CANNOT_COMBINE_LINKED_AND_NONLINKED_OPTION_VALUES"
    capability_violation = "CAPABILITY_VIOLATION"
    duplicated_option_name = "DUPLICATED_OPTION_NAME"
    duplicated_option_value = "DUPLICATED_OPTION_VALUE"
    duplicated_value = "DUPLICATED_VALUE"
    duplicate_linked_option = "DUPLICATE_LINKED_OPTION"
    generic_error = "GENERIC_ERROR"
    gift_cards_not_activated = "GIFT_CARDS_NOT_ACTIVATED"
    gift_card_attribute_cannot_be_changed = "GIFT_CARD_ATTRIBUTE_CANNOT_BE_CHANGED"
    invalid_input = "INVALID_INPUT"
    invalid_metafield = "INVALID_METAFIELD"
    invalid_metafield_value_for_linked_option = "INVALID_METAFIELD_VALUE_FOR_LINKED_OPTION"
    invalid_product = "INVALID_PRODUCT"
    invalid_variant = "INVALID_VARIANT"
    job_error = "JOB_ERROR"
    linked_metafield_definition_not_found = "LINKED_METAFIELD_DEFINITION_NOT_FOUND"
    linked_options_not_supported_for_shop = "LINKED_OPTIONS_NOT_SUPPORTED_FOR_SHOP"
    options_over_limit = "OPTIONS_OVER_LIMIT"
    option_does_not_exist = "OPTION_DOES_NOT_EXIST"
    option_values_missing = "OPTION_VALUES_MISSING"
    option_values_over_limit = "OPTION_VALUES_OVER_LIMIT"
    option_value_does_not_exist = "OPTION_VALUE_DOES_NOT_EXIST"
    product_does_not_exist = "PRODUCT_DOES_NOT_EXIST"
    product_options_input_missing = "PRODUCT_OPTIONS_INPUT_MISSING"
    product_variant_does_not_exist = "PRODUCT_VARIANT_DOES_NOT_EXIST"
    variants_input_missing = "VARIANTS_INPUT_MISSING"
    variants_over_limit = "VARIANTS_OVER_LIMIT"


class ProductSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    inventory_total = "INVENTORY_TOTAL"
    product_type = "PRODUCT_TYPE"
    published_at = "PUBLISHED_AT"
    relevance = "RELEVANCE"
    title = "TITLE"
    updated_at = "UPDATED_AT"
    vendor = "VENDOR"


class ProductStatus(Enum):
    active = "ACTIVE"
    archived = "ARCHIVED"
    draft = "DRAFT"


class ProductVariantInventoryPolicy(Enum):
    continue_ = "CONTINUE"
    deny = "DENY"


class ProductVariantRelationshipBulkUpdateUserErrorCode(Enum):
    child_product_variant_cannot_be_combined_listing = "CHILD_PRODUCT_VARIANT_CANNOT_BE_COMBINED_LISTING"
    circular_reference = "CIRCULAR_REFERENCE"
    duplicate_product_variant_relationship = "DUPLICATE_PRODUCT_VARIANT_RELATIONSHIP"
    exceeded_product_variant_relationship_limit = "EXCEEDED_PRODUCT_VARIANT_RELATIONSHIP_LIMIT"
    failed_to_create = "FAILED_TO_CREATE"
    failed_to_remove = "FAILED_TO_REMOVE"
    failed_to_update = "FAILED_TO_UPDATE"
    failed_to_update_parent_product_variant_price = "FAILED_TO_UPDATE_PARENT_PRODUCT_VARIANT_PRICE"
    invalid_quantity = "INVALID_QUANTITY"
    must_specify_components = "MUST_SPECIFY_COMPONENTS"
    nested_parent_product_variant = "NESTED_PARENT_PRODUCT_VARIANT"
    parent_product_variant_cannot_be_combined_listing = "PARENT_PRODUCT_VARIANT_CANNOT_BE_COMBINED_LISTING"
    parent_product_variant_cannot_be_gift_card = "PARENT_PRODUCT_VARIANT_CANNOT_BE_GIFT_CARD"
    parent_product_variant_cannot_require_selling_plan = "PARENT_PRODUCT_VARIANT_CANNOT_REQUIRE_SELLING_PLAN"
    parent_required = "PARENT_REQUIRED"
    product_expander_app_ownership_already_exists = "PRODUCT_EXPANDER_APP_OWNERSHIP_ALREADY_EXISTS"
    product_variants_not_components = "PRODUCT_VARIANTS_NOT_COMPONENTS"
    product_variants_not_found = "PRODUCT_VARIANTS_NOT_FOUND"
    product_variant_relationship_type_conflict = "PRODUCT_VARIANT_RELATIONSHIP_TYPE_CONFLICT"
    unexpected_error = "UNEXPECTED_ERROR"
    unsupported_multipack_relationship = "UNSUPPORTED_MULTIPACK_RELATIONSHIP"
    update_parent_variant_price_required = "UPDATE_PARENT_VARIANT_PRICE_REQUIRED"


class ProductVariantSortKeys(Enum):
    full_title = "FULL_TITLE"
    id = "ID"
    inventory_levels_available = "INVENTORY_LEVELS_AVAILABLE"
    inventory_management = "INVENTORY_MANAGEMENT"
    inventory_policy = "INVENTORY_POLICY"
    inventory_quantity = "INVENTORY_QUANTITY"
    name = "NAME"
    popular = "POPULAR"
    position = "POSITION"
    relevance = "RELEVANCE"
    sku = "SKU"
    title = "TITLE"


class ProductVariantsBulkCreateStrategy(Enum):
    default = "DEFAULT"
    remove_standalone_variant = "REMOVE_STANDALONE_VARIANT"


class ProductVariantsBulkCreateUserErrorCode(Enum):
    greater_than_or_equal_to = "GREATER_THAN_OR_EQUAL_TO"
    invalid = "INVALID"
    must_be_for_this_product = "MUST_BE_FOR_THIS_PRODUCT"
    need_to_add_option_values = "NEED_TO_ADD_OPTION_VALUES"
    negative_price_value = "NEGATIVE_PRICE_VALUE"
    not_defined_for_shop = "NOT_DEFINED_FOR_SHOP"
    no_key_on_create = "NO_KEY_ON_CREATE"
    option_values_for_number_of_unknown_options = "OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS"
    product_does_not_exist = "PRODUCT_DOES_NOT_EXIST"
    subscription_violation = "SUBSCRIPTION_VIOLATION"
    too_many_inventory_locations = "TOO_MANY_INVENTORY_LOCATIONS"
    tracked_variant_location_not_found = "TRACKED_VARIANT_LOCATION_NOT_FOUND"
    unsupported_combined_listing_parent_operation = "UNSUPPORTED_COMBINED_LISTING_PARENT_OPERATION"
    variant_already_exists = "VARIANT_ALREADY_EXISTS"
    variant_already_exists_change_option_value = "VARIANT_ALREADY_EXISTS_CHANGE_OPTION_VALUE"


class ProductVariantsBulkDeleteUserErrorCode(Enum):
    at_least_one_variant_does_not_belong_to_the_product = "AT_LEAST_ONE_VARIANT_DOES_NOT_BELONG_TO_THE_PRODUCT"
    cannot_delete_last_variant = "CANNOT_DELETE_LAST_VARIANT"
    product_does_not_exist = "PRODUCT_DOES_NOT_EXIST"
    unsupported_combined_listing_parent_operation = "UNSUPPORTED_COMBINED_LISTING_PARENT_OPERATION"


class ProductVariantsBulkReorderUserErrorCode(Enum):
    duplicated_variant_id = "DUPLICATED_VARIANT_ID"
    invalid_position = "INVALID_POSITION"
    missing_variant = "MISSING_VARIANT"
    product_does_not_exist = "PRODUCT_DOES_NOT_EXIST"


class ProductVariantsBulkUpdateUserErrorCode(Enum):
    cannot_set_name_for_linked_option_value = "CANNOT_SET_NAME_FOR_LINKED_OPTION_VALUE"
    cannot_specify_both = "CANNOT_SPECIFY_BOTH"
    greater_than_or_equal_to = "GREATER_THAN_OR_EQUAL_TO"
    invalid_input = "INVALID_INPUT"
    must_specify_one_of_pair = "MUST_SPECIFY_ONE_OF_PAIR"
    need_to_add_option_values = "NEED_TO_ADD_OPTION_VALUES"
    negative_price_value = "NEGATIVE_PRICE_VALUE"
    no_inventory_quantites_during_update = "NO_INVENTORY_QUANTITES_DURING_UPDATE"
    no_inventory_quantities_on_variants_update = "NO_INVENTORY_QUANTITIES_ON_VARIANTS_UPDATE"
    option_does_not_exist = "OPTION_DOES_NOT_EXIST"
    option_values_for_number_of_unknown_options = "OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS"
    option_value_does_not_exist = "OPTION_VALUE_DOES_NOT_EXIST"
    product_does_not_exist = "PRODUCT_DOES_NOT_EXIST"
    product_variant_does_not_exist = "PRODUCT_VARIANT_DOES_NOT_EXIST"
    product_variant_id_missing = "PRODUCT_VARIANT_ID_MISSING"
    subscription_violation = "SUBSCRIPTION_VIOLATION"
    unsupported_combined_listing_parent_operation = "UNSUPPORTED_COMBINED_LISTING_PARENT_OPERATION"
    variant_already_exists = "VARIANT_ALREADY_EXISTS"


class ProfileItemSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    inventory_total = "INVENTORY_TOTAL"
    product_type = "PRODUCT_TYPE"
    published_at = "PUBLISHED_AT"
    relevance = "RELEVANCE"
    title = "TITLE"
    updated_at = "UPDATED_AT"
    vendor = "VENDOR"


class PubSubWebhookSubscriptionCreateUserErrorCode(Enum):
    invalid_parameters = "INVALID_PARAMETERS"
    taken = "TAKEN"


class PubSubWebhookSubscriptionUpdateUserErrorCode(Enum):
    invalid_parameters = "INVALID_PARAMETERS"


class PublicationCreateInputPublicationDefaultState(Enum):
    all_products = "ALL_PRODUCTS"
    empty = "EMPTY"


class PublicationUserErrorCode(Enum):
    blank = "BLANK"
    cannot_modify_app_catalog = "CANNOT_MODIFY_APP_CATALOG"
    cannot_modify_app_catalog_publication = "CANNOT_MODIFY_APP_CATALOG_PUBLICATION"
    cannot_modify_market_catalog = "CANNOT_MODIFY_MARKET_CATALOG"
    cannot_modify_market_catalog_publication = "CANNOT_MODIFY_MARKET_CATALOG_PUBLICATION"
    catalog_not_found = "CATALOG_NOT_FOUND"
    invalid = "INVALID"
    invalid_publishable_id = "INVALID_PUBLISHABLE_ID"
    market_not_found = "MARKET_NOT_FOUND"
    product_type_incompatible_with_catalog_type = "PRODUCT_TYPE_INCOMPATIBLE_WITH_CATALOG_TYPE"
    publication_locked = "PUBLICATION_LOCKED"
    publication_not_found = "PUBLICATION_NOT_FOUND"
    publication_update_limit_exceeded = "PUBLICATION_UPDATE_LIMIT_EXCEEDED"
    taken = "TAKEN"
    too_long = "TOO_LONG"
    too_short = "TOO_SHORT"
    unsupported_publication_action = "UNSUPPORTED_PUBLICATION_ACTION"
    unsupported_publishable_type = "UNSUPPORTED_PUBLISHABLE_TYPE"


class QuantityPriceBreakSortKeys(Enum):
    id = "ID"
    minimum_quantity = "MINIMUM_QUANTITY"
    relevance = "RELEVANCE"


class QuantityPricingByVariantUserErrorCode(Enum):
    blank = "BLANK"
    generic_error = "GENERIC_ERROR"
    price_add_currency_mismatch = "PRICE_ADD_CURRENCY_MISMATCH"
    price_add_duplicate_input_for_variant = "PRICE_ADD_DUPLICATE_INPUT_FOR_VARIANT"
    price_add_variant_not_found = "PRICE_ADD_VARIANT_NOT_FOUND"
    price_delete_price_not_fixed = "PRICE_DELETE_PRICE_NOT_FIXED"
    price_delete_variant_not_found = "PRICE_DELETE_VARIANT_NOT_FOUND"
    price_list_not_found = "PRICE_LIST_NOT_FOUND"
    quantity_price_break_add_currency_mismatch = "QUANTITY_PRICE_BREAK_ADD_CURRENCY_MISMATCH"
    quantity_price_break_add_duplicate_input_for_variant_and_min = (
        "QUANTITY_PRICE_BREAK_ADD_DUPLICATE_INPUT_FOR_VARIANT_AND_MIN"
    )
    quantity_price_break_add_failed_to_save = "QUANTITY_PRICE_BREAK_ADD_FAILED_TO_SAVE"
    quantity_price_break_add_invalid = "QUANTITY_PRICE_BREAK_ADD_INVALID"
    quantity_price_break_add_limit_exceeded = "QUANTITY_PRICE_BREAK_ADD_LIMIT_EXCEEDED"
    quantity_price_break_add_min_higher_than_quantity_rules_max = (
        "QUANTITY_PRICE_BREAK_ADD_MIN_HIGHER_THAN_QUANTITY_RULES_MAX"
    )
    quantity_price_break_add_min_lower_than_quantity_rules_min = (
        "QUANTITY_PRICE_BREAK_ADD_MIN_LOWER_THAN_QUANTITY_RULES_MIN"
    )
    quantity_price_break_add_min_not_a_multiple_of_quantity_rules_increment = (
        "QUANTITY_PRICE_BREAK_ADD_MIN_NOT_A_MULTIPLE_OF_QUANTITY_RULES_INCREMENT"
    )
    quantity_price_break_add_price_list_price_not_found = "QUANTITY_PRICE_BREAK_ADD_PRICE_LIST_PRICE_NOT_FOUND"
    quantity_price_break_add_variant_not_found = "QUANTITY_PRICE_BREAK_ADD_VARIANT_NOT_FOUND"
    quantity_price_break_delete_failed = "QUANTITY_PRICE_BREAK_DELETE_FAILED"
    quantity_price_break_delete_not_found = "QUANTITY_PRICE_BREAK_DELETE_NOT_FOUND"
    quantity_rule_add_catalog_context_not_supported = "QUANTITY_RULE_ADD_CATALOG_CONTEXT_NOT_SUPPORTED"
    quantity_rule_add_duplicate_input_for_variant = "QUANTITY_RULE_ADD_DUPLICATE_INPUT_FOR_VARIANT"
    quantity_rule_add_increment_is_greater_than_minimum = "QUANTITY_RULE_ADD_INCREMENT_IS_GREATER_THAN_MINIMUM"
    quantity_rule_add_increment_is_less_than_one = "QUANTITY_RULE_ADD_INCREMENT_IS_LESS_THAN_ONE"
    quantity_rule_add_increment_not_a_multiple_of_quantity_price_break_min = (
        "QUANTITY_RULE_ADD_INCREMENT_NOT_A_MULTIPLE_OF_QUANTITY_PRICE_BREAK_MIN"
    )
    quantity_rule_add_maximum_is_less_than_one = "QUANTITY_RULE_ADD_MAXIMUM_IS_LESS_THAN_ONE"
    quantity_rule_add_maximum_not_a_multiple_of_increment = "QUANTITY_RULE_ADD_MAXIMUM_NOT_A_MULTIPLE_OF_INCREMENT"
    quantity_rule_add_max_lower_than_quantity_price_break_min = (
        "QUANTITY_RULE_ADD_MAX_LOWER_THAN_QUANTITY_PRICE_BREAK_MIN"
    )
    quantity_rule_add_minimum_greater_than_maximum = "QUANTITY_RULE_ADD_MINIMUM_GREATER_THAN_MAXIMUM"
    quantity_rule_add_minimum_is_less_than_one = "QUANTITY_RULE_ADD_MINIMUM_IS_LESS_THAN_ONE"
    quantity_rule_add_minimum_not_a_multiple_of_increment = "QUANTITY_RULE_ADD_MINIMUM_NOT_A_MULTIPLE_OF_INCREMENT"
    quantity_rule_add_min_higher_than_quantity_price_break_min = (
        "QUANTITY_RULE_ADD_MIN_HIGHER_THAN_QUANTITY_PRICE_BREAK_MIN"
    )
    quantity_rule_add_variant_not_found = "QUANTITY_RULE_ADD_VARIANT_NOT_FOUND"
    quantity_rule_delete_rule_not_found = "QUANTITY_RULE_DELETE_RULE_NOT_FOUND"
    quantity_rule_delete_variant_not_found = "QUANTITY_RULE_DELETE_VARIANT_NOT_FOUND"


class QuantityRuleOriginType(Enum):
    fixed = "FIXED"
    relative = "RELATIVE"


class QuantityRuleUserErrorCode(Enum):
    blank = "BLANK"
    catalog_context_does_not_support_quantity_rules = "CATALOG_CONTEXT_DOES_NOT_SUPPORT_QUANTITY_RULES"
    duplicate_input_for_variant = "DUPLICATE_INPUT_FOR_VARIANT"
    generic_error = "GENERIC_ERROR"
    greater_than_or_equal_to = "GREATER_THAN_OR_EQUAL_TO"
    increment_is_greater_than_minimum = "INCREMENT_IS_GREATER_THAN_MINIMUM"
    increment_not_a_multiple_of_quantity_price_break_minimum = (
        "INCREMENT_NOT_A_MULTIPLE_OF_QUANTITY_PRICE_BREAK_MINIMUM"
    )
    maximum_is_lower_than_quantity_price_break_minimum = "MAXIMUM_IS_LOWER_THAN_QUANTITY_PRICE_BREAK_MINIMUM"
    maximum_not_multiple_of_increment = "MAXIMUM_NOT_MULTIPLE_OF_INCREMENT"
    minimum_is_greater_than_maximum = "MINIMUM_IS_GREATER_THAN_MAXIMUM"
    minimum_is_higher_than_quantity_price_break_minimum = "MINIMUM_IS_HIGHER_THAN_QUANTITY_PRICE_BREAK_MINIMUM"
    minimum_not_multiple_of_increment = "MINIMUM_NOT_MULTIPLE_OF_INCREMENT"
    price_list_does_not_exist = "PRICE_LIST_DOES_NOT_EXIST"
    product_variant_does_not_exist = "PRODUCT_VARIANT_DOES_NOT_EXIST"
    variant_quantity_rule_does_not_exist = "VARIANT_QUANTITY_RULE_DOES_NOT_EXIST"


class RefundDutyRefundType(Enum):
    full = "FULL"
    proportional = "PROPORTIONAL"


class RefundLineItemRestockType(Enum):
    cancel = "CANCEL"
    legacy_restock = "LEGACY_RESTOCK"
    no_restock = "NO_RESTOCK"
    return_ = "RETURN"


class ResourceAlertIcon(Enum):
    checkmark_circle = "CHECKMARK_CIRCLE"
    information_circle = "INFORMATION_CIRCLE"


class ResourceAlertSeverity(Enum):
    critical = "CRITICAL"
    default = "DEFAULT"
    error = "ERROR"
    info = "INFO"
    success = "SUCCESS"
    warning = "WARNING"


class ResourceFeedbackState(Enum):
    accepted = "ACCEPTED"
    requires_action = "REQUIRES_ACTION"


class ResourceOperationStatus(Enum):
    active = "ACTIVE"
    complete = "COMPLETE"
    created = "CREATED"


class ReturnDeclineReason(Enum):
    final_sale = "FINAL_SALE"
    other = "OTHER"
    return_period_ended = "RETURN_PERIOD_ENDED"


class ReturnErrorCode(Enum):
    already_exists = "ALREADY_EXISTS"
    blank = "BLANK"
    creation_failed = "CREATION_FAILED"
    equal_to = "EQUAL_TO"
    feature_not_enabled = "FEATURE_NOT_ENABLED"
    greater_than = "GREATER_THAN"
    greater_than_or_equal_to = "GREATER_THAN_OR_EQUAL_TO"
    inclusion = "INCLUSION"
    internal_error = "INTERNAL_ERROR"
    invalid = "INVALID"
    invalid_state = "INVALID_STATE"
    less_than = "LESS_THAN"
    less_than_or_equal_to = "LESS_THAN_OR_EQUAL_TO"
    notification_failed = "NOTIFICATION_FAILED"
    not_a_number = "NOT_A_NUMBER"
    not_editable = "NOT_EDITABLE"
    not_found = "NOT_FOUND"
    present = "PRESENT"
    taken = "TAKEN"
    too_big = "TOO_BIG"
    too_long = "TOO_LONG"
    too_many_arguments = "TOO_MANY_ARGUMENTS"
    too_short = "TOO_SHORT"
    wrong_length = "WRONG_LENGTH"


class ReturnReason(Enum):
    color = "COLOR"
    defective = "DEFECTIVE"
    not_as_described = "NOT_AS_DESCRIBED"
    other = "OTHER"
    size_too_large = "SIZE_TOO_LARGE"
    size_too_small = "SIZE_TOO_SMALL"
    style = "STYLE"
    unknown = "UNKNOWN"
    unwanted = "UNWANTED"
    wrong_item = "WRONG_ITEM"


class ReturnStatus(Enum):
    canceled = "CANCELED"
    closed = "CLOSED"
    declined = "DECLINED"
    open = "OPEN"
    requested = "REQUESTED"


class ReverseFulfillmentOrderDispositionType(Enum):
    missing = "MISSING"
    not_restocked = "NOT_RESTOCKED"
    processing_required = "PROCESSING_REQUIRED"
    restocked = "RESTOCKED"


class ReverseFulfillmentOrderStatus(Enum):
    canceled = "CANCELED"
    closed = "CLOSED"
    open = "OPEN"


class ReverseFulfillmentOrderThirdPartyConfirmationStatus(Enum):
    accepted = "ACCEPTED"
    cancel_accepted = "CANCEL_ACCEPTED"
    cancel_rejected = "CANCEL_REJECTED"
    pending_acceptance = "PENDING_ACCEPTANCE"
    pending_cancelation = "PENDING_CANCELATION"
    rejected = "REJECTED"


class RiskAssessmentResult(Enum):
    high = "HIGH"
    low = "LOW"
    medium = "MEDIUM"
    none = "NONE"
    pending = "PENDING"


class RiskFactSentiment(Enum):
    negative = "NEGATIVE"
    neutral = "NEUTRAL"
    positive = "POSITIVE"


class SaleActionType(Enum):
    order = "ORDER"
    return_ = "RETURN"
    unknown = "UNKNOWN"
    update = "UPDATE"


class SaleLineType(Enum):
    additional_fee = "ADDITIONAL_FEE"
    adjustment = "ADJUSTMENT"
    duty = "DUTY"
    fee = "FEE"
    gift_card = "GIFT_CARD"
    product = "PRODUCT"
    shipping = "SHIPPING"
    tip = "TIP"
    unknown = "UNKNOWN"


class ScheduledChangeSortKeys(Enum):
    expected_at = "EXPECTED_AT"
    id = "ID"
    relevance = "RELEVANCE"


class ScriptTagDisplayScope(Enum):
    all = "ALL"
    online_store = "ONLINE_STORE"
    order_status = "ORDER_STATUS"


class SearchResultType(Enum):
    balance_transaction = "BALANCE_TRANSACTION"
    collection = "COLLECTION"
    customer = "CUSTOMER"
    discount_redeem_code = "DISCOUNT_REDEEM_CODE"
    draft_order = "DRAFT_ORDER"
    file = "FILE"
    online_store_article = "ONLINE_STORE_ARTICLE"
    online_store_blog = "ONLINE_STORE_BLOG"
    online_store_page = "ONLINE_STORE_PAGE"
    order = "ORDER"
    price_rule = "PRICE_RULE"
    product = "PRODUCT"
    url_redirect = "URL_REDIRECT"


class SegmentSortKeys(Enum):
    creation_date = "CREATION_DATE"
    id = "ID"
    last_edit_date = "LAST_EDIT_DATE"
    relevance = "RELEVANCE"


class SellingPlanAnchorType(Enum):
    monthday = "MONTHDAY"
    weekday = "WEEKDAY"
    yearday = "YEARDAY"


class SellingPlanCategory(Enum):
    other = "OTHER"
    pre_order = "PRE_ORDER"
    subscription = "SUBSCRIPTION"
    try_before_you_buy = "TRY_BEFORE_YOU_BUY"


class SellingPlanCheckoutChargeType(Enum):
    percentage = "PERCENTAGE"
    price = "PRICE"


class SellingPlanFixedDeliveryPolicyIntent(Enum):
    fulfillment_begin = "FULFILLMENT_BEGIN"


class SellingPlanFixedDeliveryPolicyPreAnchorBehavior(Enum):
    asap = "ASAP"
    next = "NEXT"


class SellingPlanFulfillmentTrigger(Enum):
    anchor = "ANCHOR"
    asap = "ASAP"
    exact_time = "EXACT_TIME"
    unknown = "UNKNOWN"


class SellingPlanGroupSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    name = "NAME"
    relevance = "RELEVANCE"
    updated_at = "UPDATED_AT"


class SellingPlanGroupUserErrorCode(Enum):
    billing_and_delivery_policy_types_must_be_the_same = "BILLING_AND_DELIVERY_POLICY_TYPES_MUST_BE_THE_SAME"
    billing_policy_interval_too_large = "BILLING_POLICY_INTERVAL_TOO_LARGE"
    blank = "BLANK"
    checkout_charge_value_and_type_must_match = "CHECKOUT_CHARGE_VALUE_AND_TYPE_MUST_MATCH"
    delivery_policy_interval_too_large = "DELIVERY_POLICY_INTERVAL_TOO_LARGE"
    equal_to = "EQUAL_TO"
    error_adding_resource_to_group = "ERROR_ADDING_RESOURCE_TO_GROUP"
    fulfillment_exact_time_not_allowed = "FULFILLMENT_EXACT_TIME_NOT_ALLOWED"
    fulfillment_exact_time_required = "FULFILLMENT_EXACT_TIME_REQUIRED"
    greater_than = "GREATER_THAN"
    greater_than_or_equal_to = "GREATER_THAN_OR_EQUAL_TO"
    group_could_not_be_deleted = "GROUP_COULD_NOT_BE_DELETED"
    group_does_not_exist = "GROUP_DOES_NOT_EXIST"
    inclusion = "INCLUSION"
    invalid = "INVALID"
    invalid_input = "INVALID_INPUT"
    less_than = "LESS_THAN"
    less_than_or_equal_to = "LESS_THAN_OR_EQUAL_TO"
    not_a_number = "NOT_A_NUMBER"
    not_found = "NOT_FOUND"
    only_need_one_billing_policy_type = "ONLY_NEED_ONE_BILLING_POLICY_TYPE"
    only_need_one_checkout_charge_value = "ONLY_NEED_ONE_CHECKOUT_CHARGE_VALUE"
    only_need_one_delivery_policy_type = "ONLY_NEED_ONE_DELIVERY_POLICY_TYPE"
    only_need_one_pricing_policy_type = "ONLY_NEED_ONE_PRICING_POLICY_TYPE"
    only_need_one_pricing_policy_value = "ONLY_NEED_ONE_PRICING_POLICY_VALUE"
    only_one_of_fixed_or_recurring_billing = "ONLY_ONE_OF_FIXED_OR_RECURRING_BILLING"
    only_one_of_fixed_or_recurring_delivery = "ONLY_ONE_OF_FIXED_OR_RECURRING_DELIVERY"
    plan_does_not_exist = "PLAN_DOES_NOT_EXIST"
    plan_id_must_be_specified_to_update = "PLAN_ID_MUST_BE_SPECIFIED_TO_UPDATE"
    present = "PRESENT"
    pricing_policy_adjustment_value_and_type_must_match = "PRICING_POLICY_ADJUSTMENT_VALUE_AND_TYPE_MUST_MATCH"
    product_does_not_exist = "PRODUCT_DOES_NOT_EXIST"
    product_variant_does_not_exist = "PRODUCT_VARIANT_DOES_NOT_EXIST"
    remaining_balance_charge_exact_time_not_allowed = "REMAINING_BALANCE_CHARGE_EXACT_TIME_NOT_ALLOWED"
    remaining_balance_charge_exact_time_required = "REMAINING_BALANCE_CHARGE_EXACT_TIME_REQUIRED"
    remaining_balance_charge_time_after_checkout_must_be_greater_than_zero = (
        "REMAINING_BALANCE_CHARGE_TIME_AFTER_CHECKOUT_MUST_BE_GREATER_THAN_ZERO"
    )
    remaining_balance_charge_trigger_no_remaining_balance_on_partial_percentage_checkout_charge = (
        "REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PARTIAL_PERCENTAGE_CHECKOUT_CHARGE"
    )
    remaining_balance_charge_trigger_no_remaining_balance_on_price_checkout_charge = (
        "REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PRICE_CHECKOUT_CHARGE"
    )
    remaining_balance_charge_trigger_on_full_checkout = "REMAINING_BALANCE_CHARGE_TRIGGER_ON_FULL_CHECKOUT"
    resource_list_contains_invalid_ids = "RESOURCE_LIST_CONTAINS_INVALID_IDS"
    selling_plan_anchors_not_allowed = "SELLING_PLAN_ANCHORS_NOT_ALLOWED"
    selling_plan_anchors_required = "SELLING_PLAN_ANCHORS_REQUIRED"
    selling_plan_billing_and_delivery_policy_anchors_must_be_equal = (
        "SELLING_PLAN_BILLING_AND_DELIVERY_POLICY_ANCHORS_MUST_BE_EQUAL"
    )
    selling_plan_billing_cycle_must_be_a_multiple_of_delivery_cycle = (
        "SELLING_PLAN_BILLING_CYCLE_MUST_BE_A_MULTIPLE_OF_DELIVERY_CYCLE"
    )
    selling_plan_billing_policy_missing = "SELLING_PLAN_BILLING_POLICY_MISSING"
    selling_plan_count_lower_bound = "SELLING_PLAN_COUNT_LOWER_BOUND"
    selling_plan_count_upper_bound = "SELLING_PLAN_COUNT_UPPER_BOUND"
    selling_plan_delivery_policy_missing = "SELLING_PLAN_DELIVERY_POLICY_MISSING"
    selling_plan_duplicate_name = "SELLING_PLAN_DUPLICATE_NAME"
    selling_plan_duplicate_options = "SELLING_PLAN_DUPLICATE_OPTIONS"
    selling_plan_fixed_pricing_policies_limit = "SELLING_PLAN_FIXED_PRICING_POLICIES_LIMIT"
    selling_plan_max_cycles_must_be_greater_than_min_cycles = "SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES"
    selling_plan_missing_option2_label_on_parent_group = "SELLING_PLAN_MISSING_OPTION2_LABEL_ON_PARENT_GROUP"
    selling_plan_missing_option3_label_on_parent_group = "SELLING_PLAN_MISSING_OPTION3_LABEL_ON_PARENT_GROUP"
    selling_plan_option2_required_as_defined_on_parent_group = (
        "SELLING_PLAN_OPTION2_REQUIRED_AS_DEFINED_ON_PARENT_GROUP"
    )
    selling_plan_option3_required_as_defined_on_parent_group = (
        "SELLING_PLAN_OPTION3_REQUIRED_AS_DEFINED_ON_PARENT_GROUP"
    )
    selling_plan_pricing_policies_limit = "SELLING_PLAN_PRICING_POLICIES_LIMIT"
    selling_plan_pricing_policies_must_contain_a_fixed_pricing_policy = (
        "SELLING_PLAN_PRICING_POLICIES_MUST_CONTAIN_A_FIXED_PRICING_POLICY"
    )
    taken = "TAKEN"
    too_big = "TOO_BIG"
    too_long = "TOO_LONG"
    too_short = "TOO_SHORT"
    wrong_length = "WRONG_LENGTH"


class SellingPlanInterval(Enum):
    day = "DAY"
    month = "MONTH"
    week = "WEEK"
    year = "YEAR"


class SellingPlanPricingPolicyAdjustmentType(Enum):
    fixed_amount = "FIXED_AMOUNT"
    percentage = "PERCENTAGE"
    price = "PRICE"


class SellingPlanRecurringDeliveryPolicyIntent(Enum):
    fulfillment_begin = "FULFILLMENT_BEGIN"


class SellingPlanRecurringDeliveryPolicyPreAnchorBehavior(Enum):
    asap = "ASAP"
    next = "NEXT"


class SellingPlanRemainingBalanceChargeTrigger(Enum):
    exact_time = "EXACT_TIME"
    no_remaining_balance = "NO_REMAINING_BALANCE"
    time_after_checkout = "TIME_AFTER_CHECKOUT"


class SellingPlanReserve(Enum):
    on_fulfillment = "ON_FULFILLMENT"
    on_sale = "ON_SALE"


class ServerPixelStatus(Enum):
    connected = "CONNECTED"
    disconnected_configured = "DISCONNECTED_CONFIGURED"
    disconnected_unconfigured = "DISCONNECTED_UNCONFIGURED"


class ShippingDiscountClass(Enum):
    shipping = "SHIPPING"


class ShippingPackageType(Enum):
    box = "BOX"
    envelope = "ENVELOPE"
    flat_rate = "FLAT_RATE"
    soft_pack = "SOFT_PACK"


class ShopBranding(Enum):
    rogers = "ROGERS"
    shopify = "SHOPIFY"
    shopify_gold = "SHOPIFY_GOLD"
    shopify_plus = "SHOPIFY_PLUS"


class ShopCustomerAccountsSetting(Enum):
    disabled = "DISABLED"
    optional = "OPTIONAL"
    required = "REQUIRED"


class ShopPolicyErrorCode(Enum):
    too_big = "TOO_BIG"


class ShopPolicyType(Enum):
    contact_information = "CONTACT_INFORMATION"
    legal_notice = "LEGAL_NOTICE"
    privacy_policy = "PRIVACY_POLICY"
    refund_policy = "REFUND_POLICY"
    shipping_policy = "SHIPPING_POLICY"
    subscription_policy = "SUBSCRIPTION_POLICY"
    terms_of_sale = "TERMS_OF_SALE"
    terms_of_service = "TERMS_OF_SERVICE"


class ShopResourceFeedbackCreateUserErrorCode(Enum):
    blank = "BLANK"
    invalid = "INVALID"
    outdated_feedback = "OUTDATED_FEEDBACK"
    present = "PRESENT"


class ShopTagSort(Enum):
    alphabetical = "ALPHABETICAL"
    popular = "POPULAR"


class ShopifyPaymentsBalanceTransactionPayoutStatus(Enum):
    action_required = "ACTION_REQUIRED"
    canceled = "CANCELED"
    failed = "FAILED"
    in_transit = "IN_TRANSIT"
    paid = "PAID"
    pending = "PENDING"
    scheduled = "SCHEDULED"


class ShopifyPaymentsBankAccountStatus(Enum):
    errored = "ERRORED"
    new = "NEW"
    validated = "VALIDATED"
    verified = "VERIFIED"


class ShopifyPaymentsDisputeEvidenceFileType(Enum):
    cancellation_policy_file = "CANCELLATION_POLICY_FILE"
    customer_communication_file = "CUSTOMER_COMMUNICATION_FILE"
    refund_policy_file = "REFUND_POLICY_FILE"
    service_documentation_file = "SERVICE_DOCUMENTATION_FILE"
    shipping_documentation_file = "SHIPPING_DOCUMENTATION_FILE"
    uncategorized_file = "UNCATEGORIZED_FILE"


class ShopifyPaymentsDisputeReason(Enum):
    bank_cannot_process = "BANK_CANNOT_PROCESS"
    credit_not_processed = "CREDIT_NOT_PROCESSED"
    customer_initiated = "CUSTOMER_INITIATED"
    debit_not_authorized = "DEBIT_NOT_AUTHORIZED"
    duplicate = "DUPLICATE"
    fraudulent = "FRAUDULENT"
    general = "GENERAL"
    incorrect_account_details = "INCORRECT_ACCOUNT_DETAILS"
    insufficient_funds = "INSUFFICIENT_FUNDS"
    product_not_received = "PRODUCT_NOT_RECEIVED"
    product_unacceptable = "PRODUCT_UNACCEPTABLE"
    subscription_cancelled = "SUBSCRIPTION_CANCELLED"
    unrecognized = "UNRECOGNIZED"


class ShopifyPaymentsPayoutInterval(Enum):
    daily = "DAILY"
    manual = "MANUAL"
    monthly = "MONTHLY"
    weekly = "WEEKLY"


class ShopifyPaymentsPayoutStatus(Enum):
    canceled = "CANCELED"
    failed = "FAILED"
    in_transit = "IN_TRANSIT"
    paid = "PAID"
    scheduled = "SCHEDULED"


class ShopifyPaymentsPayoutTransactionType(Enum):
    deposit = "DEPOSIT"
    withdrawal = "WITHDRAWAL"


class ShopifyPaymentsSourceType(Enum):
    adjustment = "ADJUSTMENT"
    adjustment_reversal = "ADJUSTMENT_REVERSAL"
    charge = "CHARGE"
    dispute = "DISPUTE"
    refund = "REFUND"
    system_adjustment = "SYSTEM_ADJUSTMENT"
    transfer = "TRANSFER"


class ShopifyPaymentsTransactionType(Enum):
    adjustment = "ADJUSTMENT"
    anomaly_credit = "ANOMALY_CREDIT"
    anomaly_credit_reversal = "ANOMALY_CREDIT_REVERSAL"
    anomaly_debit = "ANOMALY_DEBIT"
    anomaly_debit_reversal = "ANOMALY_DEBIT_REVERSAL"
    application_fee_refund = "APPLICATION_FEE_REFUND"
    balance_transfer_inbound = "BALANCE_TRANSFER_INBOUND"
    billing_debit = "BILLING_DEBIT"
    billing_debit_reversal = "BILLING_DEBIT_REVERSAL"
    channel_credit = "CHANNEL_CREDIT"
    channel_credit_reversal = "CHANNEL_CREDIT_REVERSAL"
    channel_promotion_credit = "CHANNEL_PROMOTION_CREDIT"
    channel_promotion_credit_reversal = "CHANNEL_PROMOTION_CREDIT_REVERSAL"
    channel_transfer_credit = "CHANNEL_TRANSFER_CREDIT"
    channel_transfer_credit_reversal = "CHANNEL_TRANSFER_CREDIT_REVERSAL"
    channel_transfer_debit = "CHANNEL_TRANSFER_DEBIT"
    channel_transfer_debit_reversal = "CHANNEL_TRANSFER_DEBIT_REVERSAL"
    charge = "CHARGE"
    chargeback_fee = "CHARGEBACK_FEE"
    chargeback_fee_refund = "CHARGEBACK_FEE_REFUND"
    chargeback_hold = "CHARGEBACK_HOLD"
    chargeback_hold_release = "CHARGEBACK_HOLD_RELEASE"
    chargeback_protection_credit = "CHARGEBACK_PROTECTION_CREDIT"
    chargeback_protection_credit_reversal = "CHARGEBACK_PROTECTION_CREDIT_REVERSAL"
    chargeback_protection_debit = "CHARGEBACK_PROTECTION_DEBIT"
    chargeback_protection_debit_reversal = "CHARGEBACK_PROTECTION_DEBIT_REVERSAL"
    charge_adjustment = "CHARGE_ADJUSTMENT"
    collections_credit = "COLLECTIONS_CREDIT"
    collections_credit_reversal = "COLLECTIONS_CREDIT_REVERSAL"
    customs_duty = "CUSTOMS_DUTY"
    customs_duty_adjustment = "CUSTOMS_DUTY_ADJUSTMENT"
    dispute_reversal = "DISPUTE_REVERSAL"
    dispute_withdrawal = "DISPUTE_WITHDRAWAL"
    import_tax = "IMPORT_TAX"
    import_tax_adjustment = "IMPORT_TAX_ADJUSTMENT"
    marketplace_fee_credit = "MARKETPLACE_FEE_CREDIT"
    marketplace_fee_credit_reversal = "MARKETPLACE_FEE_CREDIT_REVERSAL"
    markets_pro_credit = "MARKETS_PRO_CREDIT"
    merchant_goodwill_credit = "MERCHANT_GOODWILL_CREDIT"
    merchant_goodwill_credit_reversal = "MERCHANT_GOODWILL_CREDIT_REVERSAL"
    merchant_to_merchant_credit = "MERCHANT_TO_MERCHANT_CREDIT"
    merchant_to_merchant_credit_reversal = "MERCHANT_TO_MERCHANT_CREDIT_REVERSAL"
    merchant_to_merchant_debit = "MERCHANT_TO_MERCHANT_DEBIT"
    merchant_to_merchant_debit_reversal = "MERCHANT_TO_MERCHANT_DEBIT_REVERSAL"
    promotion_credit = "PROMOTION_CREDIT"
    promotion_credit_reversal = "PROMOTION_CREDIT_REVERSAL"
    refund = "REFUND"
    refund_adjustment = "REFUND_ADJUSTMENT"
    refund_failure = "REFUND_FAILURE"
    reserved_funds = "RESERVED_FUNDS"
    reserved_funds_reversal = "RESERVED_FUNDS_REVERSAL"
    reserved_funds_withdrawal = "RESERVED_FUNDS_WITHDRAWAL"
    risk_reversal = "RISK_REVERSAL"
    risk_withdrawal = "RISK_WITHDRAWAL"
    seller_protection_credit = "SELLER_PROTECTION_CREDIT"
    seller_protection_credit_reversal = "SELLER_PROTECTION_CREDIT_REVERSAL"
    shipping_label = "SHIPPING_LABEL"
    shipping_label_adjustment = "SHIPPING_LABEL_ADJUSTMENT"
    shipping_label_adjustment_base = "SHIPPING_LABEL_ADJUSTMENT_BASE"
    shipping_label_adjustment_surcharge = "SHIPPING_LABEL_ADJUSTMENT_SURCHARGE"
    shipping_other_carrier_charge_adjustment = "SHIPPING_OTHER_CARRIER_CHARGE_ADJUSTMENT"
    shipping_return_to_origin_adjustment = "SHIPPING_RETURN_TO_ORIGIN_ADJUSTMENT"
    shopify_collective_credit = "SHOPIFY_COLLECTIVE_CREDIT"
    shopify_collective_credit_reversal = "SHOPIFY_COLLECTIVE_CREDIT_REVERSAL"
    shopify_collective_debit = "SHOPIFY_COLLECTIVE_DEBIT"
    shopify_collective_debit_reversal = "SHOPIFY_COLLECTIVE_DEBIT_REVERSAL"
    shopify_source_credit = "SHOPIFY_SOURCE_CREDIT"
    shopify_source_credit_reversal = "SHOPIFY_SOURCE_CREDIT_REVERSAL"
    shopify_source_debit = "SHOPIFY_SOURCE_DEBIT"
    shopify_source_debit_reversal = "SHOPIFY_SOURCE_DEBIT_REVERSAL"
    shop_cash_billing_debit = "SHOP_CASH_BILLING_DEBIT"
    shop_cash_billing_debit_reversal = "SHOP_CASH_BILLING_DEBIT_REVERSAL"
    shop_cash_campaign_billing_credit = "SHOP_CASH_CAMPAIGN_BILLING_CREDIT"
    shop_cash_campaign_billing_credit_reversal = "SHOP_CASH_CAMPAIGN_BILLING_CREDIT_REVERSAL"
    shop_cash_campaign_billing_debit = "SHOP_CASH_CAMPAIGN_BILLING_DEBIT"
    shop_cash_campaign_billing_debit_reversal = "SHOP_CASH_CAMPAIGN_BILLING_DEBIT_REVERSAL"
    shop_cash_credit = "SHOP_CASH_CREDIT"
    shop_cash_credit_reversal = "SHOP_CASH_CREDIT_REVERSAL"
    shop_cash_refund_debit = "SHOP_CASH_REFUND_DEBIT"
    shop_cash_refund_debit_reversal = "SHOP_CASH_REFUND_DEBIT_REVERSAL"
    stripe_fee = "STRIPE_FEE"
    tax_adjustment_credit = "TAX_ADJUSTMENT_CREDIT"
    tax_adjustment_credit_reversal = "TAX_ADJUSTMENT_CREDIT_REVERSAL"
    tax_adjustment_debit = "TAX_ADJUSTMENT_DEBIT"
    tax_adjustment_debit_reversal = "TAX_ADJUSTMENT_DEBIT_REVERSAL"
    transfer = "TRANSFER"
    transfer_cancel = "TRANSFER_CANCEL"
    transfer_failure = "TRANSFER_FAILURE"
    transfer_refund = "TRANSFER_REFUND"
    vat_refund_credit = "VAT_REFUND_CREDIT"
    vat_refund_credit_reversal = "VAT_REFUND_CREDIT_REVERSAL"


class ShopifyPaymentsVerificationDocumentType(Enum):
    drivers_license = "DRIVERS_LICENSE"
    government_identification = "GOVERNMENT_IDENTIFICATION"
    passport = "PASSPORT"


class ShopifyPaymentsVerificationStatus(Enum):
    pending = "PENDING"
    unverified = "UNVERIFIED"
    verified = "VERIFIED"


class ShopifyProtectEligibilityStatus(Enum):
    eligible = "ELIGIBLE"
    not_eligible = "NOT_ELIGIBLE"
    pending = "PENDING"


class ShopifyProtectStatus(Enum):
    active = "ACTIVE"
    inactive = "INACTIVE"
    not_protected = "NOT_PROTECTED"
    pending = "PENDING"
    protected = "PROTECTED"


class StaffMemberDefaultImage(Enum):
    default = "DEFAULT"
    not_found = "NOT_FOUND"
    transparent = "TRANSPARENT"


class StaffMemberPermission(Enum):
    applications = "APPLICATIONS"
    channels = "CHANNELS"
    create_and_edit_customers = "CREATE_AND_EDIT_CUSTOMERS"
    customers = "CUSTOMERS"
    dashboard = "DASHBOARD"
    delete_customers = "DELETE_CUSTOMERS"
    domains = "DOMAINS"
    draft_orders = "DRAFT_ORDERS"
    edit_orders = "EDIT_ORDERS"
    erase_customer_data = "ERASE_CUSTOMER_DATA"
    export_customers = "EXPORT_CUSTOMERS"
    full = "FULL"
    gift_cards = "GIFT_CARDS"
    links = "LINKS"
    locations = "LOCATIONS"
    marketing = "MARKETING"
    marketing_section = "MARKETING_SECTION"
    merge_customers = "MERGE_CUSTOMERS"
    orders = "ORDERS"
    overviews = "OVERVIEWS"
    pages = "PAGES"
    pay_orders_by_vaulted_card = "PAY_ORDERS_BY_VAULTED_CARD"
    preferences = "PREFERENCES"
    products = "PRODUCTS"
    reports = "REPORTS"
    request_customer_data = "REQUEST_CUSTOMER_DATA"
    themes = "THEMES"
    translations = "TRANSLATIONS"


class StagedUploadHttpMethodType(Enum):
    post = "POST"
    put = "PUT"


class StagedUploadTargetGenerateUploadResource(Enum):
    bulk_mutation_variables = "BULK_MUTATION_VARIABLES"
    collection_image = "COLLECTION_IMAGE"
    file = "FILE"
    image = "IMAGE"
    model_3_d = "MODEL_3D"
    product_image = "PRODUCT_IMAGE"
    return_label = "RETURN_LABEL"
    shop_image = "SHOP_IMAGE"
    url_redirect_import = "URL_REDIRECT_IMPORT"
    video = "VIDEO"


class StandardMetafieldDefinitionEnableUserErrorCode(Enum):
    invalid = "INVALID"
    limit_exceeded = "LIMIT_EXCEEDED"
    taken = "TAKEN"
    template_not_found = "TEMPLATE_NOT_FOUND"
    type_not_allowed_for_conditions = "TYPE_NOT_ALLOWED_FOR_CONDITIONS"
    unstructured_already_exists = "UNSTRUCTURED_ALREADY_EXISTS"


class StoreCreditAccountCreditUserErrorCode(Enum):
    account_not_found = "ACCOUNT_NOT_FOUND"
    credit_limit_exceeded = "CREDIT_LIMIT_EXCEEDED"
    expires_at_in_past = "EXPIRES_AT_IN_PAST"
    mismatching_currency = "MISMATCHING_CURRENCY"
    negative_or_zero_amount = "NEGATIVE_OR_ZERO_AMOUNT"
    owner_not_found = "OWNER_NOT_FOUND"


class StoreCreditAccountDebitUserErrorCode(Enum):
    account_not_found = "ACCOUNT_NOT_FOUND"
    insufficient_funds = "INSUFFICIENT_FUNDS"
    mismatching_currency = "MISMATCHING_CURRENCY"
    negative_or_zero_amount = "NEGATIVE_OR_ZERO_AMOUNT"


class SubscriptionBillingAttemptErrorCode(Enum):
    amount_too_small = "AMOUNT_TOO_SMALL"
    authentication_error = "AUTHENTICATION_ERROR"
    buyer_canceled_payment_method = "BUYER_CANCELED_PAYMENT_METHOD"
    card_number_incorrect = "CARD_NUMBER_INCORRECT"
    customer_invalid = "CUSTOMER_INVALID"
    customer_not_found = "CUSTOMER_NOT_FOUND"
    expired_payment_method = "EXPIRED_PAYMENT_METHOD"
    fraud_suspected = "FRAUD_SUSPECTED"
    insufficient_funds = "INSUFFICIENT_FUNDS"
    insufficient_inventory = "INSUFFICIENT_INVENTORY"
    invalid_customer_billing_agreement = "INVALID_CUSTOMER_BILLING_AGREEMENT"
    invalid_payment_method = "INVALID_PAYMENT_METHOD"
    invalid_shipping_address = "INVALID_SHIPPING_ADDRESS"
    inventory_allocations_not_found = "INVENTORY_ALLOCATIONS_NOT_FOUND"
    invoice_already_paid = "INVOICE_ALREADY_PAID"
    payment_method_declined = "PAYMENT_METHOD_DECLINED"
    payment_method_incompatible_with_gateway_config = "PAYMENT_METHOD_INCOMPATIBLE_WITH_GATEWAY_CONFIG"
    payment_method_not_found = "PAYMENT_METHOD_NOT_FOUND"
    payment_provider_is_not_enabled = "PAYMENT_PROVIDER_IS_NOT_ENABLED"
    paypal_error_general = "PAYPAL_ERROR_GENERAL"
    purchase_type_not_supported = "PURCHASE_TYPE_NOT_SUPPORTED"
    test_mode = "TEST_MODE"
    transient_error = "TRANSIENT_ERROR"
    unexpected_error = "UNEXPECTED_ERROR"


class SubscriptionBillingAttemptsSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    relevance = "RELEVANCE"


class SubscriptionBillingCycleBillingAttemptStatus(Enum):
    any = "ANY"
    has_attempt = "HAS_ATTEMPT"
    no_attempt = "NO_ATTEMPT"


class SubscriptionBillingCycleBillingCycleStatus(Enum):
    billed = "BILLED"
    unbilled = "UNBILLED"


class SubscriptionBillingCycleBulkUserErrorCode(Enum):
    blank = "BLANK"
    end_date_in_the_future = "END_DATE_IN_THE_FUTURE"
    invalid = "INVALID"
    invalid_date_range = "INVALID_DATE_RANGE"
    start_date_before_end_date = "START_DATE_BEFORE_END_DATE"


class SubscriptionBillingCycleErrorCode(Enum):
    billing_date_set_on_skipped = "BILLING_DATE_SET_ON_SKIPPED"
    cycle_index_out_of_range = "CYCLE_INDEX_OUT_OF_RANGE"
    cycle_not_found = "CYCLE_NOT_FOUND"
    cycle_start_date_out_of_range = "CYCLE_START_DATE_OUT_OF_RANGE"
    empty_billing_cycle_edit_schedule_input = "EMPTY_BILLING_CYCLE_EDIT_SCHEDULE_INPUT"
    incomplete_billing_attempts = "INCOMPLETE_BILLING_ATTEMPTS"
    invalid = "INVALID"
    invalid_cycle_index = "INVALID_CYCLE_INDEX"
    invalid_date = "INVALID_DATE"
    no_cycle_edits = "NO_CYCLE_EDITS"
    out_of_bounds = "OUT_OF_BOUNDS"
    upcoming_cycle_limit_exceeded = "UPCOMING_CYCLE_LIMIT_EXCEEDED"


class SubscriptionBillingCycleScheduleEditInputScheduleEditReason(Enum):
    buyer_initiated = "BUYER_INITIATED"
    dev_initiated = "DEV_INITIATED"
    merchant_initiated = "MERCHANT_INITIATED"


class SubscriptionBillingCycleSkipUserErrorCode(Enum):
    invalid = "INVALID"


class SubscriptionBillingCycleUnskipUserErrorCode(Enum):
    invalid = "INVALID"


class SubscriptionBillingCyclesSortKeys(Enum):
    cycle_index = "CYCLE_INDEX"
    id = "ID"
    relevance = "RELEVANCE"


class SubscriptionBillingCyclesTargetSelection(Enum):
    all = "ALL"


class SubscriptionContractErrorCode(Enum):
    invalid = "INVALID"


class SubscriptionContractLastPaymentStatus(Enum):
    failed = "FAILED"
    succeeded = "SUCCEEDED"


class SubscriptionContractStatusUpdateErrorCode(Enum):
    contract_terminated = "CONTRACT_TERMINATED"
    invalid = "INVALID"


class SubscriptionContractSubscriptionStatus(Enum):
    active = "ACTIVE"
    cancelled = "CANCELLED"
    expired = "EXPIRED"
    failed = "FAILED"
    paused = "PAUSED"


class SubscriptionDiscountRejectionReason(Enum):
    currently_inactive = "CURRENTLY_INACTIVE"
    customer_not_eligible = "CUSTOMER_NOT_ELIGIBLE"
    customer_usage_limit_reached = "CUSTOMER_USAGE_LIMIT_REACHED"
    incompatible_purchase_type = "INCOMPATIBLE_PURCHASE_TYPE"
    internal_error = "INTERNAL_ERROR"
    not_found = "NOT_FOUND"
    no_entitled_line_items = "NO_ENTITLED_LINE_ITEMS"
    no_entitled_shipping_lines = "NO_ENTITLED_SHIPPING_LINES"
    purchase_not_in_range = "PURCHASE_NOT_IN_RANGE"
    quantity_not_in_range = "QUANTITY_NOT_IN_RANGE"
    usage_limit_reached = "USAGE_LIMIT_REACHED"


class SubscriptionDraftErrorCode(Enum):
    already_removed = "ALREADY_REMOVED"
    billing_cycle_absent = "BILLING_CYCLE_ABSENT"
    billing_cycle_contract_draft_billing_policy_invalid = "BILLING_CYCLE_CONTRACT_DRAFT_BILLING_POLICY_INVALID"
    billing_cycle_contract_draft_delivery_policy_invalid = "BILLING_CYCLE_CONTRACT_DRAFT_DELIVERY_POLICY_INVALID"
    billing_cycle_present = "BILLING_CYCLE_PRESENT"
    blank = "BLANK"
    committed = "COMMITTED"
    concatenation_billing_cycle_contract_draft_required = "CONCATENATION_BILLING_CYCLE_CONTRACT_DRAFT_REQUIRED"
    currency_not_enabled = "CURRENCY_NOT_ENABLED"
    customer_does_not_exist = "CUSTOMER_DOES_NOT_EXIST"
    customer_mismatch = "CUSTOMER_MISMATCH"
    customer_redacted = "CUSTOMER_REDACTED"
    cycle_discounts_unique_after_cycle = "CYCLE_DISCOUNTS_UNIQUE_AFTER_CYCLE"
    cycle_index_out_of_range = "CYCLE_INDEX_OUT_OF_RANGE"
    cycle_selector_validate_one_of = "CYCLE_SELECTOR_VALIDATE_ONE_OF"
    cycle_start_date_out_of_range = "CYCLE_START_DATE_OUT_OF_RANGE"
    delivery_method_required = "DELIVERY_METHOD_REQUIRED"
    delivery_must_be_multiple_of_billing = "DELIVERY_MUST_BE_MULTIPLE_OF_BILLING"
    duplicate_concatenated_contracts = "DUPLICATE_CONCATENATED_CONTRACTS"
    exceeded_max_concatenated_contracts = "EXCEEDED_MAX_CONCATENATED_CONTRACTS"
    greater_than = "GREATER_THAN"
    greater_than_or_equal_to = "GREATER_THAN_OR_EQUAL_TO"
    has_future_edits = "HAS_FUTURE_EDITS"
    invalid = "INVALID"
    invalid_adjustment_type = "INVALID_ADJUSTMENT_TYPE"
    invalid_adjustment_value = "INVALID_ADJUSTMENT_VALUE"
    invalid_billing_date = "INVALID_BILLING_DATE"
    invalid_lines = "INVALID_LINES"
    invalid_note_length = "INVALID_NOTE_LENGTH"
    less_than = "LESS_THAN"
    less_than_or_equal_to = "LESS_THAN_OR_EQUAL_TO"
    missing_customer_payment_method = "MISSING_CUSTOMER_PAYMENT_METHOD"
    missing_local_delivery_options = "MISSING_LOCAL_DELIVERY_OPTIONS"
    not_an_integer = "NOT_AN_INTEGER"
    not_in_range = "NOT_IN_RANGE"
    no_entitled_lines = "NO_ENTITLED_LINES"
    presence = "PRESENCE"
    selling_plan_max_cycles_must_be_greater_than_min_cycles = "SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES"
    stale_contract = "STALE_CONTRACT"
    too_long = "TOO_LONG"
    too_short = "TOO_SHORT"
    upcoming_cycle_limit_exceeded = "UPCOMING_CYCLE_LIMIT_EXCEEDED"


class SuggestedOrderTransactionKind(Enum):
    suggested_refund = "SUGGESTED_REFUND"


class TaxAppConfigureUserErrorCode(Enum):
    tax_partner_already_active = "TAX_PARTNER_ALREADY_ACTIVE"
    tax_partner_not_found = "TAX_PARTNER_NOT_FOUND"
    tax_partner_state_update_failed = "TAX_PARTNER_STATE_UPDATE_FAILED"


class TaxExemption(Enum):
    ca_bc_commercial_fishery_exemption = "CA_BC_COMMERCIAL_FISHERY_EXEMPTION"
    ca_bc_contractor_exemption = "CA_BC_CONTRACTOR_EXEMPTION"
    ca_bc_production_and_machinery_exemption = "CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION"
    ca_bc_reseller_exemption = "CA_BC_RESELLER_EXEMPTION"
    ca_bc_sub_contractor_exemption = "CA_BC_SUB_CONTRACTOR_EXEMPTION"
    ca_diplomat_exemption = "CA_DIPLOMAT_EXEMPTION"
    ca_mb_commercial_fishery_exemption = "CA_MB_COMMERCIAL_FISHERY_EXEMPTION"
    ca_mb_farmer_exemption = "CA_MB_FARMER_EXEMPTION"
    ca_mb_reseller_exemption = "CA_MB_RESELLER_EXEMPTION"
    ca_ns_commercial_fishery_exemption = "CA_NS_COMMERCIAL_FISHERY_EXEMPTION"
    ca_ns_farmer_exemption = "CA_NS_FARMER_EXEMPTION"
    ca_on_purchase_exemption = "CA_ON_PURCHASE_EXEMPTION"
    ca_pe_commercial_fishery_exemption = "CA_PE_COMMERCIAL_FISHERY_EXEMPTION"
    ca_sk_commercial_fishery_exemption = "CA_SK_COMMERCIAL_FISHERY_EXEMPTION"
    ca_sk_contractor_exemption = "CA_SK_CONTRACTOR_EXEMPTION"
    ca_sk_farmer_exemption = "CA_SK_FARMER_EXEMPTION"
    ca_sk_production_and_machinery_exemption = "CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION"
    ca_sk_reseller_exemption = "CA_SK_RESELLER_EXEMPTION"
    ca_sk_sub_contractor_exemption = "CA_SK_SUB_CONTRACTOR_EXEMPTION"
    ca_status_card_exemption = "CA_STATUS_CARD_EXEMPTION"
    eu_reverse_charge_exemption_rule = "EU_REVERSE_CHARGE_EXEMPTION_RULE"
    us_ak_reseller_exemption = "US_AK_RESELLER_EXEMPTION"
    us_al_reseller_exemption = "US_AL_RESELLER_EXEMPTION"
    us_ar_reseller_exemption = "US_AR_RESELLER_EXEMPTION"
    us_az_reseller_exemption = "US_AZ_RESELLER_EXEMPTION"
    us_ca_reseller_exemption = "US_CA_RESELLER_EXEMPTION"
    us_co_reseller_exemption = "US_CO_RESELLER_EXEMPTION"
    us_ct_reseller_exemption = "US_CT_RESELLER_EXEMPTION"
    us_dc_reseller_exemption = "US_DC_RESELLER_EXEMPTION"
    us_de_reseller_exemption = "US_DE_RESELLER_EXEMPTION"
    us_fl_reseller_exemption = "US_FL_RESELLER_EXEMPTION"
    us_ga_reseller_exemption = "US_GA_RESELLER_EXEMPTION"
    us_hi_reseller_exemption = "US_HI_RESELLER_EXEMPTION"
    us_ia_reseller_exemption = "US_IA_RESELLER_EXEMPTION"
    us_id_reseller_exemption = "US_ID_RESELLER_EXEMPTION"
    us_il_reseller_exemption = "US_IL_RESELLER_EXEMPTION"
    us_in_reseller_exemption = "US_IN_RESELLER_EXEMPTION"
    us_ks_reseller_exemption = "US_KS_RESELLER_EXEMPTION"
    us_ky_reseller_exemption = "US_KY_RESELLER_EXEMPTION"
    us_la_reseller_exemption = "US_LA_RESELLER_EXEMPTION"
    us_ma_reseller_exemption = "US_MA_RESELLER_EXEMPTION"
    us_md_reseller_exemption = "US_MD_RESELLER_EXEMPTION"
    us_me_reseller_exemption = "US_ME_RESELLER_EXEMPTION"
    us_mi_reseller_exemption = "US_MI_RESELLER_EXEMPTION"
    us_mn_reseller_exemption = "US_MN_RESELLER_EXEMPTION"
    us_mo_reseller_exemption = "US_MO_RESELLER_EXEMPTION"
    us_ms_reseller_exemption = "US_MS_RESELLER_EXEMPTION"
    us_mt_reseller_exemption = "US_MT_RESELLER_EXEMPTION"
    us_nc_reseller_exemption = "US_NC_RESELLER_EXEMPTION"
    us_nd_reseller_exemption = "US_ND_RESELLER_EXEMPTION"
    us_ne_reseller_exemption = "US_NE_RESELLER_EXEMPTION"
    us_nh_reseller_exemption = "US_NH_RESELLER_EXEMPTION"
    us_nj_reseller_exemption = "US_NJ_RESELLER_EXEMPTION"
    us_nm_reseller_exemption = "US_NM_RESELLER_EXEMPTION"
    us_nv_reseller_exemption = "US_NV_RESELLER_EXEMPTION"
    us_ny_reseller_exemption = "US_NY_RESELLER_EXEMPTION"
    us_oh_reseller_exemption = "US_OH_RESELLER_EXEMPTION"
    us_ok_reseller_exemption = "US_OK_RESELLER_EXEMPTION"
    us_or_reseller_exemption = "US_OR_RESELLER_EXEMPTION"
    us_pa_reseller_exemption = "US_PA_RESELLER_EXEMPTION"
    us_ri_reseller_exemption = "US_RI_RESELLER_EXEMPTION"
    us_sc_reseller_exemption = "US_SC_RESELLER_EXEMPTION"
    us_sd_reseller_exemption = "US_SD_RESELLER_EXEMPTION"
    us_tn_reseller_exemption = "US_TN_RESELLER_EXEMPTION"
    us_tx_reseller_exemption = "US_TX_RESELLER_EXEMPTION"
    us_ut_reseller_exemption = "US_UT_RESELLER_EXEMPTION"
    us_va_reseller_exemption = "US_VA_RESELLER_EXEMPTION"
    us_vt_reseller_exemption = "US_VT_RESELLER_EXEMPTION"
    us_wa_reseller_exemption = "US_WA_RESELLER_EXEMPTION"
    us_wi_reseller_exemption = "US_WI_RESELLER_EXEMPTION"
    us_wv_reseller_exemption = "US_WV_RESELLER_EXEMPTION"
    us_wy_reseller_exemption = "US_WY_RESELLER_EXEMPTION"


class TaxPartnerState(Enum):
    active = "ACTIVE"
    pending = "PENDING"
    ready = "READY"


class TransactionSortKeys(Enum):
    created_at = "CREATED_AT"
    expires_at = "EXPIRES_AT"


class TransactionVoidUserErrorCode(Enum):
    auth_not_successful = "AUTH_NOT_SUCCESSFUL"
    auth_not_voidable = "AUTH_NOT_VOIDABLE"
    generic_error = "GENERIC_ERROR"
    transaction_not_found = "TRANSACTION_NOT_FOUND"


class TranslatableResourceType(Enum):
    collection = "COLLECTION"
    delivery_method_definition = "DELIVERY_METHOD_DEFINITION"
    email_template = "EMAIL_TEMPLATE"
    filter = "FILTER"
    link = "LINK"
    metafield = "METAFIELD"
    metaobject = "METAOBJECT"
    online_store_article = "ONLINE_STORE_ARTICLE"
    online_store_blog = "ONLINE_STORE_BLOG"
    online_store_menu = "ONLINE_STORE_MENU"
    online_store_page = "ONLINE_STORE_PAGE"
    online_store_theme = "ONLINE_STORE_THEME"
    packing_slip_template = "PACKING_SLIP_TEMPLATE"
    payment_gateway = "PAYMENT_GATEWAY"
    product = "PRODUCT"
    product_option = "PRODUCT_OPTION"
    product_option_value = "PRODUCT_OPTION_VALUE"
    selling_plan = "SELLING_PLAN"
    selling_plan_group = "SELLING_PLAN_GROUP"
    shop = "SHOP"
    shop_policy = "SHOP_POLICY"


class TranslationErrorCode(Enum):
    blank = "BLANK"
    fails_resource_validation = "FAILS_RESOURCE_VALIDATION"
    invalid = "INVALID"
    invalid_code = "INVALID_CODE"
    invalid_format = "INVALID_FORMAT"
    invalid_key_for_model = "INVALID_KEY_FOR_MODEL"
    invalid_locale_for_market = "INVALID_LOCALE_FOR_MARKET"
    invalid_locale_for_shop = "INVALID_LOCALE_FOR_SHOP"
    invalid_market_localizable_content = "INVALID_MARKET_LOCALIZABLE_CONTENT"
    invalid_translatable_content = "INVALID_TRANSLATABLE_CONTENT"
    invalid_value_for_handle_translation = "INVALID_VALUE_FOR_HANDLE_TRANSLATION"
    market_custom_content_not_allowed = "MARKET_CUSTOM_CONTENT_NOT_ALLOWED"
    market_does_not_exist = "MARKET_DOES_NOT_EXIST"
    market_locale_creation_failed = "MARKET_LOCALE_CREATION_FAILED"
    resource_not_found = "RESOURCE_NOT_FOUND"
    resource_not_market_customizable = "RESOURCE_NOT_MARKET_CUSTOMIZABLE"
    resource_not_translatable = "RESOURCE_NOT_TRANSLATABLE"
    too_many_keys_for_resource = "TOO_MANY_KEYS_FOR_RESOURCE"


class UnitSystem(Enum):
    imperial_system = "IMPERIAL_SYSTEM"
    metric_system = "METRIC_SYSTEM"


class UrlRedirectBulkDeleteByIdsUserErrorCode(Enum):
    ids_empty = "IDS_EMPTY"


class UrlRedirectBulkDeleteBySavedSearchUserErrorCode(Enum):
    invalid_saved_search_query = "INVALID_SAVED_SEARCH_QUERY"
    saved_search_not_found = "SAVED_SEARCH_NOT_FOUND"


class UrlRedirectBulkDeleteBySearchUserErrorCode(Enum):
    invalid_search_argument = "INVALID_SEARCH_ARGUMENT"


class UrlRedirectErrorCode(Enum):
    create_failed = "CREATE_FAILED"
    delete_failed = "DELETE_FAILED"
    does_not_exist = "DOES_NOT_EXIST"
    update_failed = "UPDATE_FAILED"


class UrlRedirectImportErrorCode(Enum):
    already_imported = "ALREADY_IMPORTED"
    file_does_not_exist = "FILE_DOES_NOT_EXIST"
    in_progress = "IN_PROGRESS"
    not_found = "NOT_FOUND"


class UrlRedirectSortKeys(Enum):
    id = "ID"
    path = "PATH"
    relevance = "RELEVANCE"


class ValidationSortKeys(Enum):
    id = "ID"
    relevance = "RELEVANCE"


class ValidationUserErrorCode(Enum):
    app_not_authorized = "APP_NOT_AUTHORIZED"
    blank = "BLANK"
    capability_violation = "CAPABILITY_VIOLATION"
    custom_app_function_not_eligible = "CUSTOM_APP_FUNCTION_NOT_ELIGIBLE"
    disallowed_owner_type = "DISALLOWED_OWNER_TYPE"
    function_does_not_implement = "FUNCTION_DOES_NOT_IMPLEMENT"
    function_not_found = "FUNCTION_NOT_FOUND"
    function_pending_deletion = "FUNCTION_PENDING_DELETION"
    inclusion = "INCLUSION"
    internal_error = "INTERNAL_ERROR"
    invalid_type = "INVALID_TYPE"
    invalid_value = "INVALID_VALUE"
    not_found = "NOT_FOUND"
    present = "PRESENT"
    public_app_not_allowed = "PUBLIC_APP_NOT_ALLOWED"
    taken = "TAKEN"
    too_long = "TOO_LONG"
    too_short = "TOO_SHORT"
    unstructured_reserved_namespace = "UNSTRUCTURED_RESERVED_NAMESPACE"


class WebhookSubscriptionFormat(Enum):
    json = "JSON"
    xml = "XML"


class WebhookSubscriptionSortKeys(Enum):
    created_at = "CREATED_AT"
    id = "ID"
    relevance = "RELEVANCE"


class WebhookSubscriptionTopic(Enum):
    app_purchases_one_time_update = "APP_PURCHASES_ONE_TIME_UPDATE"
    app_subscriptions_approaching_capped_amount = "APP_SUBSCRIPTIONS_APPROACHING_CAPPED_AMOUNT"
    app_subscriptions_update = "APP_SUBSCRIPTIONS_UPDATE"
    app_uninstalled = "APP_UNINSTALLED"
    attributed_sessions_first = "ATTRIBUTED_SESSIONS_FIRST"
    attributed_sessions_last = "ATTRIBUTED_SESSIONS_LAST"
    audit_events_admin_api_activity = "AUDIT_EVENTS_ADMIN_API_ACTIVITY"
    bulk_operations_finish = "BULK_OPERATIONS_FINISH"
    carts_create = "CARTS_CREATE"
    carts_update = "CARTS_UPDATE"
    channels_delete = "CHANNELS_DELETE"
    checkouts_create = "CHECKOUTS_CREATE"
    checkouts_delete = "CHECKOUTS_DELETE"
    checkouts_update = "CHECKOUTS_UPDATE"
    collections_create = "COLLECTIONS_CREATE"
    collections_delete = "COLLECTIONS_DELETE"
    collections_update = "COLLECTIONS_UPDATE"
    collection_listings_add = "COLLECTION_LISTINGS_ADD"
    collection_listings_remove = "COLLECTION_LISTINGS_REMOVE"
    collection_listings_update = "COLLECTION_LISTINGS_UPDATE"
    collection_publications_create = "COLLECTION_PUBLICATIONS_CREATE"
    collection_publications_delete = "COLLECTION_PUBLICATIONS_DELETE"
    collection_publications_update = "COLLECTION_PUBLICATIONS_UPDATE"
    companies_create = "COMPANIES_CREATE"
    companies_delete = "COMPANIES_DELETE"
    companies_update = "COMPANIES_UPDATE"
    company_contacts_create = "COMPANY_CONTACTS_CREATE"
    company_contacts_delete = "COMPANY_CONTACTS_DELETE"
    company_contacts_update = "COMPANY_CONTACTS_UPDATE"
    company_contact_roles_assign = "COMPANY_CONTACT_ROLES_ASSIGN"
    company_contact_roles_revoke = "COMPANY_CONTACT_ROLES_REVOKE"
    company_locations_create = "COMPANY_LOCATIONS_CREATE"
    company_locations_delete = "COMPANY_LOCATIONS_DELETE"
    company_locations_update = "COMPANY_LOCATIONS_UPDATE"
    customers_create = "CUSTOMERS_CREATE"
    customers_delete = "CUSTOMERS_DELETE"
    customers_disable = "CUSTOMERS_DISABLE"
    customers_email_marketing_consent_update = "CUSTOMERS_EMAIL_MARKETING_CONSENT_UPDATE"
    customers_enable = "CUSTOMERS_ENABLE"
    customers_marketing_consent_update = "CUSTOMERS_MARKETING_CONSENT_UPDATE"
    customers_merge = "CUSTOMERS_MERGE"
    customers_update = "CUSTOMERS_UPDATE"
    customer_account_settings_update = "CUSTOMER_ACCOUNT_SETTINGS_UPDATE"
    customer_groups_create = "CUSTOMER_GROUPS_CREATE"
    customer_groups_delete = "CUSTOMER_GROUPS_DELETE"
    customer_groups_update = "CUSTOMER_GROUPS_UPDATE"
    customer_payment_methods_create = "CUSTOMER_PAYMENT_METHODS_CREATE"
    customer_payment_methods_revoke = "CUSTOMER_PAYMENT_METHODS_REVOKE"
    customer_payment_methods_update = "CUSTOMER_PAYMENT_METHODS_UPDATE"
    customer_tags_added = "CUSTOMER_TAGS_ADDED"
    customer_tags_removed = "CUSTOMER_TAGS_REMOVED"
    discounts_create = "DISCOUNTS_CREATE"
    discounts_delete = "DISCOUNTS_DELETE"
    discounts_redeemcode_added = "DISCOUNTS_REDEEMCODE_ADDED"
    discounts_redeemcode_removed = "DISCOUNTS_REDEEMCODE_REMOVED"
    discounts_update = "DISCOUNTS_UPDATE"
    disputes_create = "DISPUTES_CREATE"
    disputes_update = "DISPUTES_UPDATE"
    domains_create = "DOMAINS_CREATE"
    domains_destroy = "DOMAINS_DESTROY"
    domains_update = "DOMAINS_UPDATE"
    draft_orders_create = "DRAFT_ORDERS_CREATE"
    draft_orders_delete = "DRAFT_ORDERS_DELETE"
    draft_orders_update = "DRAFT_ORDERS_UPDATE"
    fulfillments_create = "FULFILLMENTS_CREATE"
    fulfillments_update = "FULFILLMENTS_UPDATE"
    fulfillment_events_create = "FULFILLMENT_EVENTS_CREATE"
    fulfillment_events_delete = "FULFILLMENT_EVENTS_DELETE"
    fulfillment_orders_cancellation_request_accepted = "FULFILLMENT_ORDERS_CANCELLATION_REQUEST_ACCEPTED"
    fulfillment_orders_cancellation_request_rejected = "FULFILLMENT_ORDERS_CANCELLATION_REQUEST_REJECTED"
    fulfillment_orders_cancellation_request_submitted = "FULFILLMENT_ORDERS_CANCELLATION_REQUEST_SUBMITTED"
    fulfillment_orders_cancelled = "FULFILLMENT_ORDERS_CANCELLED"
    fulfillment_orders_fulfillment_request_accepted = "FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_ACCEPTED"
    fulfillment_orders_fulfillment_request_rejected = "FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_REJECTED"
    fulfillment_orders_fulfillment_request_submitted = "FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_SUBMITTED"
    fulfillment_orders_fulfillment_service_failed_to_complete = (
        "FULFILLMENT_ORDERS_FULFILLMENT_SERVICE_FAILED_TO_COMPLETE"
    )
    fulfillment_orders_hold_released = "FULFILLMENT_ORDERS_HOLD_RELEASED"
    fulfillment_orders_line_items_prepared_for_local_delivery = (
        "FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_LOCAL_DELIVERY"
    )
    fulfillment_orders_line_items_prepared_for_pickup = "FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_PICKUP"
    fulfillment_orders_merged = "FULFILLMENT_ORDERS_MERGED"
    fulfillment_orders_moved = "FULFILLMENT_ORDERS_MOVED"
    fulfillment_orders_order_routing_complete = "FULFILLMENT_ORDERS_ORDER_ROUTING_COMPLETE"
    fulfillment_orders_placed_on_hold = "FULFILLMENT_ORDERS_PLACED_ON_HOLD"
    fulfillment_orders_rescheduled = "FULFILLMENT_ORDERS_RESCHEDULED"
    fulfillment_orders_scheduled_fulfillment_order_ready = "FULFILLMENT_ORDERS_SCHEDULED_FULFILLMENT_ORDER_READY"
    fulfillment_orders_split = "FULFILLMENT_ORDERS_SPLIT"
    inventory_items_create = "INVENTORY_ITEMS_CREATE"
    inventory_items_delete = "INVENTORY_ITEMS_DELETE"
    inventory_items_update = "INVENTORY_ITEMS_UPDATE"
    inventory_levels_connect = "INVENTORY_LEVELS_CONNECT"
    inventory_levels_disconnect = "INVENTORY_LEVELS_DISCONNECT"
    inventory_levels_update = "INVENTORY_LEVELS_UPDATE"
    locales_create = "LOCALES_CREATE"
    locales_update = "LOCALES_UPDATE"
    locations_activate = "LOCATIONS_ACTIVATE"
    locations_create = "LOCATIONS_CREATE"
    locations_deactivate = "LOCATIONS_DEACTIVATE"
    locations_delete = "LOCATIONS_DELETE"
    locations_update = "LOCATIONS_UPDATE"
    markets_create = "MARKETS_CREATE"
    markets_delete = "MARKETS_DELETE"
    markets_update = "MARKETS_UPDATE"
    metaobjects_create = "METAOBJECTS_CREATE"
    metaobjects_delete = "METAOBJECTS_DELETE"
    metaobjects_update = "METAOBJECTS_UPDATE"
    orders_cancelled = "ORDERS_CANCELLED"
    orders_create = "ORDERS_CREATE"
    orders_delete = "ORDERS_DELETE"
    orders_edited = "ORDERS_EDITED"
    orders_fulfilled = "ORDERS_FULFILLED"
    orders_paid = "ORDERS_PAID"
    orders_partially_fulfilled = "ORDERS_PARTIALLY_FULFILLED"
    orders_risk_assessment_changed = "ORDERS_RISK_ASSESSMENT_CHANGED"
    orders_shopify_protect_eligibility_changed = "ORDERS_SHOPIFY_PROTECT_ELIGIBILITY_CHANGED"
    orders_updated = "ORDERS_UPDATED"
    order_transactions_create = "ORDER_TRANSACTIONS_CREATE"
    payment_schedules_due = "PAYMENT_SCHEDULES_DUE"
    payment_terms_create = "PAYMENT_TERMS_CREATE"
    payment_terms_delete = "PAYMENT_TERMS_DELETE"
    payment_terms_update = "PAYMENT_TERMS_UPDATE"
    products_create = "PRODUCTS_CREATE"
    products_delete = "PRODUCTS_DELETE"
    products_update = "PRODUCTS_UPDATE"
    product_feeds_create = "PRODUCT_FEEDS_CREATE"
    product_feeds_full_sync = "PRODUCT_FEEDS_FULL_SYNC"
    product_feeds_full_sync_finish = "PRODUCT_FEEDS_FULL_SYNC_FINISH"
    product_feeds_incremental_sync = "PRODUCT_FEEDS_INCREMENTAL_SYNC"
    product_feeds_update = "PRODUCT_FEEDS_UPDATE"
    product_listings_add = "PRODUCT_LISTINGS_ADD"
    product_listings_remove = "PRODUCT_LISTINGS_REMOVE"
    product_listings_update = "PRODUCT_LISTINGS_UPDATE"
    product_publications_create = "PRODUCT_PUBLICATIONS_CREATE"
    product_publications_delete = "PRODUCT_PUBLICATIONS_DELETE"
    product_publications_update = "PRODUCT_PUBLICATIONS_UPDATE"
    profiles_create = "PROFILES_CREATE"
    profiles_delete = "PROFILES_DELETE"
    profiles_update = "PROFILES_UPDATE"
    publications_delete = "PUBLICATIONS_DELETE"
    refunds_create = "REFUNDS_CREATE"
    returns_approve = "RETURNS_APPROVE"
    returns_cancel = "RETURNS_CANCEL"
    returns_close = "RETURNS_CLOSE"
    returns_decline = "RETURNS_DECLINE"
    returns_reopen = "RETURNS_REOPEN"
    returns_request = "RETURNS_REQUEST"
    returns_update = "RETURNS_UPDATE"
    reverse_deliveries_attach_deliverable = "REVERSE_DELIVERIES_ATTACH_DELIVERABLE"
    reverse_fulfillment_orders_dispose = "REVERSE_FULFILLMENT_ORDERS_DISPOSE"
    scheduled_product_listings_add = "SCHEDULED_PRODUCT_LISTINGS_ADD"
    scheduled_product_listings_remove = "SCHEDULED_PRODUCT_LISTINGS_REMOVE"
    scheduled_product_listings_update = "SCHEDULED_PRODUCT_LISTINGS_UPDATE"
    segments_create = "SEGMENTS_CREATE"
    segments_delete = "SEGMENTS_DELETE"
    segments_update = "SEGMENTS_UPDATE"
    selling_plan_groups_create = "SELLING_PLAN_GROUPS_CREATE"
    selling_plan_groups_delete = "SELLING_PLAN_GROUPS_DELETE"
    selling_plan_groups_update = "SELLING_PLAN_GROUPS_UPDATE"
    shipping_addresses_create = "SHIPPING_ADDRESSES_CREATE"
    shipping_addresses_update = "SHIPPING_ADDRESSES_UPDATE"
    shop_update = "SHOP_UPDATE"
    subscription_billing_attempts_challenged = "SUBSCRIPTION_BILLING_ATTEMPTS_CHALLENGED"
    subscription_billing_attempts_failure = "SUBSCRIPTION_BILLING_ATTEMPTS_FAILURE"
    subscription_billing_attempts_success = "SUBSCRIPTION_BILLING_ATTEMPTS_SUCCESS"
    subscription_billing_cycles_skip = "SUBSCRIPTION_BILLING_CYCLES_SKIP"
    subscription_billing_cycles_unskip = "SUBSCRIPTION_BILLING_CYCLES_UNSKIP"
    subscription_billing_cycle_edits_create = "SUBSCRIPTION_BILLING_CYCLE_EDITS_CREATE"
    subscription_billing_cycle_edits_delete = "SUBSCRIPTION_BILLING_CYCLE_EDITS_DELETE"
    subscription_billing_cycle_edits_update = "SUBSCRIPTION_BILLING_CYCLE_EDITS_UPDATE"
    subscription_contracts_activate = "SUBSCRIPTION_CONTRACTS_ACTIVATE"
    subscription_contracts_cancel = "SUBSCRIPTION_CONTRACTS_CANCEL"
    subscription_contracts_create = "SUBSCRIPTION_CONTRACTS_CREATE"
    subscription_contracts_expire = "SUBSCRIPTION_CONTRACTS_EXPIRE"
    subscription_contracts_fail = "SUBSCRIPTION_CONTRACTS_FAIL"
    subscription_contracts_pause = "SUBSCRIPTION_CONTRACTS_PAUSE"
    subscription_contracts_update = "SUBSCRIPTION_CONTRACTS_UPDATE"
    tax_partners_update = "TAX_PARTNERS_UPDATE"
    tax_services_create = "TAX_SERVICES_CREATE"
    tax_services_update = "TAX_SERVICES_UPDATE"
    tender_transactions_create = "TENDER_TRANSACTIONS_CREATE"
    themes_create = "THEMES_CREATE"
    themes_delete = "THEMES_DELETE"
    themes_publish = "THEMES_PUBLISH"
    themes_update = "THEMES_UPDATE"
    variants_in_stock = "VARIANTS_IN_STOCK"
    variants_out_of_stock = "VARIANTS_OUT_OF_STOCK"


class WeightUnit(Enum):
    grams = "GRAMS"
    kilograms = "KILOGRAMS"
    ounces = "OUNCES"
    pounds = "POUNDS"


class AppPurchase(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    name: Optional[String] = None
    price: Optional[MoneyV2] = None
    status: Optional[AppPurchaseStatus] = None
    test: Optional[Boolean] = None
    typename__: Optional[Literal["AppPurchase"]] = Field("AppPurchase", alias="__typename")


class BasePaymentDetails(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    payment_method_name: Optional[String] = Field(None, alias="paymentMethodName")
    typename__: Optional[Literal["BasePaymentDetails"]] = Field("BasePaymentDetails", alias="__typename")


class CalculatedDiscountApplication(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocation_method: Optional[DiscountApplicationAllocationMethod] = Field(None, alias="allocationMethod")
    applied_to: Optional[DiscountApplicationLevel] = Field(None, alias="appliedTo")
    description: Optional[String] = None
    id: Optional[ID] = None
    target_selection: Optional[DiscountApplicationTargetSelection] = Field(None, alias="targetSelection")
    target_type: Optional[DiscountApplicationTargetType] = Field(None, alias="targetType")
    value: Optional[PricingValue] = None
    typename__: Optional[Literal["CalculatedDiscountApplication"]] = Field(
        "CalculatedDiscountApplication", alias="__typename"
    )


class CalculatedReturnFee(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount_set: Optional[MoneyBag] = Field(None, alias="amountSet")
    id: Optional[ID] = None
    typename__: Optional[Literal["CalculatedReturnFee"]] = Field("CalculatedReturnFee", alias="__typename")


class CheckoutBrandingFont(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    sources: Optional[String] = None
    weight: Optional[Int] = None
    typename__: Optional[Literal["CheckoutBrandingFont"]] = Field("CheckoutBrandingFont", alias="__typename")


class CommentEventSubject(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    has_timeline_comment: Optional[Boolean] = Field(None, alias="hasTimelineComment")
    id: Optional[ID] = None
    typename__: Optional[Literal["CommentEventSubject"]] = Field("CommentEventSubject", alias="__typename")


class CustomerMoment(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    occurred_at: Optional[DateTime] = Field(None, alias="occurredAt")
    typename__: Optional[Literal["CustomerMoment"]] = Field("CustomerMoment", alias="__typename")


class DiscountApplication(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocation_method: Optional[DiscountApplicationAllocationMethod] = Field(None, alias="allocationMethod")
    index: Optional[Int] = None
    target_selection: Optional[DiscountApplicationTargetSelection] = Field(None, alias="targetSelection")
    target_type: Optional[DiscountApplicationTargetType] = Field(None, alias="targetType")
    value: Optional[PricingValue] = None
    typename__: Optional[Literal["DiscountApplication"]] = Field("DiscountApplication", alias="__typename")


class DisplayableError(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["DisplayableError"]] = Field("DisplayableError", alias="__typename")


class DraftOrderWarning(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    error_code: Optional[String] = Field(None, alias="errorCode")
    field: Optional[String] = None
    message: Optional[String] = None
    typename__: Optional[Literal["DraftOrderWarning"]] = Field("DraftOrderWarning", alias="__typename")


class Event(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_title: Optional[String] = Field(None, alias="appTitle")
    attribute_to_app: Optional[Boolean] = Field(None, alias="attributeToApp")
    attribute_to_user: Optional[Boolean] = Field(None, alias="attributeToUser")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    critical_alert: Optional[Boolean] = Field(None, alias="criticalAlert")
    id: Optional[ID] = None
    message: Optional[FormattedString] = None
    typename__: Optional[Literal["Event"]] = Field("Event", alias="__typename")


class Fee(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    typename__: Optional[Literal["Fee"]] = Field("Fee", alias="__typename")


class File(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alt: Optional[String] = None
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    file_errors: list[FileError] = Field(default_factory=list, alias="fileErrors")
    file_status: Optional[FileStatus] = Field(None, alias="fileStatus")
    id: Optional[ID] = None
    preview: Optional[MediaPreviewImage] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["File"]] = Field("File", alias="__typename")


class HasCompareDigest(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    compare_digest: Optional[String] = Field(None, alias="compareDigest")
    typename__: Optional[Literal["HasCompareDigest"]] = Field("HasCompareDigest", alias="__typename")


class HasEvents(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    events: Optional[EventConnection] = None
    typename__: Optional[Literal["HasEvents"]] = Field("HasEvents", alias="__typename")


class HasLocalizationExtensions(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    localization_extensions: Optional[LocalizationExtensionConnection] = Field(None, alias="localizationExtensions")
    typename__: Optional[Literal["HasLocalizationExtensions"]] = Field("HasLocalizationExtensions", alias="__typename")


class HasMetafieldDefinitions(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    typename__: Optional[Literal["HasMetafieldDefinitions"]] = Field("HasMetafieldDefinitions", alias="__typename")


class HasMetafields(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    metafield: Optional[Metafield] = None
    metafields: Optional[MetafieldConnection] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    typename__: Optional[Literal["HasMetafields"]] = Field("HasMetafields", alias="__typename")


class HasPublishedTranslations(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    translations: list[Translation] = Field(default_factory=list)
    typename__: Optional[Literal["HasPublishedTranslations"]] = Field("HasPublishedTranslations", alias="__typename")


class HasStoreCreditAccounts(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    store_credit_accounts: Optional[StoreCreditAccountConnection] = Field(None, alias="storeCreditAccounts")
    typename__: Optional[Literal["HasStoreCreditAccounts"]] = Field("HasStoreCreditAccounts", alias="__typename")


class JobResult(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    done: Optional[Boolean] = None
    id: Optional[ID] = None
    typename__: Optional[Literal["JobResult"]] = Field("JobResult", alias="__typename")


class LegacyInteroperability(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    typename__: Optional[Literal["LegacyInteroperability"]] = Field("LegacyInteroperability", alias="__typename")


class MarketRegion(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    name: Optional[String] = None
    typename__: Optional[Literal["MarketRegion"]] = Field("MarketRegion", alias="__typename")


class Media(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alt: Optional[String] = None
    id: Optional[ID] = None
    media_content_type: Optional[MediaContentType] = Field(None, alias="mediaContentType")
    media_errors: list[MediaError] = Field(default_factory=list, alias="mediaErrors")
    media_warnings: list[MediaWarning] = Field(default_factory=list, alias="mediaWarnings")
    preview: Optional[MediaPreviewImage] = None
    status: Optional[MediaStatus] = None
    typename__: Optional[Literal["Media"]] = Field("Media", alias="__typename")


class Navigable(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    default_cursor: Optional[String] = Field(None, alias="defaultCursor")
    typename__: Optional[Literal["Navigable"]] = Field("Navigable", alias="__typename")


class Node(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    typename__: Optional[Literal["Node"]] = Field("Node", alias="__typename")


class OnlineStorePreviewable(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    online_store_preview_url: Optional[URL] = Field(None, alias="onlineStorePreviewUrl")
    typename__: Optional[Literal["OnlineStorePreviewable"]] = Field("OnlineStorePreviewable", alias="__typename")


class ProductOperation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    status: Optional[ProductOperationStatus] = None
    typename__: Optional[Literal["ProductOperation"]] = Field("ProductOperation", alias="__typename")


class Publishable(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    available_publications_count: Optional[Count] = Field(None, alias="availablePublicationsCount")
    publication_count: Optional[Int] = Field(None, alias="publicationCount")
    published_on_channel: Optional[Boolean] = Field(None, alias="publishedOnChannel")
    published_on_current_channel: Optional[Boolean] = Field(None, alias="publishedOnCurrentChannel")
    published_on_current_publication: Optional[Boolean] = Field(None, alias="publishedOnCurrentPublication")
    published_on_publication: Optional[Boolean] = Field(None, alias="publishedOnPublication")
    resource_publications: Optional[ResourcePublicationConnection] = Field(None, alias="resourcePublications")
    resource_publications_count: Optional[Count] = Field(None, alias="resourcePublicationsCount")
    resource_publications_v2: Optional[ResourcePublicationV2Connection] = Field(None, alias="resourcePublicationsV2")
    unpublished_channels: Optional[ChannelConnection] = Field(None, alias="unpublishedChannels")
    unpublished_publications: Optional[PublicationConnection] = Field(None, alias="unpublishedPublications")
    typename__: Optional[Literal["Publishable"]] = Field("Publishable", alias="__typename")


class ResourceOperation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    processed_row_count: Optional[Int] = Field(None, alias="processedRowCount")
    row_count: Optional[RowCount] = Field(None, alias="rowCount")
    status: Optional[ResourceOperationStatus] = None
    typename__: Optional[Literal["ResourceOperation"]] = Field("ResourceOperation", alias="__typename")


class ReturnLineItemType(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_note: Optional[String] = Field(None, alias="customerNote")
    id: Optional[ID] = None
    quantity: Optional[Int] = None
    refundable_quantity: Optional[Int] = Field(None, alias="refundableQuantity")
    refunded_quantity: Optional[Int] = Field(None, alias="refundedQuantity")
    return_reason: Optional[ReturnReason] = Field(None, alias="returnReason")
    return_reason_note: Optional[String] = Field(None, alias="returnReasonNote")
    typename__: Optional[Literal["ReturnLineItemType"]] = Field("ReturnLineItemType", alias="__typename")


class Sale(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    action_type: Optional[SaleActionType] = Field(None, alias="actionType")
    id: Optional[ID] = None
    line_type: Optional[SaleLineType] = Field(None, alias="lineType")
    quantity: Optional[Int] = None
    taxes: list[SaleTax] = Field(default_factory=list)
    total_amount: Optional[MoneyBag] = Field(None, alias="totalAmount")
    total_discount_amount_after_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountAfterTaxes")
    total_discount_amount_before_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountBeforeTaxes")
    total_tax_amount: Optional[MoneyBag] = Field(None, alias="totalTaxAmount")
    typename__: Optional[Literal["Sale"]] = Field("Sale", alias="__typename")


class SalesAgreement(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    happened_at: Optional[DateTime] = Field(None, alias="happenedAt")
    id: Optional[ID] = None
    reason: Optional[OrderActionType] = None
    sales: Optional[SaleConnection] = None
    user: Optional[StaffMember] = None
    typename__: Optional[Literal["SalesAgreement"]] = Field("SalesAgreement", alias="__typename")


class SegmentFilter(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    localized_name: Optional[String] = Field(None, alias="localizedName")
    multi_value: Optional[Boolean] = Field(None, alias="multiValue")
    query_name: Optional[String] = Field(None, alias="queryName")
    typename__: Optional[Literal["SegmentFilter"]] = Field("SegmentFilter", alias="__typename")


class SellingPlanPricingPolicyBase(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    adjustment_type: Optional[SellingPlanPricingPolicyAdjustmentType] = Field(None, alias="adjustmentType")
    adjustment_value: Optional[SellingPlanPricingPolicyAdjustmentValue] = Field(None, alias="adjustmentValue")
    typename__: Optional[Literal["SellingPlanPricingPolicyBase"]] = Field(
        "SellingPlanPricingPolicyBase", alias="__typename"
    )


class ShopifyPaymentsChargeStatementDescriptor(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    default: Optional[String] = None
    prefix: Optional[String] = None
    typename__: Optional[Literal["ShopifyPaymentsChargeStatementDescriptor"]] = Field(
        "ShopifyPaymentsChargeStatementDescriptor", alias="__typename"
    )


class StoreCreditAccountTransaction(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    account: Optional[StoreCreditAccount] = None
    amount: Optional[MoneyV2] = None
    balance_after_transaction: Optional[MoneyV2] = Field(None, alias="balanceAfterTransaction")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    typename__: Optional[Literal["StoreCreditAccountTransaction"]] = Field(
        "StoreCreditAccountTransaction", alias="__typename"
    )


class SubscriptionContractBase(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    app_admin_url: Optional[URL] = Field(None, alias="appAdminUrl")
    currency_code: Optional[CurrencyCode] = Field(None, alias="currencyCode")
    custom_attributes: list[Attribute] = Field(default_factory=list, alias="customAttributes")
    customer: Optional[Customer] = None
    customer_payment_method: Optional[CustomerPaymentMethod] = Field(None, alias="customerPaymentMethod")
    delivery_method: Optional[SubscriptionDeliveryMethod] = Field(None, alias="deliveryMethod")
    delivery_price: Optional[MoneyV2] = Field(None, alias="deliveryPrice")
    discounts: Optional[SubscriptionManualDiscountConnection] = None
    line_count: Optional[Int] = Field(None, alias="lineCount")
    lines: Optional[SubscriptionLineConnection] = None
    lines_count: Optional[Count] = Field(None, alias="linesCount")
    note: Optional[String] = None
    orders: Optional[OrderConnection] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["SubscriptionContractBase"]] = Field("SubscriptionContractBase", alias="__typename")


class AbandonedCheckout(Navigable, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    abandoned_checkout_url: Optional[URL] = Field(None, alias="abandonedCheckoutUrl")
    default_cursor: Optional[String] = Field(None, alias="defaultCursor")
    id: Optional[ID] = None
    line_items: Optional[AbandonedCheckoutLineItemConnection] = Field(None, alias="lineItems")
    line_items_quantity: Optional[Int] = Field(None, alias="lineItemsQuantity")
    total_price_set: Optional[MoneyBag] = Field(None, alias="totalPriceSet")
    typename__: Optional[Literal["AbandonedCheckout"]] = Field("AbandonedCheckout", alias="__typename")


class AbandonedCheckoutLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    custom_attributes: list[Attribute] = Field(default_factory=list, alias="customAttributes")
    discounted_total_price_set: Optional[MoneyBag] = Field(None, alias="discountedTotalPriceSet")
    discounted_total_price_with_code_discount: Optional[MoneyBag] = Field(
        None, alias="discountedTotalPriceWithCodeDiscount"
    )
    discounted_unit_price_set: Optional[MoneyBag] = Field(None, alias="discountedUnitPriceSet")
    discounted_unit_price_with_code_discount: Optional[MoneyBag] = Field(
        None, alias="discountedUnitPriceWithCodeDiscount"
    )
    id: Optional[ID] = None
    image: Optional[Image] = None
    original_total_price_set: Optional[MoneyBag] = Field(None, alias="originalTotalPriceSet")
    original_unit_price_set: Optional[MoneyBag] = Field(None, alias="originalUnitPriceSet")
    product: Optional[Product] = None
    quantity: Optional[Int] = None
    sku: Optional[String] = None
    title: Optional[String] = None
    variant: Optional[ProductVariant] = None
    variant_title: Optional[String] = Field(None, alias="variantTitle")
    typename__: Optional[Literal["AbandonedCheckoutLineItem"]] = Field("AbandonedCheckoutLineItem", alias="__typename")


class AbandonedCheckoutLineItemConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[AbandonedCheckoutLineItemEdge] = Field(default_factory=list)
    nodes: list[AbandonedCheckoutLineItem] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["AbandonedCheckoutLineItemConnection"]] = Field(
        "AbandonedCheckoutLineItemConnection", alias="__typename"
    )


class AbandonedCheckoutLineItemEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[AbandonedCheckoutLineItem] = None
    typename__: Optional[Literal["AbandonedCheckoutLineItemEdge"]] = Field(
        "AbandonedCheckoutLineItemEdge", alias="__typename"
    )


class Abandonment(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    abandoned_checkout_payload: Optional[AbandonedCheckout] = Field(None, alias="abandonedCheckoutPayload")
    abandonment_type: Optional[AbandonmentAbandonmentType] = Field(None, alias="abandonmentType")
    app: Optional[App] = None
    cart_url: Optional[URL] = Field(None, alias="cartUrl")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    customer: Optional[Customer] = None
    customer_has_no_draft_order_since_abandonment: Optional[Boolean] = Field(
        None, alias="customerHasNoDraftOrderSinceAbandonment"
    )
    customer_has_no_order_since_abandonment: Optional[Boolean] = Field(None, alias="customerHasNoOrderSinceAbandonment")
    days_since_last_abandonment_email: Optional[Int] = Field(None, alias="daysSinceLastAbandonmentEmail")
    email_sent_at: Optional[DateTime] = Field(None, alias="emailSentAt")
    email_state: Optional[AbandonmentEmailState] = Field(None, alias="emailState")
    hours_since_last_abandoned_checkout: Optional[Float] = Field(None, alias="hoursSinceLastAbandonedCheckout")
    id: Optional[ID] = None
    inventory_available: Optional[Boolean] = Field(None, alias="inventoryAvailable")
    is_from_custom_storefront: Optional[Boolean] = Field(None, alias="isFromCustomStorefront")
    is_from_online_store: Optional[Boolean] = Field(None, alias="isFromOnlineStore")
    is_from_shop_app: Optional[Boolean] = Field(None, alias="isFromShopApp")
    is_from_shop_pay: Optional[Boolean] = Field(None, alias="isFromShopPay")
    is_most_significant_abandonment: Optional[Boolean] = Field(None, alias="isMostSignificantAbandonment")
    last_browse_abandonment_date: Optional[DateTime] = Field(None, alias="lastBrowseAbandonmentDate")
    last_cart_abandonment_date: Optional[DateTime] = Field(None, alias="lastCartAbandonmentDate")
    last_checkout_abandonment_date: Optional[DateTime] = Field(None, alias="lastCheckoutAbandonmentDate")
    most_recent_step: Optional[AbandonmentAbandonmentType] = Field(None, alias="mostRecentStep")
    products_added_to_cart: Optional[CustomerVisitProductInfoConnection] = Field(None, alias="productsAddedToCart")
    products_viewed: Optional[CustomerVisitProductInfoConnection] = Field(None, alias="productsViewed")
    visit_started_at: Optional[DateTime] = Field(None, alias="visitStartedAt")
    typename__: Optional[Literal["Abandonment"]] = Field("Abandonment", alias="__typename")


class AbandonmentEmailStateUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    abandonment: Optional[Abandonment] = None
    user_errors: list[AbandonmentEmailStateUpdateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["AbandonmentEmailStateUpdatePayload"]] = Field(
        "AbandonmentEmailStateUpdatePayload", alias="__typename"
    )


class AbandonmentEmailStateUpdateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[AbandonmentEmailStateUpdateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["AbandonmentEmailStateUpdateUserError"]] = Field(
        "AbandonmentEmailStateUpdateUserError", alias="__typename"
    )


class AbandonmentUpdateActivitiesDeliveryStatusesPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    abandonment: Optional[Abandonment] = None
    user_errors: list[AbandonmentUpdateActivitiesDeliveryStatusesUserError] = Field(
        default_factory=list, alias="userErrors"
    )
    typename__: Optional[Literal["AbandonmentUpdateActivitiesDeliveryStatusesPayload"]] = Field(
        "AbandonmentUpdateActivitiesDeliveryStatusesPayload", alias="__typename"
    )


class AbandonmentUpdateActivitiesDeliveryStatusesUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[AbandonmentUpdateActivitiesDeliveryStatusesUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["AbandonmentUpdateActivitiesDeliveryStatusesUserError"]] = Field(
        "AbandonmentUpdateActivitiesDeliveryStatusesUserError", alias="__typename"
    )


class AccessScope(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[String] = None
    handle: Optional[String] = None
    typename__: Optional[Literal["AccessScope"]] = Field("AccessScope", alias="__typename")


class AddAllProductsOperation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    processed_row_count: Optional[Int] = Field(None, alias="processedRowCount")
    row_count: Optional[RowCount] = Field(None, alias="rowCount")
    status: Optional[ResourceOperationStatus] = None
    typename__: Optional[Literal["AddAllProductsOperation"]] = Field("AddAllProductsOperation", alias="__typename")


class AdditionalFee(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    name: Optional[String] = None
    price: Optional[MoneyBag] = None
    tax_lines: list[TaxLine] = Field(default_factory=list, alias="taxLines")
    typename__: Optional[Literal["AdditionalFee"]] = Field("AdditionalFee", alias="__typename")


class AdditionalFeeSale(Sale):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    action_type: Optional[SaleActionType] = Field(None, alias="actionType")
    additional_fee: Optional[SaleAdditionalFee] = Field(None, alias="additionalFee")
    id: Optional[ID] = None
    line_type: Optional[SaleLineType] = Field(None, alias="lineType")
    quantity: Optional[Int] = None
    taxes: list[SaleTax] = Field(default_factory=list)
    total_amount: Optional[MoneyBag] = Field(None, alias="totalAmount")
    total_discount_amount_after_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountAfterTaxes")
    total_discount_amount_before_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountBeforeTaxes")
    total_tax_amount: Optional[MoneyBag] = Field(None, alias="totalTaxAmount")
    typename__: Optional[Literal["AdditionalFeeSale"]] = Field("AdditionalFeeSale", alias="__typename")


class AdjustmentSale(Sale):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    action_type: Optional[SaleActionType] = Field(None, alias="actionType")
    id: Optional[ID] = None
    line_type: Optional[SaleLineType] = Field(None, alias="lineType")
    quantity: Optional[Int] = None
    taxes: list[SaleTax] = Field(default_factory=list)
    total_amount: Optional[MoneyBag] = Field(None, alias="totalAmount")
    total_discount_amount_after_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountAfterTaxes")
    total_discount_amount_before_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountBeforeTaxes")
    total_tax_amount: Optional[MoneyBag] = Field(None, alias="totalTaxAmount")
    typename__: Optional[Literal["AdjustmentSale"]] = Field("AdjustmentSale", alias="__typename")


class AllDiscountItems(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    all_items: Optional[Boolean] = Field(None, alias="allItems")
    typename__: Optional[Literal["AllDiscountItems"]] = Field("AllDiscountItems", alias="__typename")


class AndroidApplication(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_links_enabled: Optional[Boolean] = Field(None, alias="appLinksEnabled")
    application_id: Optional[String] = Field(None, alias="applicationId")
    id: Optional[ID] = None
    sha256_cert_fingerprints: list[String] = Field(default_factory=list, alias="sha256CertFingerprints")
    typename__: Optional[Literal["AndroidApplication"]] = Field("AndroidApplication", alias="__typename")


class ApiVersion(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    display_name: Optional[String] = Field(None, alias="displayName")
    handle: Optional[String] = None
    supported: Optional[Boolean] = None
    typename__: Optional[Literal["ApiVersion"]] = Field("ApiVersion", alias="__typename")


class App(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    api_key: Optional[String] = Field(None, alias="apiKey")
    app_store_app_url: Optional[URL] = Field(None, alias="appStoreAppUrl")
    app_store_developer_url: Optional[URL] = Field(None, alias="appStoreDeveloperUrl")
    available_access_scopes: list[AccessScope] = Field(default_factory=list, alias="availableAccessScopes")
    banner: Optional[Image] = None
    description: Optional[String] = None
    developer_name: Optional[String] = Field(None, alias="developerName")
    developer_type: Optional[AppDeveloperType] = Field(None, alias="developerType")
    developer_url: Optional[URL] = Field(None, alias="developerUrl")
    embedded: Optional[Boolean] = None
    failed_requirements: list[FailedRequirement] = Field(default_factory=list, alias="failedRequirements")
    features: list[String] = Field(default_factory=list)
    feedback: Optional[AppFeedback] = None
    handle: Optional[String] = None
    icon: Optional[Image] = None
    id: Optional[ID] = None
    install_url: Optional[URL] = Field(None, alias="installUrl")
    installation: Optional[AppInstallation] = None
    is_post_purchase_app_in_use: Optional[Boolean] = Field(None, alias="isPostPurchaseAppInUse")
    launch_url: Optional[URL] = Field(None, alias="launchUrl")
    navigation_items: list[NavigationItem] = Field(default_factory=list, alias="navigationItems")
    previously_installed: Optional[Boolean] = Field(None, alias="previouslyInstalled")
    pricing_details: Optional[String] = Field(None, alias="pricingDetails")
    pricing_details_summary: Optional[String] = Field(None, alias="pricingDetailsSummary")
    privacy_policy_url: Optional[URL] = Field(None, alias="privacyPolicyUrl")
    public_category: Optional[AppPublicCategory] = Field(None, alias="publicCategory")
    published: Optional[Boolean] = None
    requested_access_scopes: list[AccessScope] = Field(default_factory=list, alias="requestedAccessScopes")
    screenshots: list[Image] = Field(default_factory=list)
    shopify_developed: Optional[Boolean] = Field(None, alias="shopifyDeveloped")
    title: Optional[String] = None
    uninstall_message: Optional[String] = Field(None, alias="uninstallMessage")
    uninstall_url: Optional[URL] = Field(None, alias="uninstallUrl")
    webhook_api_version: Optional[String] = Field(None, alias="webhookApiVersion")
    typename__: Optional[Literal["App"]] = Field("App", alias="__typename")


class AppConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[AppEdge] = Field(default_factory=list)
    nodes: list[App] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["AppConnection"]] = Field("AppConnection", alias="__typename")


class AppCredit(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[MoneyV2] = None
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    description: Optional[String] = None
    id: Optional[ID] = None
    test: Optional[Boolean] = None
    typename__: Optional[Literal["AppCredit"]] = Field("AppCredit", alias="__typename")


class AppCreditConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[AppCreditEdge] = Field(default_factory=list)
    nodes: list[AppCredit] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["AppCreditConnection"]] = Field("AppCreditConnection", alias="__typename")


class AppCreditEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[AppCredit] = None
    typename__: Optional[Literal["AppCreditEdge"]] = Field("AppCreditEdge", alias="__typename")


class AppDiscountType(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    app_bridge: Optional[FunctionsAppBridge] = Field(None, alias="appBridge")
    app_key: Optional[String] = Field(None, alias="appKey")
    description: Optional[String] = None
    discount_class: Optional[DiscountClass] = Field(None, alias="discountClass")
    function_id: Optional[String] = Field(None, alias="functionId")
    target_type: Optional[DiscountApplicationTargetType] = Field(None, alias="targetType")
    title: Optional[String] = None
    typename__: Optional[Literal["AppDiscountType"]] = Field("AppDiscountType", alias="__typename")


class AppEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[App] = None
    typename__: Optional[Literal["AppEdge"]] = Field("AppEdge", alias="__typename")


class AppFeedback(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    link: Optional[Link] = None
    messages: list[UserError] = Field(default_factory=list)
    typename__: Optional[Literal["AppFeedback"]] = Field("AppFeedback", alias="__typename")


class AppInstallation(HasMetafields, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    access_scopes: list[AccessScope] = Field(default_factory=list, alias="accessScopes")
    active_subscriptions: list[AppSubscription] = Field(default_factory=list, alias="activeSubscriptions")
    all_subscriptions: Optional[AppSubscriptionConnection] = Field(None, alias="allSubscriptions")
    app: Optional[App] = None
    channel: Optional[Channel] = None
    credits: Optional[AppCreditConnection] = None
    id: Optional[ID] = None
    launch_url: Optional[URL] = Field(None, alias="launchUrl")
    metafield: Optional[Metafield] = None
    metafields: Optional[MetafieldConnection] = None
    one_time_purchases: Optional[AppPurchaseOneTimeConnection] = Field(None, alias="oneTimePurchases")
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    publication: Optional[Publication] = None
    revenue_attribution_records: Optional[AppRevenueAttributionRecordConnection] = Field(
        None, alias="revenueAttributionRecords"
    )
    subscriptions: list[AppSubscription] = Field(default_factory=list)
    uninstall_url: Optional[URL] = Field(None, alias="uninstallUrl")
    typename__: Optional[Literal["AppInstallation"]] = Field("AppInstallation", alias="__typename")


class AppInstallationConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[AppInstallationEdge] = Field(default_factory=list)
    nodes: list[AppInstallation] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["AppInstallationConnection"]] = Field("AppInstallationConnection", alias="__typename")


class AppInstallationEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[AppInstallation] = None
    typename__: Optional[Literal["AppInstallationEdge"]] = Field("AppInstallationEdge", alias="__typename")


class AppPlanV2(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    pricing_details: Optional[AppPricingDetails] = Field(None, alias="pricingDetails")
    typename__: Optional[Literal["AppPlanV2"]] = Field("AppPlanV2", alias="__typename")


class AppPurchaseOneTime(AppPurchase, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    id: Optional[ID] = None
    name: Optional[String] = None
    price: Optional[MoneyV2] = None
    status: Optional[AppPurchaseStatus] = None
    test: Optional[Boolean] = None
    typename__: Optional[Literal["AppPurchaseOneTime"]] = Field("AppPurchaseOneTime", alias="__typename")


class AppPurchaseOneTimeConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[AppPurchaseOneTimeEdge] = Field(default_factory=list)
    nodes: list[AppPurchaseOneTime] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["AppPurchaseOneTimeConnection"]] = Field(
        "AppPurchaseOneTimeConnection", alias="__typename"
    )


class AppPurchaseOneTimeCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_purchase_one_time: Optional[AppPurchaseOneTime] = Field(None, alias="appPurchaseOneTime")
    confirmation_url: Optional[URL] = Field(None, alias="confirmationUrl")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["AppPurchaseOneTimeCreatePayload"]] = Field(
        "AppPurchaseOneTimeCreatePayload", alias="__typename"
    )


class AppPurchaseOneTimeEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[AppPurchaseOneTime] = None
    typename__: Optional[Literal["AppPurchaseOneTimeEdge"]] = Field("AppPurchaseOneTimeEdge", alias="__typename")


class AppRecurringPricing(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    discount: Optional[AppSubscriptionDiscount] = None
    interval: Optional[AppPricingInterval] = None
    price: Optional[MoneyV2] = None
    typename__: Optional[Literal["AppRecurringPricing"]] = Field("AppRecurringPricing", alias="__typename")


class AppRevenueAttributionRecord(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[MoneyV2] = None
    captured_at: Optional[DateTime] = Field(None, alias="capturedAt")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    id: Optional[ID] = None
    idempotency_key: Optional[String] = Field(None, alias="idempotencyKey")
    test: Optional[Boolean] = None
    type: Optional[AppRevenueAttributionType] = None
    typename__: Optional[Literal["AppRevenueAttributionRecord"]] = Field(
        "AppRevenueAttributionRecord", alias="__typename"
    )


class AppRevenueAttributionRecordConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[AppRevenueAttributionRecordEdge] = Field(default_factory=list)
    nodes: list[AppRevenueAttributionRecord] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["AppRevenueAttributionRecordConnection"]] = Field(
        "AppRevenueAttributionRecordConnection", alias="__typename"
    )


class AppRevenueAttributionRecordEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[AppRevenueAttributionRecord] = None
    typename__: Optional[Literal["AppRevenueAttributionRecordEdge"]] = Field(
        "AppRevenueAttributionRecordEdge", alias="__typename"
    )


class AppSubscription(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    current_period_end: Optional[DateTime] = Field(None, alias="currentPeriodEnd")
    id: Optional[ID] = None
    line_items: list[AppSubscriptionLineItem] = Field(default_factory=list, alias="lineItems")
    name: Optional[String] = None
    return_url: Optional[URL] = Field(None, alias="returnUrl")
    status: Optional[AppSubscriptionStatus] = None
    test: Optional[Boolean] = None
    trial_days: Optional[Int] = Field(None, alias="trialDays")
    typename__: Optional[Literal["AppSubscription"]] = Field("AppSubscription", alias="__typename")


class AppSubscriptionCancelPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_subscription: Optional[AppSubscription] = Field(None, alias="appSubscription")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["AppSubscriptionCancelPayload"]] = Field(
        "AppSubscriptionCancelPayload", alias="__typename"
    )


class AppSubscriptionConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[AppSubscriptionEdge] = Field(default_factory=list)
    nodes: list[AppSubscription] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["AppSubscriptionConnection"]] = Field("AppSubscriptionConnection", alias="__typename")


class AppSubscriptionCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_subscription: Optional[AppSubscription] = Field(None, alias="appSubscription")
    confirmation_url: Optional[URL] = Field(None, alias="confirmationUrl")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["AppSubscriptionCreatePayload"]] = Field(
        "AppSubscriptionCreatePayload", alias="__typename"
    )


class AppSubscriptionDiscount(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    duration_limit_in_intervals: Optional[Int] = Field(None, alias="durationLimitInIntervals")
    price_after_discount: Optional[MoneyV2] = Field(None, alias="priceAfterDiscount")
    remaining_duration_in_intervals: Optional[Int] = Field(None, alias="remainingDurationInIntervals")
    value: Optional[AppSubscriptionDiscountValue] = None
    typename__: Optional[Literal["AppSubscriptionDiscount"]] = Field("AppSubscriptionDiscount", alias="__typename")


class AppSubscriptionDiscountAmount(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[MoneyV2] = None
    typename__: Optional[Literal["AppSubscriptionDiscountAmount"]] = Field(
        "AppSubscriptionDiscountAmount", alias="__typename"
    )


class AppSubscriptionDiscountPercentage(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    percentage: Optional[Float] = None
    typename__: Optional[Literal["AppSubscriptionDiscountPercentage"]] = Field(
        "AppSubscriptionDiscountPercentage", alias="__typename"
    )


class AppSubscriptionEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[AppSubscription] = None
    typename__: Optional[Literal["AppSubscriptionEdge"]] = Field("AppSubscriptionEdge", alias="__typename")


class AppSubscriptionLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    plan: Optional[AppPlanV2] = None
    usage_records: Optional[AppUsageRecordConnection] = Field(None, alias="usageRecords")
    typename__: Optional[Literal["AppSubscriptionLineItem"]] = Field("AppSubscriptionLineItem", alias="__typename")


class AppSubscriptionLineItemUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_subscription: Optional[AppSubscription] = Field(None, alias="appSubscription")
    confirmation_url: Optional[URL] = Field(None, alias="confirmationUrl")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["AppSubscriptionLineItemUpdatePayload"]] = Field(
        "AppSubscriptionLineItemUpdatePayload", alias="__typename"
    )


class AppSubscriptionTrialExtendPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_subscription: Optional[AppSubscription] = Field(None, alias="appSubscription")
    user_errors: list[AppSubscriptionTrialExtendUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["AppSubscriptionTrialExtendPayload"]] = Field(
        "AppSubscriptionTrialExtendPayload", alias="__typename"
    )


class AppSubscriptionTrialExtendUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[AppSubscriptionTrialExtendUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["AppSubscriptionTrialExtendUserError"]] = Field(
        "AppSubscriptionTrialExtendUserError", alias="__typename"
    )


class AppUsagePricing(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    balance_used: Optional[MoneyV2] = Field(None, alias="balanceUsed")
    capped_amount: Optional[MoneyV2] = Field(None, alias="cappedAmount")
    interval: Optional[AppPricingInterval] = None
    terms: Optional[String] = None
    typename__: Optional[Literal["AppUsagePricing"]] = Field("AppUsagePricing", alias="__typename")


class AppUsageRecord(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    description: Optional[String] = None
    id: Optional[ID] = None
    idempotency_key: Optional[String] = Field(None, alias="idempotencyKey")
    price: Optional[MoneyV2] = None
    subscription_line_item: Optional[AppSubscriptionLineItem] = Field(None, alias="subscriptionLineItem")
    typename__: Optional[Literal["AppUsageRecord"]] = Field("AppUsageRecord", alias="__typename")


class AppUsageRecordConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[AppUsageRecordEdge] = Field(default_factory=list)
    nodes: list[AppUsageRecord] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["AppUsageRecordConnection"]] = Field("AppUsageRecordConnection", alias="__typename")


class AppUsageRecordCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_usage_record: Optional[AppUsageRecord] = Field(None, alias="appUsageRecord")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["AppUsageRecordCreatePayload"]] = Field(
        "AppUsageRecordCreatePayload", alias="__typename"
    )


class AppUsageRecordEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[AppUsageRecord] = None
    typename__: Optional[Literal["AppUsageRecordEdge"]] = Field("AppUsageRecordEdge", alias="__typename")


class AppleApplication(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_clip_application_id: Optional[String] = Field(None, alias="appClipApplicationId")
    app_clips_enabled: Optional[Boolean] = Field(None, alias="appClipsEnabled")
    app_id: Optional[String] = Field(None, alias="appId")
    id: Optional[ID] = None
    shared_web_credentials_enabled: Optional[Boolean] = Field(None, alias="sharedWebCredentialsEnabled")
    universal_links_enabled: Optional[Boolean] = Field(None, alias="universalLinksEnabled")
    typename__: Optional[Literal["AppleApplication"]] = Field("AppleApplication", alias="__typename")


class Attribute(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["Attribute"]] = Field("Attribute", alias="__typename")


class AutomaticDiscountApplication(DiscountApplication):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocation_method: Optional[DiscountApplicationAllocationMethod] = Field(None, alias="allocationMethod")
    index: Optional[Int] = None
    target_selection: Optional[DiscountApplicationTargetSelection] = Field(None, alias="targetSelection")
    target_type: Optional[DiscountApplicationTargetType] = Field(None, alias="targetType")
    title: Optional[String] = None
    value: Optional[PricingValue] = None
    typename__: Optional[Literal["AutomaticDiscountApplication"]] = Field(
        "AutomaticDiscountApplication", alias="__typename"
    )


class AvailableChannelDefinitionsByChannel(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    channel_definitions: list[ChannelDefinition] = Field(default_factory=list, alias="channelDefinitions")
    channel_name: Optional[String] = Field(None, alias="channelName")
    typename__: Optional[Literal["AvailableChannelDefinitionsByChannel"]] = Field(
        "AvailableChannelDefinitionsByChannel", alias="__typename"
    )


class BasicEvent(Event, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_title: Optional[String] = Field(None, alias="appTitle")
    attribute_to_app: Optional[Boolean] = Field(None, alias="attributeToApp")
    attribute_to_user: Optional[Boolean] = Field(None, alias="attributeToUser")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    critical_alert: Optional[Boolean] = Field(None, alias="criticalAlert")
    id: Optional[ID] = None
    message: Optional[FormattedString] = None
    typename__: Optional[Literal["BasicEvent"]] = Field("BasicEvent", alias="__typename")


class BillingAttemptUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[BillingAttemptUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["BillingAttemptUserError"]] = Field("BillingAttemptUserError", alias="__typename")


class BulkMutationUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[BulkMutationErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["BulkMutationUserError"]] = Field("BulkMutationUserError", alias="__typename")


class BulkOperation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    completed_at: Optional[DateTime] = Field(None, alias="completedAt")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    error_code: Optional[BulkOperationErrorCode] = Field(None, alias="errorCode")
    file_size: Optional[UnsignedInt64] = Field(None, alias="fileSize")
    id: Optional[ID] = None
    object_count: Optional[UnsignedInt64] = Field(None, alias="objectCount")
    partial_data_url: Optional[URL] = Field(None, alias="partialDataUrl")
    query: Optional[String] = None
    root_object_count: Optional[UnsignedInt64] = Field(None, alias="rootObjectCount")
    status: Optional[BulkOperationStatus] = None
    type: Optional[BulkOperationType] = None
    url: Optional[URL] = None
    typename__: Optional[Literal["BulkOperation"]] = Field("BulkOperation", alias="__typename")


class BulkOperationCancelPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    bulk_operation: Optional[BulkOperation] = Field(None, alias="bulkOperation")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["BulkOperationCancelPayload"]] = Field(
        "BulkOperationCancelPayload", alias="__typename"
    )


class BulkOperationRunMutationPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    bulk_operation: Optional[BulkOperation] = Field(None, alias="bulkOperation")
    user_errors: list[BulkMutationUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["BulkOperationRunMutationPayload"]] = Field(
        "BulkOperationRunMutationPayload", alias="__typename"
    )


class BulkOperationRunQueryPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    bulk_operation: Optional[BulkOperation] = Field(None, alias="bulkOperation")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["BulkOperationRunQueryPayload"]] = Field(
        "BulkOperationRunQueryPayload", alias="__typename"
    )


class BulkProductResourceFeedbackCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    feedback: Optional[list[ProductResourceFeedback]] = Field(default_factory=list)
    user_errors: list[BulkProductResourceFeedbackCreateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["BulkProductResourceFeedbackCreatePayload"]] = Field(
        "BulkProductResourceFeedbackCreatePayload", alias="__typename"
    )


class BulkProductResourceFeedbackCreateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[BulkProductResourceFeedbackCreateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["BulkProductResourceFeedbackCreateUserError"]] = Field(
        "BulkProductResourceFeedbackCreateUserError", alias="__typename"
    )


class BundlesFeature(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    eligible_for_bundles: Optional[Boolean] = Field(None, alias="eligibleForBundles")
    ineligibility_reason: Optional[String] = Field(None, alias="ineligibilityReason")
    sells_bundles: Optional[Boolean] = Field(None, alias="sellsBundles")
    typename__: Optional[Literal["BundlesFeature"]] = Field("BundlesFeature", alias="__typename")


class BusinessCustomerUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[BusinessCustomerErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["BusinessCustomerUserError"]] = Field("BusinessCustomerUserError", alias="__typename")


class BuyerExperienceConfiguration(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    checkout_to_draft: Optional[Boolean] = Field(None, alias="checkoutToDraft")
    editable_shipping_address: Optional[Boolean] = Field(None, alias="editableShippingAddress")
    pay_now_only: Optional[Boolean] = Field(None, alias="payNowOnly")
    payment_terms_template: Optional[PaymentTermsTemplate] = Field(None, alias="paymentTermsTemplate")
    typename__: Optional[Literal["BuyerExperienceConfiguration"]] = Field(
        "BuyerExperienceConfiguration", alias="__typename"
    )


class CalculatedAutomaticDiscountApplication(CalculatedDiscountApplication):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocation_method: Optional[DiscountApplicationAllocationMethod] = Field(None, alias="allocationMethod")
    applied_to: Optional[DiscountApplicationLevel] = Field(None, alias="appliedTo")
    description: Optional[String] = None
    id: Optional[ID] = None
    target_selection: Optional[DiscountApplicationTargetSelection] = Field(None, alias="targetSelection")
    target_type: Optional[DiscountApplicationTargetType] = Field(None, alias="targetType")
    value: Optional[PricingValue] = None
    typename__: Optional[Literal["CalculatedAutomaticDiscountApplication"]] = Field(
        "CalculatedAutomaticDiscountApplication", alias="__typename"
    )


class CalculatedDiscountAllocation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocated_amount_set: Optional[MoneyBag] = Field(None, alias="allocatedAmountSet")
    discount_application: Optional[CalculatedDiscountApplication] = Field(None, alias="discountApplication")
    typename__: Optional[Literal["CalculatedDiscountAllocation"]] = Field(
        "CalculatedDiscountAllocation", alias="__typename"
    )


class CalculatedDiscountApplicationConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CalculatedDiscountApplicationEdge] = Field(default_factory=list)
    nodes: list[CalculatedDiscountApplication] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CalculatedDiscountApplicationConnection"]] = Field(
        "CalculatedDiscountApplicationConnection", alias="__typename"
    )


class CalculatedDiscountApplicationEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CalculatedDiscountApplication] = None
    typename__: Optional[Literal["CalculatedDiscountApplicationEdge"]] = Field(
        "CalculatedDiscountApplicationEdge", alias="__typename"
    )


class CalculatedDiscountCodeApplication(CalculatedDiscountApplication):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocation_method: Optional[DiscountApplicationAllocationMethod] = Field(None, alias="allocationMethod")
    applied_to: Optional[DiscountApplicationLevel] = Field(None, alias="appliedTo")
    code: Optional[String] = None
    description: Optional[String] = None
    id: Optional[ID] = None
    target_selection: Optional[DiscountApplicationTargetSelection] = Field(None, alias="targetSelection")
    target_type: Optional[DiscountApplicationTargetType] = Field(None, alias="targetType")
    value: Optional[PricingValue] = None
    typename__: Optional[Literal["CalculatedDiscountCodeApplication"]] = Field(
        "CalculatedDiscountCodeApplication", alias="__typename"
    )


class CalculatedDraftOrder(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accept_automatic_discounts: Optional[Boolean] = Field(None, alias="acceptAutomaticDiscounts")
    alerts: list[ResourceAlert] = Field(default_factory=list)
    applied_discount: Optional[DraftOrderAppliedDiscount] = Field(None, alias="appliedDiscount")
    available_shipping_rates: list[ShippingRate] = Field(default_factory=list, alias="availableShippingRates")
    billing_address_matches_shipping_address: Optional[Boolean] = Field(
        None, alias="billingAddressMatchesShippingAddress"
    )
    currency_code: Optional[CurrencyCode] = Field(None, alias="currencyCode")
    customer: Optional[Customer] = None
    discount_codes: list[String] = Field(default_factory=list, alias="discountCodes")
    line_items: list[CalculatedDraftOrderLineItem] = Field(default_factory=list, alias="lineItems")
    line_items_subtotal_price: Optional[MoneyBag] = Field(None, alias="lineItemsSubtotalPrice")
    market_name: Optional[String] = Field(None, alias="marketName")
    market_region_country_code: Optional[CountryCode] = Field(None, alias="marketRegionCountryCode")
    phone: Optional[String] = None
    platform_discounts: list[DraftOrderPlatformDiscount] = Field(default_factory=list, alias="platformDiscounts")
    presentment_currency_code: Optional[CurrencyCode] = Field(None, alias="presentmentCurrencyCode")
    purchasing_entity: Optional[PurchasingEntity] = Field(None, alias="purchasingEntity")
    shipping_line: Optional[ShippingLine] = Field(None, alias="shippingLine")
    subtotal_price: Optional[Money] = Field(None, alias="subtotalPrice")
    subtotal_price_set: Optional[MoneyBag] = Field(None, alias="subtotalPriceSet")
    tax_lines: list[TaxLine] = Field(default_factory=list, alias="taxLines")
    taxes_included: Optional[Boolean] = Field(None, alias="taxesIncluded")
    total_discounts_set: Optional[MoneyBag] = Field(None, alias="totalDiscountsSet")
    total_line_items_price_set: Optional[MoneyBag] = Field(None, alias="totalLineItemsPriceSet")
    total_price: Optional[Money] = Field(None, alias="totalPrice")
    total_price_set: Optional[MoneyBag] = Field(None, alias="totalPriceSet")
    total_quantity_of_line_items: Optional[Int] = Field(None, alias="totalQuantityOfLineItems")
    total_shipping_price: Optional[Money] = Field(None, alias="totalShippingPrice")
    total_shipping_price_set: Optional[MoneyBag] = Field(None, alias="totalShippingPriceSet")
    total_tax: Optional[Money] = Field(None, alias="totalTax")
    total_tax_set: Optional[MoneyBag] = Field(None, alias="totalTaxSet")
    transformer_fingerprint: Optional[String] = Field(None, alias="transformerFingerprint")
    warnings: list[DraftOrderWarning] = Field(default_factory=list)
    typename__: Optional[Literal["CalculatedDraftOrder"]] = Field("CalculatedDraftOrder", alias="__typename")


class CalculatedDraftOrderLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applied_discount: Optional[DraftOrderAppliedDiscount] = Field(None, alias="appliedDiscount")
    approximate_discounted_unit_price_set: Optional[MoneyBag] = Field(None, alias="approximateDiscountedUnitPriceSet")
    bundle_components: list[CalculatedDraftOrderLineItem] = Field(default_factory=list, alias="bundleComponents")
    custom: Optional[Boolean] = None
    custom_attributes: list[Attribute] = Field(default_factory=list, alias="customAttributes")
    custom_attributes_v2: list[TypedAttribute] = Field(default_factory=list, alias="customAttributesV2")
    discounted_total: Optional[MoneyV2] = Field(None, alias="discountedTotal")
    discounted_total_set: Optional[MoneyBag] = Field(None, alias="discountedTotalSet")
    discounted_unit_price: Optional[MoneyV2] = Field(None, alias="discountedUnitPrice")
    discounted_unit_price_set: Optional[MoneyBag] = Field(None, alias="discountedUnitPriceSet")
    fulfillment_service: Optional[FulfillmentService] = Field(None, alias="fulfillmentService")
    image: Optional[Image] = None
    is_gift_card: Optional[Boolean] = Field(None, alias="isGiftCard")
    name: Optional[String] = None
    original_total: Optional[MoneyV2] = Field(None, alias="originalTotal")
    original_total_set: Optional[MoneyBag] = Field(None, alias="originalTotalSet")
    original_unit_price: Optional[MoneyV2] = Field(None, alias="originalUnitPrice")
    original_unit_price_set: Optional[MoneyBag] = Field(None, alias="originalUnitPriceSet")
    original_unit_price_with_currency: Optional[MoneyV2] = Field(None, alias="originalUnitPriceWithCurrency")
    product: Optional[Product] = None
    quantity: Optional[Int] = None
    requires_shipping: Optional[Boolean] = Field(None, alias="requiresShipping")
    sku: Optional[String] = None
    taxable: Optional[Boolean] = None
    title: Optional[String] = None
    total_discount: Optional[MoneyV2] = Field(None, alias="totalDiscount")
    total_discount_set: Optional[MoneyBag] = Field(None, alias="totalDiscountSet")
    uuid: Optional[String] = None
    variant: Optional[ProductVariant] = None
    variant_title: Optional[String] = Field(None, alias="variantTitle")
    vendor: Optional[String] = None
    weight: Optional[Weight] = None
    typename__: Optional[Literal["CalculatedDraftOrderLineItem"]] = Field(
        "CalculatedDraftOrderLineItem", alias="__typename"
    )


class CalculatedExchangeLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    calculated_discount_allocations: list[CalculatedDiscountAllocation] = Field(
        default_factory=list, alias="calculatedDiscountAllocations"
    )
    discounted_unit_price_set: Optional[MoneyBag] = Field(None, alias="discountedUnitPriceSet")
    id: Optional[ID] = None
    original_unit_price_set: Optional[MoneyBag] = Field(None, alias="originalUnitPriceSet")
    quantity: Optional[Int] = None
    subtotal_set: Optional[MoneyBag] = Field(None, alias="subtotalSet")
    total_tax_set: Optional[MoneyBag] = Field(None, alias="totalTaxSet")
    variant: Optional[ProductVariant] = None
    typename__: Optional[Literal["CalculatedExchangeLineItem"]] = Field(
        "CalculatedExchangeLineItem", alias="__typename"
    )


class CalculatedLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    calculated_discount_allocations: list[CalculatedDiscountAllocation] = Field(
        default_factory=list, alias="calculatedDiscountAllocations"
    )
    custom_attributes: list[Attribute] = Field(default_factory=list, alias="customAttributes")
    discount_allocations: list[DiscountAllocation] = Field(default_factory=list, alias="discountAllocations")
    discounted_unit_price_set: Optional[MoneyBag] = Field(None, alias="discountedUnitPriceSet")
    editable_quantity: Optional[Int] = Field(None, alias="editableQuantity")
    editable_quantity_before_changes: Optional[Int] = Field(None, alias="editableQuantityBeforeChanges")
    editable_subtotal_set: Optional[MoneyBag] = Field(None, alias="editableSubtotalSet")
    has_staged_line_item_discount: Optional[Boolean] = Field(None, alias="hasStagedLineItemDiscount")
    id: Optional[ID] = None
    image: Optional[Image] = None
    original_unit_price_set: Optional[MoneyBag] = Field(None, alias="originalUnitPriceSet")
    quantity: Optional[Int] = None
    restockable: Optional[Boolean] = None
    restocking: Optional[Boolean] = None
    sku: Optional[String] = None
    staged_changes: list[OrderStagedChange] = Field(default_factory=list, alias="stagedChanges")
    title: Optional[String] = None
    uneditable_subtotal_set: Optional[MoneyBag] = Field(None, alias="uneditableSubtotalSet")
    variant: Optional[ProductVariant] = None
    variant_title: Optional[String] = Field(None, alias="variantTitle")
    typename__: Optional[Literal["CalculatedLineItem"]] = Field("CalculatedLineItem", alias="__typename")


class CalculatedLineItemConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CalculatedLineItemEdge] = Field(default_factory=list)
    nodes: list[CalculatedLineItem] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CalculatedLineItemConnection"]] = Field(
        "CalculatedLineItemConnection", alias="__typename"
    )


class CalculatedLineItemEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CalculatedLineItem] = None
    typename__: Optional[Literal["CalculatedLineItemEdge"]] = Field("CalculatedLineItemEdge", alias="__typename")


class CalculatedManualDiscountApplication(CalculatedDiscountApplication):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocation_method: Optional[DiscountApplicationAllocationMethod] = Field(None, alias="allocationMethod")
    applied_to: Optional[DiscountApplicationLevel] = Field(None, alias="appliedTo")
    description: Optional[String] = None
    id: Optional[ID] = None
    target_selection: Optional[DiscountApplicationTargetSelection] = Field(None, alias="targetSelection")
    target_type: Optional[DiscountApplicationTargetType] = Field(None, alias="targetType")
    value: Optional[PricingValue] = None
    typename__: Optional[Literal["CalculatedManualDiscountApplication"]] = Field(
        "CalculatedManualDiscountApplication", alias="__typename"
    )


class CalculatedOrder(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    added_discount_applications: Optional[CalculatedDiscountApplicationConnection] = Field(
        None, alias="addedDiscountApplications"
    )
    added_line_items: Optional[CalculatedLineItemConnection] = Field(None, alias="addedLineItems")
    cart_discount_amount_set: Optional[MoneyBag] = Field(None, alias="cartDiscountAmountSet")
    committed: Optional[Boolean] = None
    id: Optional[ID] = None
    line_items: Optional[CalculatedLineItemConnection] = Field(None, alias="lineItems")
    notification_preview_html: Optional[HTML] = Field(None, alias="notificationPreviewHtml")
    notification_preview_title: Optional[String] = Field(None, alias="notificationPreviewTitle")
    original_order: Optional[Order] = Field(None, alias="originalOrder")
    shipping_lines: list[CalculatedShippingLine] = Field(default_factory=list, alias="shippingLines")
    staged_changes: Optional[OrderStagedChangeConnection] = Field(None, alias="stagedChanges")
    subtotal_line_items_quantity: Optional[Int] = Field(None, alias="subtotalLineItemsQuantity")
    subtotal_price_set: Optional[MoneyBag] = Field(None, alias="subtotalPriceSet")
    tax_lines: list[TaxLine] = Field(default_factory=list, alias="taxLines")
    total_outstanding_set: Optional[MoneyBag] = Field(None, alias="totalOutstandingSet")
    total_price_set: Optional[MoneyBag] = Field(None, alias="totalPriceSet")
    typename__: Optional[Literal["CalculatedOrder"]] = Field("CalculatedOrder", alias="__typename")


class CalculatedRestockingFee(CalculatedReturnFee):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount_set: Optional[MoneyBag] = Field(None, alias="amountSet")
    id: Optional[ID] = None
    percentage: Optional[Float] = None
    typename__: Optional[Literal["CalculatedRestockingFee"]] = Field("CalculatedRestockingFee", alias="__typename")


class CalculatedReturn(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    exchange_line_items: list[CalculatedExchangeLineItem] = Field(default_factory=list, alias="exchangeLineItems")
    id: Optional[ID] = None
    return_line_items: list[CalculatedReturnLineItem] = Field(default_factory=list, alias="returnLineItems")
    return_shipping_fee: Optional[CalculatedReturnShippingFee] = Field(None, alias="returnShippingFee")
    typename__: Optional[Literal["CalculatedReturn"]] = Field("CalculatedReturn", alias="__typename")


class CalculatedReturnLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_line_item: Optional[FulfillmentLineItem] = Field(None, alias="fulfillmentLineItem")
    id: Optional[ID] = None
    quantity: Optional[Int] = None
    restocking_fee: Optional[CalculatedRestockingFee] = Field(None, alias="restockingFee")
    subtotal_before_order_discounts_set: Optional[MoneyBag] = Field(None, alias="subtotalBeforeOrderDiscountsSet")
    subtotal_set: Optional[MoneyBag] = Field(None, alias="subtotalSet")
    total_tax_set: Optional[MoneyBag] = Field(None, alias="totalTaxSet")
    typename__: Optional[Literal["CalculatedReturnLineItem"]] = Field("CalculatedReturnLineItem", alias="__typename")


class CalculatedReturnShippingFee(CalculatedReturnFee):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount_set: Optional[MoneyBag] = Field(None, alias="amountSet")
    id: Optional[ID] = None
    typename__: Optional[Literal["CalculatedReturnShippingFee"]] = Field(
        "CalculatedReturnShippingFee", alias="__typename"
    )


class CalculatedScriptDiscountApplication(CalculatedDiscountApplication):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocation_method: Optional[DiscountApplicationAllocationMethod] = Field(None, alias="allocationMethod")
    applied_to: Optional[DiscountApplicationLevel] = Field(None, alias="appliedTo")
    description: Optional[String] = None
    id: Optional[ID] = None
    target_selection: Optional[DiscountApplicationTargetSelection] = Field(None, alias="targetSelection")
    target_type: Optional[DiscountApplicationTargetType] = Field(None, alias="targetType")
    value: Optional[PricingValue] = None
    typename__: Optional[Literal["CalculatedScriptDiscountApplication"]] = Field(
        "CalculatedScriptDiscountApplication", alias="__typename"
    )


class CalculatedShippingLine(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    price: Optional[MoneyBag] = None
    staged_status: Optional[CalculatedShippingLineStagedStatus] = Field(None, alias="stagedStatus")
    title: Optional[String] = None
    typename__: Optional[Literal["CalculatedShippingLine"]] = Field("CalculatedShippingLine", alias="__typename")


class CardPaymentDetails(BasePaymentDetails):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    avs_result_code: Optional[String] = Field(None, alias="avsResultCode")
    bin: Optional[String] = None
    company: Optional[String] = None
    cvv_result_code: Optional[String] = Field(None, alias="cvvResultCode")
    expiration_month: Optional[Int] = Field(None, alias="expirationMonth")
    expiration_year: Optional[Int] = Field(None, alias="expirationYear")
    name: Optional[String] = None
    number: Optional[String] = None
    payment_method_name: Optional[String] = Field(None, alias="paymentMethodName")
    wallet: Optional[DigitalWallet] = None
    typename__: Optional[Literal["CardPaymentDetails"]] = Field("CardPaymentDetails", alias="__typename")


class CarrierServiceCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    carrier_service: Optional[DeliveryCarrierService] = Field(None, alias="carrierService")
    user_errors: list[CarrierServiceCreateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CarrierServiceCreatePayload"]] = Field(
        "CarrierServiceCreatePayload", alias="__typename"
    )


class CarrierServiceCreateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CarrierServiceCreateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CarrierServiceCreateUserError"]] = Field(
        "CarrierServiceCreateUserError", alias="__typename"
    )


class CarrierServiceDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[CarrierServiceDeleteUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CarrierServiceDeletePayload"]] = Field(
        "CarrierServiceDeletePayload", alias="__typename"
    )


class CarrierServiceDeleteUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CarrierServiceDeleteUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CarrierServiceDeleteUserError"]] = Field(
        "CarrierServiceDeleteUserError", alias="__typename"
    )


class CarrierServiceUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    carrier_service: Optional[DeliveryCarrierService] = Field(None, alias="carrierService")
    user_errors: list[CarrierServiceUpdateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CarrierServiceUpdatePayload"]] = Field(
        "CarrierServiceUpdatePayload", alias="__typename"
    )


class CarrierServiceUpdateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CarrierServiceUpdateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CarrierServiceUpdateUserError"]] = Field(
        "CarrierServiceUpdateUserError", alias="__typename"
    )


class CartTransform(HasMetafields, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    block_on_failure: Optional[Boolean] = Field(None, alias="blockOnFailure")
    function_id: Optional[String] = Field(None, alias="functionId")
    id: Optional[ID] = None
    metafield: Optional[Metafield] = None
    metafields: Optional[MetafieldConnection] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    typename__: Optional[Literal["CartTransform"]] = Field("CartTransform", alias="__typename")


class CartTransformConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CartTransformEdge] = Field(default_factory=list)
    nodes: list[CartTransform] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CartTransformConnection"]] = Field("CartTransformConnection", alias="__typename")


class CartTransformCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cart_transform: Optional[CartTransform] = Field(None, alias="cartTransform")
    user_errors: list[CartTransformCreateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CartTransformCreatePayload"]] = Field(
        "CartTransformCreatePayload", alias="__typename"
    )


class CartTransformCreateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CartTransformCreateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CartTransformCreateUserError"]] = Field(
        "CartTransformCreateUserError", alias="__typename"
    )


class CartTransformDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[CartTransformDeleteUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CartTransformDeletePayload"]] = Field(
        "CartTransformDeletePayload", alias="__typename"
    )


class CartTransformDeleteUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CartTransformDeleteUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CartTransformDeleteUserError"]] = Field(
        "CartTransformDeleteUserError", alias="__typename"
    )


class CartTransformEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CartTransform] = None
    typename__: Optional[Literal["CartTransformEdge"]] = Field("CartTransformEdge", alias="__typename")


class CartTransformEligibleOperations(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    expand_operation: Optional[Boolean] = Field(None, alias="expandOperation")
    merge_operation: Optional[Boolean] = Field(None, alias="mergeOperation")
    update_operation: Optional[Boolean] = Field(None, alias="updateOperation")
    typename__: Optional[Literal["CartTransformEligibleOperations"]] = Field(
        "CartTransformEligibleOperations", alias="__typename"
    )


class CartTransformFeature(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    eligible_operations: Optional[CartTransformEligibleOperations] = Field(None, alias="eligibleOperations")
    typename__: Optional[Literal["CartTransformFeature"]] = Field("CartTransformFeature", alias="__typename")


class CashTrackingAdjustment(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cash: Optional[MoneyV2] = None
    id: Optional[ID] = None
    note: Optional[String] = None
    staff_member: Optional[StaffMember] = Field(None, alias="staffMember")
    time: Optional[DateTime] = None
    typename__: Optional[Literal["CashTrackingAdjustment"]] = Field("CashTrackingAdjustment", alias="__typename")


class CashTrackingAdjustmentConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CashTrackingAdjustmentEdge] = Field(default_factory=list)
    nodes: list[CashTrackingAdjustment] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CashTrackingAdjustmentConnection"]] = Field(
        "CashTrackingAdjustmentConnection", alias="__typename"
    )


class CashTrackingAdjustmentEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CashTrackingAdjustment] = None
    typename__: Optional[Literal["CashTrackingAdjustmentEdge"]] = Field(
        "CashTrackingAdjustmentEdge", alias="__typename"
    )


class CashTrackingSession(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    adjustments: Optional[CashTrackingAdjustmentConnection] = None
    cash_tracking_enabled: Optional[Boolean] = Field(None, alias="cashTrackingEnabled")
    cash_transactions: Optional[OrderTransactionConnection] = Field(None, alias="cashTransactions")
    closing_balance: Optional[MoneyV2] = Field(None, alias="closingBalance")
    closing_note: Optional[String] = Field(None, alias="closingNote")
    closing_staff_member: Optional[StaffMember] = Field(None, alias="closingStaffMember")
    closing_time: Optional[DateTime] = Field(None, alias="closingTime")
    expected_balance: Optional[MoneyV2] = Field(None, alias="expectedBalance")
    expected_closing_balance: Optional[MoneyV2] = Field(None, alias="expectedClosingBalance")
    expected_opening_balance: Optional[MoneyV2] = Field(None, alias="expectedOpeningBalance")
    id: Optional[ID] = None
    location: Optional[Location] = None
    net_cash_sales: Optional[MoneyV2] = Field(None, alias="netCashSales")
    opening_balance: Optional[MoneyV2] = Field(None, alias="openingBalance")
    opening_note: Optional[String] = Field(None, alias="openingNote")
    opening_staff_member: Optional[StaffMember] = Field(None, alias="openingStaffMember")
    opening_time: Optional[DateTime] = Field(None, alias="openingTime")
    register_name: Optional[String] = Field(None, alias="registerName")
    total_adjustments: Optional[MoneyV2] = Field(None, alias="totalAdjustments")
    total_cash_refunds: Optional[MoneyV2] = Field(None, alias="totalCashRefunds")
    total_cash_sales: Optional[MoneyV2] = Field(None, alias="totalCashSales")
    total_discrepancy: Optional[MoneyV2] = Field(None, alias="totalDiscrepancy")
    typename__: Optional[Literal["CashTrackingSession"]] = Field("CashTrackingSession", alias="__typename")


class CashTrackingSessionConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CashTrackingSessionEdge] = Field(default_factory=list)
    nodes: list[CashTrackingSession] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CashTrackingSessionConnection"]] = Field(
        "CashTrackingSessionConnection", alias="__typename"
    )


class CashTrackingSessionEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CashTrackingSession] = None
    typename__: Optional[Literal["CashTrackingSessionEdge"]] = Field("CashTrackingSessionEdge", alias="__typename")


class CatalogConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CatalogEdge] = Field(default_factory=list)
    nodes: list[Catalog] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CatalogConnection"]] = Field("CatalogConnection", alias="__typename")


class CatalogContextUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    catalog: Optional[Catalog] = None
    user_errors: list[CatalogUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CatalogContextUpdatePayload"]] = Field(
        "CatalogContextUpdatePayload", alias="__typename"
    )


class CatalogCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    catalog: Optional[Catalog] = None
    user_errors: list[CatalogUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CatalogCreatePayload"]] = Field("CatalogCreatePayload", alias="__typename")


class CatalogCsvOperation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    processed_row_count: Optional[Int] = Field(None, alias="processedRowCount")
    row_count: Optional[RowCount] = Field(None, alias="rowCount")
    status: Optional[ResourceOperationStatus] = None
    typename__: Optional[Literal["CatalogCsvOperation"]] = Field("CatalogCsvOperation", alias="__typename")


class CatalogDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[CatalogUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CatalogDeletePayload"]] = Field("CatalogDeletePayload", alias="__typename")


class CatalogEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Catalog] = None
    typename__: Optional[Literal["CatalogEdge"]] = Field("CatalogEdge", alias="__typename")


class CatalogUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    catalog: Optional[Catalog] = None
    user_errors: list[CatalogUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CatalogUpdatePayload"]] = Field("CatalogUpdatePayload", alias="__typename")


class CatalogUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CatalogUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CatalogUserError"]] = Field("CatalogUserError", alias="__typename")


class Channel(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    collection_publications_v3: Optional[ResourcePublicationConnection] = Field(None, alias="collectionPublicationsV3")
    collections: Optional[CollectionConnection] = None
    handle: Optional[String] = None
    has_collection: Optional[Boolean] = Field(None, alias="hasCollection")
    id: Optional[ID] = None
    name: Optional[String] = None
    navigation_items: list[NavigationItem] = Field(default_factory=list, alias="navigationItems")
    overview_path: Optional[URL] = Field(None, alias="overviewPath")
    product_publications: Optional[ProductPublicationConnection] = Field(None, alias="productPublications")
    product_publications_v3: Optional[ResourcePublicationConnection] = Field(None, alias="productPublicationsV3")
    products: Optional[ProductConnection] = None
    products_count: Optional[Count] = Field(None, alias="productsCount")
    supports_future_publishing: Optional[Boolean] = Field(None, alias="supportsFuturePublishing")
    typename__: Optional[Literal["Channel"]] = Field("Channel", alias="__typename")


class ChannelConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ChannelEdge] = Field(default_factory=list)
    nodes: list[Channel] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ChannelConnection"]] = Field("ChannelConnection", alias="__typename")


class ChannelDefinition(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    channel_name: Optional[String] = Field(None, alias="channelName")
    handle: Optional[String] = None
    id: Optional[ID] = None
    is_marketplace: Optional[Boolean] = Field(None, alias="isMarketplace")
    sub_channel_name: Optional[String] = Field(None, alias="subChannelName")
    svg_icon: Optional[String] = Field(None, alias="svgIcon")
    typename__: Optional[Literal["ChannelDefinition"]] = Field("ChannelDefinition", alias="__typename")


class ChannelEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Channel] = None
    typename__: Optional[Literal["ChannelEdge"]] = Field("ChannelEdge", alias="__typename")


class ChannelInformation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    channel_definition: Optional[ChannelDefinition] = Field(None, alias="channelDefinition")
    channel_id: Optional[ID] = Field(None, alias="channelId")
    id: Optional[ID] = None
    typename__: Optional[Literal["ChannelInformation"]] = Field("ChannelInformation", alias="__typename")


class CheckoutBranding(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customizations: Optional[CheckoutBrandingCustomizations] = None
    design_system: Optional[CheckoutBrandingDesignSystem] = Field(None, alias="designSystem")
    typename__: Optional[Literal["CheckoutBranding"]] = Field("CheckoutBranding", alias="__typename")


class CheckoutBrandingButton(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    background: Optional[CheckoutBrandingBackgroundStyle] = None
    block_padding: Optional[CheckoutBrandingSpacing] = Field(None, alias="blockPadding")
    border: Optional[CheckoutBrandingSimpleBorder] = None
    corner_radius: Optional[CheckoutBrandingCornerRadius] = Field(None, alias="cornerRadius")
    inline_padding: Optional[CheckoutBrandingSpacing] = Field(None, alias="inlinePadding")
    typography: Optional[CheckoutBrandingTypographyStyle] = None
    typename__: Optional[Literal["CheckoutBrandingButton"]] = Field("CheckoutBrandingButton", alias="__typename")


class CheckoutBrandingButtonColorRoles(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accent: Optional[String] = None
    background: Optional[String] = None
    border: Optional[String] = None
    decorative: Optional[String] = None
    hover: Optional[CheckoutBrandingColorRoles] = None
    icon: Optional[String] = None
    text: Optional[String] = None
    typename__: Optional[Literal["CheckoutBrandingButtonColorRoles"]] = Field(
        "CheckoutBrandingButtonColorRoles", alias="__typename"
    )


class CheckoutBrandingBuyerJourney(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    visibility: Optional[CheckoutBrandingVisibility] = None
    typename__: Optional[Literal["CheckoutBrandingBuyerJourney"]] = Field(
        "CheckoutBrandingBuyerJourney", alias="__typename"
    )


class CheckoutBrandingCartLink(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    visibility: Optional[CheckoutBrandingVisibility] = None
    typename__: Optional[Literal["CheckoutBrandingCartLink"]] = Field("CheckoutBrandingCartLink", alias="__typename")


class CheckoutBrandingCheckbox(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    corner_radius: Optional[CheckoutBrandingCornerRadius] = Field(None, alias="cornerRadius")
    typename__: Optional[Literal["CheckoutBrandingCheckbox"]] = Field("CheckoutBrandingCheckbox", alias="__typename")


class CheckoutBrandingChoiceList(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    group: Optional[CheckoutBrandingChoiceListGroup] = None
    typename__: Optional[Literal["CheckoutBrandingChoiceList"]] = Field(
        "CheckoutBrandingChoiceList", alias="__typename"
    )


class CheckoutBrandingChoiceListGroup(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    spacing: Optional[CheckoutBrandingSpacingKeyword] = None
    typename__: Optional[Literal["CheckoutBrandingChoiceListGroup"]] = Field(
        "CheckoutBrandingChoiceListGroup", alias="__typename"
    )


class CheckoutBrandingColorGlobal(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accent: Optional[String] = None
    brand: Optional[String] = None
    critical: Optional[String] = None
    decorative: Optional[String] = None
    info: Optional[String] = None
    success: Optional[String] = None
    warning: Optional[String] = None
    typename__: Optional[Literal["CheckoutBrandingColorGlobal"]] = Field(
        "CheckoutBrandingColorGlobal", alias="__typename"
    )


class CheckoutBrandingColorRoles(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accent: Optional[String] = None
    background: Optional[String] = None
    border: Optional[String] = None
    decorative: Optional[String] = None
    icon: Optional[String] = None
    text: Optional[String] = None
    typename__: Optional[Literal["CheckoutBrandingColorRoles"]] = Field(
        "CheckoutBrandingColorRoles", alias="__typename"
    )


class CheckoutBrandingColorScheme(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    base: Optional[CheckoutBrandingColorRoles] = None
    control: Optional[CheckoutBrandingControlColorRoles] = None
    primary_button: Optional[CheckoutBrandingButtonColorRoles] = Field(None, alias="primaryButton")
    secondary_button: Optional[CheckoutBrandingButtonColorRoles] = Field(None, alias="secondaryButton")
    typename__: Optional[Literal["CheckoutBrandingColorScheme"]] = Field(
        "CheckoutBrandingColorScheme", alias="__typename"
    )


class CheckoutBrandingColorSchemes(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    scheme1: Optional[CheckoutBrandingColorScheme] = None
    scheme2: Optional[CheckoutBrandingColorScheme] = None
    scheme3: Optional[CheckoutBrandingColorScheme] = None
    scheme4: Optional[CheckoutBrandingColorScheme] = None
    typename__: Optional[Literal["CheckoutBrandingColorSchemes"]] = Field(
        "CheckoutBrandingColorSchemes", alias="__typename"
    )


class CheckoutBrandingColors(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    global_: Optional[CheckoutBrandingColorGlobal] = Field(None, alias="global")
    schemes: Optional[CheckoutBrandingColorSchemes] = None
    typename__: Optional[Literal["CheckoutBrandingColors"]] = Field("CheckoutBrandingColors", alias="__typename")


class CheckoutBrandingContainerDivider(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    border_style: Optional[CheckoutBrandingBorderStyle] = Field(None, alias="borderStyle")
    border_width: Optional[CheckoutBrandingBorderWidth] = Field(None, alias="borderWidth")
    visibility: Optional[CheckoutBrandingVisibility] = None
    typename__: Optional[Literal["CheckoutBrandingContainerDivider"]] = Field(
        "CheckoutBrandingContainerDivider", alias="__typename"
    )


class CheckoutBrandingContent(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    divider: Optional[CheckoutBrandingContainerDivider] = None
    typename__: Optional[Literal["CheckoutBrandingContent"]] = Field("CheckoutBrandingContent", alias="__typename")


class CheckoutBrandingControl(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    border: Optional[CheckoutBrandingSimpleBorder] = None
    color: Optional[CheckoutBrandingColorSelection] = None
    corner_radius: Optional[CheckoutBrandingCornerRadius] = Field(None, alias="cornerRadius")
    label_position: Optional[CheckoutBrandingLabelPosition] = Field(None, alias="labelPosition")
    typename__: Optional[Literal["CheckoutBrandingControl"]] = Field("CheckoutBrandingControl", alias="__typename")


class CheckoutBrandingControlColorRoles(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accent: Optional[String] = None
    background: Optional[String] = None
    border: Optional[String] = None
    decorative: Optional[String] = None
    icon: Optional[String] = None
    selected: Optional[CheckoutBrandingColorRoles] = None
    text: Optional[String] = None
    typename__: Optional[Literal["CheckoutBrandingControlColorRoles"]] = Field(
        "CheckoutBrandingControlColorRoles", alias="__typename"
    )


class CheckoutBrandingCornerRadiusVariables(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    base: Optional[Int] = None
    large: Optional[Int] = None
    small: Optional[Int] = None
    typename__: Optional[Literal["CheckoutBrandingCornerRadiusVariables"]] = Field(
        "CheckoutBrandingCornerRadiusVariables", alias="__typename"
    )


class CheckoutBrandingCustomFont(CheckoutBrandingFont):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    generic_file_id: Optional[ID] = Field(None, alias="genericFileId")
    sources: Optional[String] = None
    weight: Optional[Int] = None
    typename__: Optional[Literal["CheckoutBrandingCustomFont"]] = Field(
        "CheckoutBrandingCustomFont", alias="__typename"
    )


class CheckoutBrandingCustomizations(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    buyer_journey: Optional[CheckoutBrandingBuyerJourney] = Field(None, alias="buyerJourney")
    cart_link: Optional[CheckoutBrandingCartLink] = Field(None, alias="cartLink")
    checkbox: Optional[CheckoutBrandingCheckbox] = None
    choice_list: Optional[CheckoutBrandingChoiceList] = Field(None, alias="choiceList")
    content: Optional[CheckoutBrandingContent] = None
    control: Optional[CheckoutBrandingControl] = None
    divider: Optional[CheckoutBrandingDividerStyle] = None
    express_checkout: Optional[CheckoutBrandingExpressCheckout] = Field(None, alias="expressCheckout")
    favicon: Optional[CheckoutBrandingImage] = None
    footer: Optional[CheckoutBrandingFooter] = None
    global_: Optional[CheckoutBrandingGlobal] = Field(None, alias="global")
    header: Optional[CheckoutBrandingHeader] = None
    heading_level1: Optional[CheckoutBrandingHeadingLevel] = Field(None, alias="headingLevel1")
    heading_level2: Optional[CheckoutBrandingHeadingLevel] = Field(None, alias="headingLevel2")
    heading_level3: Optional[CheckoutBrandingHeadingLevel] = Field(None, alias="headingLevel3")
    main: Optional[CheckoutBrandingMain] = None
    merchandise_thumbnail: Optional[CheckoutBrandingMerchandiseThumbnail] = Field(None, alias="merchandiseThumbnail")
    order_summary: Optional[CheckoutBrandingOrderSummary] = Field(None, alias="orderSummary")
    primary_button: Optional[CheckoutBrandingButton] = Field(None, alias="primaryButton")
    secondary_button: Optional[CheckoutBrandingButton] = Field(None, alias="secondaryButton")
    select: Optional[CheckoutBrandingSelect] = None
    text_field: Optional[CheckoutBrandingTextField] = Field(None, alias="textField")
    typename__: Optional[Literal["CheckoutBrandingCustomizations"]] = Field(
        "CheckoutBrandingCustomizations", alias="__typename"
    )


class CheckoutBrandingDesignSystem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    colors: Optional[CheckoutBrandingColors] = None
    corner_radius: Optional[CheckoutBrandingCornerRadiusVariables] = Field(None, alias="cornerRadius")
    typography: Optional[CheckoutBrandingTypography] = None
    typename__: Optional[Literal["CheckoutBrandingDesignSystem"]] = Field(
        "CheckoutBrandingDesignSystem", alias="__typename"
    )


class CheckoutBrandingDividerStyle(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    border_style: Optional[CheckoutBrandingBorderStyle] = Field(None, alias="borderStyle")
    border_width: Optional[CheckoutBrandingBorderWidth] = Field(None, alias="borderWidth")
    typename__: Optional[Literal["CheckoutBrandingDividerStyle"]] = Field(
        "CheckoutBrandingDividerStyle", alias="__typename"
    )


class CheckoutBrandingExpressCheckout(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    button: Optional[CheckoutBrandingExpressCheckoutButton] = None
    typename__: Optional[Literal["CheckoutBrandingExpressCheckout"]] = Field(
        "CheckoutBrandingExpressCheckout", alias="__typename"
    )


class CheckoutBrandingExpressCheckoutButton(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    corner_radius: Optional[CheckoutBrandingCornerRadius] = Field(None, alias="cornerRadius")
    typename__: Optional[Literal["CheckoutBrandingExpressCheckoutButton"]] = Field(
        "CheckoutBrandingExpressCheckoutButton", alias="__typename"
    )


class CheckoutBrandingFontGroup(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    base: Optional[CheckoutBrandingFont] = None
    bold: Optional[CheckoutBrandingFont] = None
    loading_strategy: Optional[CheckoutBrandingFontLoadingStrategy] = Field(None, alias="loadingStrategy")
    name: Optional[String] = None
    typename__: Optional[Literal["CheckoutBrandingFontGroup"]] = Field("CheckoutBrandingFontGroup", alias="__typename")


class CheckoutBrandingFontSize(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    base: Optional[Float] = None
    ratio: Optional[Float] = None
    typename__: Optional[Literal["CheckoutBrandingFontSize"]] = Field("CheckoutBrandingFontSize", alias="__typename")


class CheckoutBrandingFooter(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alignment: Optional[CheckoutBrandingFooterAlignment] = None
    color_scheme: Optional[CheckoutBrandingColorSchemeSelection] = Field(None, alias="colorScheme")
    content: Optional[CheckoutBrandingFooterContent] = None
    divided: Optional[Boolean] = None
    padding: Optional[CheckoutBrandingSpacingKeyword] = None
    position: Optional[CheckoutBrandingFooterPosition] = None
    typename__: Optional[Literal["CheckoutBrandingFooter"]] = Field("CheckoutBrandingFooter", alias="__typename")


class CheckoutBrandingFooterContent(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    visibility: Optional[CheckoutBrandingVisibility] = None
    typename__: Optional[Literal["CheckoutBrandingFooterContent"]] = Field(
        "CheckoutBrandingFooterContent", alias="__typename"
    )


class CheckoutBrandingGlobal(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    corner_radius: Optional[CheckoutBrandingGlobalCornerRadius] = Field(None, alias="cornerRadius")
    typography: Optional[CheckoutBrandingTypographyStyleGlobal] = None
    typename__: Optional[Literal["CheckoutBrandingGlobal"]] = Field("CheckoutBrandingGlobal", alias="__typename")


class CheckoutBrandingHeader(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alignment: Optional[CheckoutBrandingHeaderAlignment] = None
    banner: Optional[CheckoutBrandingImage] = None
    cart_link: Optional[CheckoutBrandingHeaderCartLink] = Field(None, alias="cartLink")
    color_scheme: Optional[CheckoutBrandingColorSchemeSelection] = Field(None, alias="colorScheme")
    divided: Optional[Boolean] = None
    logo: Optional[CheckoutBrandingLogo] = None
    padding: Optional[CheckoutBrandingSpacingKeyword] = None
    position: Optional[CheckoutBrandingHeaderPosition] = None
    typename__: Optional[Literal["CheckoutBrandingHeader"]] = Field("CheckoutBrandingHeader", alias="__typename")


class CheckoutBrandingHeaderCartLink(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content_type: Optional[CheckoutBrandingCartLinkContentType] = Field(None, alias="contentType")
    image: Optional[Image] = None
    typename__: Optional[Literal["CheckoutBrandingHeaderCartLink"]] = Field(
        "CheckoutBrandingHeaderCartLink", alias="__typename"
    )


class CheckoutBrandingHeadingLevel(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    typography: Optional[CheckoutBrandingTypographyStyle] = None
    typename__: Optional[Literal["CheckoutBrandingHeadingLevel"]] = Field(
        "CheckoutBrandingHeadingLevel", alias="__typename"
    )


class CheckoutBrandingImage(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    image: Optional[Image] = None
    typename__: Optional[Literal["CheckoutBrandingImage"]] = Field("CheckoutBrandingImage", alias="__typename")


class CheckoutBrandingLogo(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    image: Optional[Image] = None
    max_width: Optional[Int] = Field(None, alias="maxWidth")
    visibility: Optional[CheckoutBrandingVisibility] = None
    typename__: Optional[Literal["CheckoutBrandingLogo"]] = Field("CheckoutBrandingLogo", alias="__typename")


class CheckoutBrandingMain(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    background_image: Optional[CheckoutBrandingImage] = Field(None, alias="backgroundImage")
    color_scheme: Optional[CheckoutBrandingColorSchemeSelection] = Field(None, alias="colorScheme")
    divider: Optional[CheckoutBrandingContainerDivider] = None
    section: Optional[CheckoutBrandingMainSection] = None
    typename__: Optional[Literal["CheckoutBrandingMain"]] = Field("CheckoutBrandingMain", alias="__typename")


class CheckoutBrandingMainSection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    background: Optional[CheckoutBrandingBackground] = None
    border: Optional[CheckoutBrandingSimpleBorder] = None
    border_style: Optional[CheckoutBrandingBorderStyle] = Field(None, alias="borderStyle")
    border_width: Optional[CheckoutBrandingBorderWidth] = Field(None, alias="borderWidth")
    color_scheme: Optional[CheckoutBrandingColorSchemeSelection] = Field(None, alias="colorScheme")
    corner_radius: Optional[CheckoutBrandingCornerRadius] = Field(None, alias="cornerRadius")
    padding: Optional[CheckoutBrandingSpacingKeyword] = None
    shadow: Optional[CheckoutBrandingShadow] = None
    typename__: Optional[Literal["CheckoutBrandingMainSection"]] = Field(
        "CheckoutBrandingMainSection", alias="__typename"
    )


class CheckoutBrandingMerchandiseThumbnail(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    border: Optional[CheckoutBrandingSimpleBorder] = None
    corner_radius: Optional[CheckoutBrandingCornerRadius] = Field(None, alias="cornerRadius")
    typename__: Optional[Literal["CheckoutBrandingMerchandiseThumbnail"]] = Field(
        "CheckoutBrandingMerchandiseThumbnail", alias="__typename"
    )


class CheckoutBrandingOrderSummary(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    background_image: Optional[CheckoutBrandingImage] = Field(None, alias="backgroundImage")
    color_scheme: Optional[CheckoutBrandingColorSchemeSelection] = Field(None, alias="colorScheme")
    divider: Optional[CheckoutBrandingContainerDivider] = None
    section: Optional[CheckoutBrandingOrderSummarySection] = None
    typename__: Optional[Literal["CheckoutBrandingOrderSummary"]] = Field(
        "CheckoutBrandingOrderSummary", alias="__typename"
    )


class CheckoutBrandingOrderSummarySection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    background: Optional[CheckoutBrandingBackground] = None
    border: Optional[CheckoutBrandingSimpleBorder] = None
    border_style: Optional[CheckoutBrandingBorderStyle] = Field(None, alias="borderStyle")
    border_width: Optional[CheckoutBrandingBorderWidth] = Field(None, alias="borderWidth")
    color_scheme: Optional[CheckoutBrandingColorSchemeSelection] = Field(None, alias="colorScheme")
    corner_radius: Optional[CheckoutBrandingCornerRadius] = Field(None, alias="cornerRadius")
    padding: Optional[CheckoutBrandingSpacingKeyword] = None
    shadow: Optional[CheckoutBrandingShadow] = None
    typename__: Optional[Literal["CheckoutBrandingOrderSummarySection"]] = Field(
        "CheckoutBrandingOrderSummarySection", alias="__typename"
    )


class CheckoutBrandingSelect(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    border: Optional[CheckoutBrandingBorder] = None
    typography: Optional[CheckoutBrandingTypographyStyle] = None
    typename__: Optional[Literal["CheckoutBrandingSelect"]] = Field("CheckoutBrandingSelect", alias="__typename")


class CheckoutBrandingShopifyFont(CheckoutBrandingFont):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    sources: Optional[String] = None
    weight: Optional[Int] = None
    typename__: Optional[Literal["CheckoutBrandingShopifyFont"]] = Field(
        "CheckoutBrandingShopifyFont", alias="__typename"
    )


class CheckoutBrandingTextField(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    border: Optional[CheckoutBrandingBorder] = None
    typography: Optional[CheckoutBrandingTypographyStyle] = None
    typename__: Optional[Literal["CheckoutBrandingTextField"]] = Field("CheckoutBrandingTextField", alias="__typename")


class CheckoutBrandingTypography(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    primary: Optional[CheckoutBrandingFontGroup] = None
    secondary: Optional[CheckoutBrandingFontGroup] = None
    size: Optional[CheckoutBrandingFontSize] = None
    typename__: Optional[Literal["CheckoutBrandingTypography"]] = Field(
        "CheckoutBrandingTypography", alias="__typename"
    )


class CheckoutBrandingTypographyStyle(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    font: Optional[CheckoutBrandingTypographyFont] = None
    kerning: Optional[CheckoutBrandingTypographyKerning] = None
    letter_case: Optional[CheckoutBrandingTypographyLetterCase] = Field(None, alias="letterCase")
    size: Optional[CheckoutBrandingTypographySize] = None
    weight: Optional[CheckoutBrandingTypographyWeight] = None
    typename__: Optional[Literal["CheckoutBrandingTypographyStyle"]] = Field(
        "CheckoutBrandingTypographyStyle", alias="__typename"
    )


class CheckoutBrandingTypographyStyleGlobal(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kerning: Optional[CheckoutBrandingTypographyKerning] = None
    letter_case: Optional[CheckoutBrandingTypographyLetterCase] = Field(None, alias="letterCase")
    typename__: Optional[Literal["CheckoutBrandingTypographyStyleGlobal"]] = Field(
        "CheckoutBrandingTypographyStyleGlobal", alias="__typename"
    )


class CheckoutBrandingUpsertPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    checkout_branding: Optional[CheckoutBranding] = Field(None, alias="checkoutBranding")
    user_errors: list[CheckoutBrandingUpsertUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CheckoutBrandingUpsertPayload"]] = Field(
        "CheckoutBrandingUpsertPayload", alias="__typename"
    )


class CheckoutBrandingUpsertUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CheckoutBrandingUpsertUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CheckoutBrandingUpsertUserError"]] = Field(
        "CheckoutBrandingUpsertUserError", alias="__typename"
    )


class CheckoutProfile(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    edited_at: Optional[DateTime] = Field(None, alias="editedAt")
    id: Optional[ID] = None
    is_published: Optional[Boolean] = Field(None, alias="isPublished")
    name: Optional[String] = None
    typ_osp_pages_active: Optional[Boolean] = Field(None, alias="typOspPagesActive")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["CheckoutProfile"]] = Field("CheckoutProfile", alias="__typename")


class CheckoutProfileConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CheckoutProfileEdge] = Field(default_factory=list)
    nodes: list[CheckoutProfile] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CheckoutProfileConnection"]] = Field("CheckoutProfileConnection", alias="__typename")


class CheckoutProfileEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CheckoutProfile] = None
    typename__: Optional[Literal["CheckoutProfileEdge"]] = Field("CheckoutProfileEdge", alias="__typename")


class Collection(HasMetafieldDefinitions, HasMetafields, HasPublishedTranslations, Node, Publishable):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    available_publications_count: Optional[Count] = Field(None, alias="availablePublicationsCount")
    description: Optional[String] = None
    description_html: Optional[HTML] = Field(None, alias="descriptionHtml")
    feedback: Optional[ResourceFeedback] = None
    handle: Optional[String] = None
    has_product: Optional[Boolean] = Field(None, alias="hasProduct")
    id: Optional[ID] = None
    image: Optional[Image] = None
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    products: Optional[ProductConnection] = None
    products_count: Optional[Count] = Field(None, alias="productsCount")
    publication_count: Optional[Int] = Field(None, alias="publicationCount")
    publications: Optional[CollectionPublicationConnection] = None
    published_on_channel: Optional[Boolean] = Field(None, alias="publishedOnChannel")
    published_on_current_channel: Optional[Boolean] = Field(None, alias="publishedOnCurrentChannel")
    published_on_current_publication: Optional[Boolean] = Field(None, alias="publishedOnCurrentPublication")
    published_on_publication: Optional[Boolean] = Field(None, alias="publishedOnPublication")
    resource_publications: Optional[ResourcePublicationConnection] = Field(None, alias="resourcePublications")
    resource_publications_count: Optional[Count] = Field(None, alias="resourcePublicationsCount")
    resource_publications_v2: Optional[ResourcePublicationV2Connection] = Field(None, alias="resourcePublicationsV2")
    rule_set: Optional[CollectionRuleSet] = Field(None, alias="ruleSet")
    seo: Optional[SEO] = None
    sort_order: Optional[CollectionSortOrder] = Field(None, alias="sortOrder")
    storefront_id: Optional[StorefrontID] = Field(None, alias="storefrontId")
    template_suffix: Optional[String] = Field(None, alias="templateSuffix")
    title: Optional[String] = None
    translations: list[Translation] = Field(default_factory=list)
    unpublished_channels: Optional[ChannelConnection] = Field(None, alias="unpublishedChannels")
    unpublished_publications: Optional[PublicationConnection] = Field(None, alias="unpublishedPublications")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["Collection"]] = Field("Collection", alias="__typename")


class CollectionAddProductsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    collection: Optional[Collection] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CollectionAddProductsPayload"]] = Field(
        "CollectionAddProductsPayload", alias="__typename"
    )


class CollectionAddProductsV2Payload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[CollectionAddProductsV2UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CollectionAddProductsV2Payload"]] = Field(
        "CollectionAddProductsV2Payload", alias="__typename"
    )


class CollectionAddProductsV2UserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CollectionAddProductsV2UserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CollectionAddProductsV2UserError"]] = Field(
        "CollectionAddProductsV2UserError", alias="__typename"
    )


class CollectionConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CollectionEdge] = Field(default_factory=list)
    nodes: list[Collection] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CollectionConnection"]] = Field("CollectionConnection", alias="__typename")


class CollectionCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    collection: Optional[Collection] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CollectionCreatePayload"]] = Field("CollectionCreatePayload", alias="__typename")


class CollectionDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_collection_id: Optional[ID] = Field(None, alias="deletedCollectionId")
    shop: Optional[Shop] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CollectionDeletePayload"]] = Field("CollectionDeletePayload", alias="__typename")


class CollectionEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Collection] = None
    typename__: Optional[Literal["CollectionEdge"]] = Field("CollectionEdge", alias="__typename")


class CollectionPublication(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    channel: Optional[Channel] = None
    collection: Optional[Collection] = None
    is_published: Optional[Boolean] = Field(None, alias="isPublished")
    publication: Optional[Publication] = None
    publish_date: Optional[DateTime] = Field(None, alias="publishDate")
    typename__: Optional[Literal["CollectionPublication"]] = Field("CollectionPublication", alias="__typename")


class CollectionPublicationConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CollectionPublicationEdge] = Field(default_factory=list)
    nodes: list[CollectionPublication] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CollectionPublicationConnection"]] = Field(
        "CollectionPublicationConnection", alias="__typename"
    )


class CollectionPublicationEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CollectionPublication] = None
    typename__: Optional[Literal["CollectionPublicationEdge"]] = Field("CollectionPublicationEdge", alias="__typename")


class CollectionPublishPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    collection: Optional[Collection] = None
    collection_publications: Optional[list[CollectionPublication]] = Field(
        default_factory=list, alias="collectionPublications"
    )
    shop: Optional[Shop] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CollectionPublishPayload"]] = Field("CollectionPublishPayload", alias="__typename")


class CollectionRemoveProductsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CollectionRemoveProductsPayload"]] = Field(
        "CollectionRemoveProductsPayload", alias="__typename"
    )


class CollectionReorderProductsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CollectionReorderProductsPayload"]] = Field(
        "CollectionReorderProductsPayload", alias="__typename"
    )


class CollectionRule(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    column: Optional[CollectionRuleColumn] = None
    condition: Optional[String] = None
    condition_object: Optional[CollectionRuleConditionObject] = Field(None, alias="conditionObject")
    relation: Optional[CollectionRuleRelation] = None
    typename__: Optional[Literal["CollectionRule"]] = Field("CollectionRule", alias="__typename")


class CollectionRuleConditions(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allowed_relations: list[CollectionRuleRelation] = Field(default_factory=list, alias="allowedRelations")
    default_relation: Optional[CollectionRuleRelation] = Field(None, alias="defaultRelation")
    rule_object: Optional[CollectionRuleConditionsRuleObject] = Field(None, alias="ruleObject")
    rule_type: Optional[CollectionRuleColumn] = Field(None, alias="ruleType")
    typename__: Optional[Literal["CollectionRuleConditions"]] = Field("CollectionRuleConditions", alias="__typename")


class CollectionRuleMetafieldCondition(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    metafield_definition: Optional[MetafieldDefinition] = Field(None, alias="metafieldDefinition")
    typename__: Optional[Literal["CollectionRuleMetafieldCondition"]] = Field(
        "CollectionRuleMetafieldCondition", alias="__typename"
    )


class CollectionRuleProductCategoryCondition(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    value: Optional[ProductTaxonomyNode] = None
    typename__: Optional[Literal["CollectionRuleProductCategoryCondition"]] = Field(
        "CollectionRuleProductCategoryCondition", alias="__typename"
    )


class CollectionRuleSet(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applied_disjunctively: Optional[Boolean] = Field(None, alias="appliedDisjunctively")
    rules: list[CollectionRule] = Field(default_factory=list)
    typename__: Optional[Literal["CollectionRuleSet"]] = Field("CollectionRuleSet", alias="__typename")


class CollectionRuleTextCondition(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    value: Optional[String] = None
    typename__: Optional[Literal["CollectionRuleTextCondition"]] = Field(
        "CollectionRuleTextCondition", alias="__typename"
    )


class CollectionUnpublishPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    collection: Optional[Collection] = None
    shop: Optional[Shop] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CollectionUnpublishPayload"]] = Field(
        "CollectionUnpublishPayload", alias="__typename"
    )


class CollectionUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    collection: Optional[Collection] = None
    job: Optional[Job] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CollectionUpdatePayload"]] = Field("CollectionUpdatePayload", alias="__typename")


class CombinedListing(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    combined_listing_children: Optional[CombinedListingChildConnection] = Field(None, alias="combinedListingChildren")
    parent_product: Optional[Product] = Field(None, alias="parentProduct")
    typename__: Optional[Literal["CombinedListing"]] = Field("CombinedListing", alias="__typename")


class CombinedListingChild(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    parent_variant: Optional[ProductVariant] = Field(None, alias="parentVariant")
    product: Optional[Product] = None
    typename__: Optional[Literal["CombinedListingChild"]] = Field("CombinedListingChild", alias="__typename")


class CombinedListingChildConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CombinedListingChildEdge] = Field(default_factory=list)
    nodes: list[CombinedListingChild] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CombinedListingChildConnection"]] = Field(
        "CombinedListingChildConnection", alias="__typename"
    )


class CombinedListingChildEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CombinedListingChild] = None
    typename__: Optional[Literal["CombinedListingChildEdge"]] = Field("CombinedListingChildEdge", alias="__typename")


class CombinedListingUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    user_errors: list[CombinedListingUpdateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CombinedListingUpdatePayload"]] = Field(
        "CombinedListingUpdatePayload", alias="__typename"
    )


class CombinedListingUpdateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CombinedListingUpdateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CombinedListingUpdateUserError"]] = Field(
        "CombinedListingUpdateUserError", alias="__typename"
    )


class CommentEvent(Event, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_title: Optional[String] = Field(None, alias="appTitle")
    attachments: list[CommentEventAttachment] = Field(default_factory=list)
    attribute_to_app: Optional[Boolean] = Field(None, alias="attributeToApp")
    attribute_to_user: Optional[Boolean] = Field(None, alias="attributeToUser")
    author: Optional[StaffMember] = None
    can_delete: Optional[Boolean] = Field(None, alias="canDelete")
    can_edit: Optional[Boolean] = Field(None, alias="canEdit")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    critical_alert: Optional[Boolean] = Field(None, alias="criticalAlert")
    edited: Optional[Boolean] = None
    embed: Optional[CommentEventEmbed] = None
    id: Optional[ID] = None
    message: Optional[FormattedString] = None
    raw_message: Optional[String] = Field(None, alias="rawMessage")
    subject: Optional[CommentEventSubject] = None
    typename__: Optional[Literal["CommentEvent"]] = Field("CommentEvent", alias="__typename")


class CommentEventAttachment(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    file_extension: Optional[String] = Field(None, alias="fileExtension")
    id: Optional[ID] = None
    image: Optional[Image] = None
    name: Optional[String] = None
    size: Optional[Int] = None
    url: Optional[URL] = None
    typename__: Optional[Literal["CommentEventAttachment"]] = Field("CommentEventAttachment", alias="__typename")


class CompaniesDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_company_ids: Optional[list[ID]] = Field(default_factory=list, alias="deletedCompanyIds")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompaniesDeletePayload"]] = Field("CompaniesDeletePayload", alias="__typename")


class Company(
    CommentEventSubject,
    HasEvents,
    HasMetafieldDefinitions,
    HasMetafields,
    Navigable,
    Node,
):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contact_count: Optional[Int] = Field(None, alias="contactCount")
    contact_roles: Optional[CompanyContactRoleConnection] = Field(None, alias="contactRoles")
    contacts: Optional[CompanyContactConnection] = None
    contacts_count: Optional[Count] = Field(None, alias="contactsCount")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    customer_since: Optional[DateTime] = Field(None, alias="customerSince")
    default_cursor: Optional[String] = Field(None, alias="defaultCursor")
    default_role: Optional[CompanyContactRole] = Field(None, alias="defaultRole")
    draft_orders: Optional[DraftOrderConnection] = Field(None, alias="draftOrders")
    events: Optional[EventConnection] = None
    external_id: Optional[String] = Field(None, alias="externalId")
    has_timeline_comment: Optional[Boolean] = Field(None, alias="hasTimelineComment")
    id: Optional[ID] = None
    lifetime_duration: Optional[String] = Field(None, alias="lifetimeDuration")
    locations: Optional[CompanyLocationConnection] = None
    locations_count: Optional[Count] = Field(None, alias="locationsCount")
    main_contact: Optional[CompanyContact] = Field(None, alias="mainContact")
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    name: Optional[String] = None
    note: Optional[String] = None
    orders: Optional[OrderConnection] = None
    orders_count: Optional[Count] = Field(None, alias="ordersCount")
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    total_spent: Optional[MoneyV2] = Field(None, alias="totalSpent")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["Company"]] = Field("Company", alias="__typename")


class CompanyAddress(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    address2: Optional[String] = None
    city: Optional[String] = None
    company_name: Optional[String] = Field(None, alias="companyName")
    country: Optional[String] = None
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    first_name: Optional[String] = Field(None, alias="firstName")
    formatted_address: list[String] = Field(default_factory=list, alias="formattedAddress")
    formatted_area: Optional[String] = Field(None, alias="formattedArea")
    id: Optional[ID] = None
    last_name: Optional[String] = Field(None, alias="lastName")
    phone: Optional[String] = None
    province: Optional[String] = None
    recipient: Optional[String] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    zip: Optional[String] = None
    zone_code: Optional[String] = Field(None, alias="zoneCode")
    typename__: Optional[Literal["CompanyAddress"]] = Field("CompanyAddress", alias="__typename")


class CompanyAddressDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_address_id: Optional[ID] = Field(None, alias="deletedAddressId")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyAddressDeletePayload"]] = Field(
        "CompanyAddressDeletePayload", alias="__typename"
    )


class CompanyAssignCustomerAsContactPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_contact: Optional[CompanyContact] = Field(None, alias="companyContact")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyAssignCustomerAsContactPayload"]] = Field(
        "CompanyAssignCustomerAsContactPayload", alias="__typename"
    )


class CompanyAssignMainContactPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company: Optional[Company] = None
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyAssignMainContactPayload"]] = Field(
        "CompanyAssignMainContactPayload", alias="__typename"
    )


class CompanyConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CompanyEdge] = Field(default_factory=list)
    nodes: list[Company] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CompanyConnection"]] = Field("CompanyConnection", alias="__typename")


class CompanyContact(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company: Optional[Company] = None
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    customer: Optional[Customer] = None
    draft_orders: Optional[DraftOrderConnection] = Field(None, alias="draftOrders")
    id: Optional[ID] = None
    is_main_contact: Optional[Boolean] = Field(None, alias="isMainContact")
    lifetime_duration: Optional[String] = Field(None, alias="lifetimeDuration")
    locale: Optional[String] = None
    orders: Optional[OrderConnection] = None
    role_assignments: Optional[CompanyContactRoleAssignmentConnection] = Field(None, alias="roleAssignments")
    title: Optional[String] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["CompanyContact"]] = Field("CompanyContact", alias="__typename")


class CompanyContactAssignRolePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_contact_role_assignment: Optional[CompanyContactRoleAssignment] = Field(
        None, alias="companyContactRoleAssignment"
    )
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyContactAssignRolePayload"]] = Field(
        "CompanyContactAssignRolePayload", alias="__typename"
    )


class CompanyContactAssignRolesPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    role_assignments: Optional[list[CompanyContactRoleAssignment]] = Field(
        default_factory=list, alias="roleAssignments"
    )
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyContactAssignRolesPayload"]] = Field(
        "CompanyContactAssignRolesPayload", alias="__typename"
    )


class CompanyContactConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CompanyContactEdge] = Field(default_factory=list)
    nodes: list[CompanyContact] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CompanyContactConnection"]] = Field("CompanyContactConnection", alias="__typename")


class CompanyContactCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_contact: Optional[CompanyContact] = Field(None, alias="companyContact")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyContactCreatePayload"]] = Field(
        "CompanyContactCreatePayload", alias="__typename"
    )


class CompanyContactDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_company_contact_id: Optional[ID] = Field(None, alias="deletedCompanyContactId")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyContactDeletePayload"]] = Field(
        "CompanyContactDeletePayload", alias="__typename"
    )


class CompanyContactEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CompanyContact] = None
    typename__: Optional[Literal["CompanyContactEdge"]] = Field("CompanyContactEdge", alias="__typename")


class CompanyContactRemoveFromCompanyPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    removed_company_contact_id: Optional[ID] = Field(None, alias="removedCompanyContactId")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyContactRemoveFromCompanyPayload"]] = Field(
        "CompanyContactRemoveFromCompanyPayload", alias="__typename"
    )


class CompanyContactRevokeRolePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    revoked_company_contact_role_assignment_id: Optional[ID] = Field(
        None, alias="revokedCompanyContactRoleAssignmentId"
    )
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyContactRevokeRolePayload"]] = Field(
        "CompanyContactRevokeRolePayload", alias="__typename"
    )


class CompanyContactRevokeRolesPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    revoked_role_assignment_ids: Optional[list[ID]] = Field(default_factory=list, alias="revokedRoleAssignmentIds")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyContactRevokeRolesPayload"]] = Field(
        "CompanyContactRevokeRolesPayload", alias="__typename"
    )


class CompanyContactRole(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    name: Optional[String] = None
    note: Optional[String] = None
    typename__: Optional[Literal["CompanyContactRole"]] = Field("CompanyContactRole", alias="__typename")


class CompanyContactRoleAssignment(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company: Optional[Company] = None
    company_contact: Optional[CompanyContact] = Field(None, alias="companyContact")
    company_location: Optional[CompanyLocation] = Field(None, alias="companyLocation")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    id: Optional[ID] = None
    role: Optional[CompanyContactRole] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["CompanyContactRoleAssignment"]] = Field(
        "CompanyContactRoleAssignment", alias="__typename"
    )


class CompanyContactRoleAssignmentConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CompanyContactRoleAssignmentEdge] = Field(default_factory=list)
    nodes: list[CompanyContactRoleAssignment] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CompanyContactRoleAssignmentConnection"]] = Field(
        "CompanyContactRoleAssignmentConnection", alias="__typename"
    )


class CompanyContactRoleAssignmentEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CompanyContactRoleAssignment] = None
    typename__: Optional[Literal["CompanyContactRoleAssignmentEdge"]] = Field(
        "CompanyContactRoleAssignmentEdge", alias="__typename"
    )


class CompanyContactRoleConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CompanyContactRoleEdge] = Field(default_factory=list)
    nodes: list[CompanyContactRole] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CompanyContactRoleConnection"]] = Field(
        "CompanyContactRoleConnection", alias="__typename"
    )


class CompanyContactRoleEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CompanyContactRole] = None
    typename__: Optional[Literal["CompanyContactRoleEdge"]] = Field("CompanyContactRoleEdge", alias="__typename")


class CompanyContactSendWelcomeEmailPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_contact: Optional[CompanyContact] = Field(None, alias="companyContact")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyContactSendWelcomeEmailPayload"]] = Field(
        "CompanyContactSendWelcomeEmailPayload", alias="__typename"
    )


class CompanyContactUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_contact: Optional[CompanyContact] = Field(None, alias="companyContact")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyContactUpdatePayload"]] = Field(
        "CompanyContactUpdatePayload", alias="__typename"
    )


class CompanyContactsDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_company_contact_ids: Optional[list[ID]] = Field(default_factory=list, alias="deletedCompanyContactIds")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyContactsDeletePayload"]] = Field(
        "CompanyContactsDeletePayload", alias="__typename"
    )


class CompanyCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company: Optional[Company] = None
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyCreatePayload"]] = Field("CompanyCreatePayload", alias="__typename")


class CompanyDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_company_id: Optional[ID] = Field(None, alias="deletedCompanyId")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyDeletePayload"]] = Field("CompanyDeletePayload", alias="__typename")


class CompanyEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Company] = None
    typename__: Optional[Literal["CompanyEdge"]] = Field("CompanyEdge", alias="__typename")


class CompanyLocation(
    CommentEventSubject,
    HasEvents,
    HasMetafieldDefinitions,
    HasMetafields,
    Navigable,
    Node,
):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_address: Optional[CompanyAddress] = Field(None, alias="billingAddress")
    buyer_experience_configuration: Optional[BuyerExperienceConfiguration] = Field(
        None, alias="buyerExperienceConfiguration"
    )
    catalogs: Optional[CatalogConnection] = None
    catalogs_count: Optional[Count] = Field(None, alias="catalogsCount")
    company: Optional[Company] = None
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    currency: Optional[CurrencyCode] = None
    default_cursor: Optional[String] = Field(None, alias="defaultCursor")
    draft_orders: Optional[DraftOrderConnection] = Field(None, alias="draftOrders")
    events: Optional[EventConnection] = None
    external_id: Optional[String] = Field(None, alias="externalId")
    has_timeline_comment: Optional[Boolean] = Field(None, alias="hasTimelineComment")
    id: Optional[ID] = None
    in_catalog: Optional[Boolean] = Field(None, alias="inCatalog")
    locale: Optional[String] = None
    market: Optional[Market] = None
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    name: Optional[String] = None
    note: Optional[String] = None
    order_count: Optional[Int] = Field(None, alias="orderCount")
    orders: Optional[OrderConnection] = None
    orders_count: Optional[Count] = Field(None, alias="ordersCount")
    phone: Optional[String] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    role_assignments: Optional[CompanyContactRoleAssignmentConnection] = Field(None, alias="roleAssignments")
    shipping_address: Optional[CompanyAddress] = Field(None, alias="shippingAddress")
    tax_exemptions: list[TaxExemption] = Field(default_factory=list, alias="taxExemptions")
    tax_registration_id: Optional[String] = Field(None, alias="taxRegistrationId")
    total_spent: Optional[MoneyV2] = Field(None, alias="totalSpent")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["CompanyLocation"]] = Field("CompanyLocation", alias="__typename")


class CompanyLocationAssignAddressPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    addresses: Optional[list[CompanyAddress]] = Field(default_factory=list)
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyLocationAssignAddressPayload"]] = Field(
        "CompanyLocationAssignAddressPayload", alias="__typename"
    )


class CompanyLocationAssignRolesPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    role_assignments: Optional[list[CompanyContactRoleAssignment]] = Field(
        default_factory=list, alias="roleAssignments"
    )
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyLocationAssignRolesPayload"]] = Field(
        "CompanyLocationAssignRolesPayload", alias="__typename"
    )


class CompanyLocationAssignTaxExemptionsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_location: Optional[CompanyLocation] = Field(None, alias="companyLocation")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyLocationAssignTaxExemptionsPayload"]] = Field(
        "CompanyLocationAssignTaxExemptionsPayload", alias="__typename"
    )


class CompanyLocationConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CompanyLocationEdge] = Field(default_factory=list)
    nodes: list[CompanyLocation] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CompanyLocationConnection"]] = Field("CompanyLocationConnection", alias="__typename")


class CompanyLocationCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_location: Optional[CompanyLocation] = Field(None, alias="companyLocation")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyLocationCreatePayload"]] = Field(
        "CompanyLocationCreatePayload", alias="__typename"
    )


class CompanyLocationCreateTaxRegistrationPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_location: Optional[CompanyLocation] = Field(None, alias="companyLocation")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyLocationCreateTaxRegistrationPayload"]] = Field(
        "CompanyLocationCreateTaxRegistrationPayload", alias="__typename"
    )


class CompanyLocationDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_company_location_id: Optional[ID] = Field(None, alias="deletedCompanyLocationId")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyLocationDeletePayload"]] = Field(
        "CompanyLocationDeletePayload", alias="__typename"
    )


class CompanyLocationEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CompanyLocation] = None
    typename__: Optional[Literal["CompanyLocationEdge"]] = Field("CompanyLocationEdge", alias="__typename")


class CompanyLocationRevokeRolesPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    revoked_role_assignment_ids: Optional[list[ID]] = Field(default_factory=list, alias="revokedRoleAssignmentIds")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyLocationRevokeRolesPayload"]] = Field(
        "CompanyLocationRevokeRolesPayload", alias="__typename"
    )


class CompanyLocationRevokeTaxExemptionsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_location: Optional[CompanyLocation] = Field(None, alias="companyLocation")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyLocationRevokeTaxExemptionsPayload"]] = Field(
        "CompanyLocationRevokeTaxExemptionsPayload", alias="__typename"
    )


class CompanyLocationRevokeTaxRegistrationPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_location: Optional[CompanyLocation] = Field(None, alias="companyLocation")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyLocationRevokeTaxRegistrationPayload"]] = Field(
        "CompanyLocationRevokeTaxRegistrationPayload", alias="__typename"
    )


class CompanyLocationUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_location: Optional[CompanyLocation] = Field(None, alias="companyLocation")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyLocationUpdatePayload"]] = Field(
        "CompanyLocationUpdatePayload", alias="__typename"
    )


class CompanyLocationsDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_company_location_ids: Optional[list[ID]] = Field(default_factory=list, alias="deletedCompanyLocationIds")
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyLocationsDeletePayload"]] = Field(
        "CompanyLocationsDeletePayload", alias="__typename"
    )


class CompanyRevokeMainContactPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company: Optional[Company] = None
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyRevokeMainContactPayload"]] = Field(
        "CompanyRevokeMainContactPayload", alias="__typename"
    )


class CompanyUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company: Optional[Company] = None
    user_errors: list[BusinessCustomerUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CompanyUpdatePayload"]] = Field("CompanyUpdatePayload", alias="__typename")


class Count(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    count: Optional[Int] = None
    precision: Optional[CountPrecision] = None
    typename__: Optional[Literal["Count"]] = Field("Count", alias="__typename")


class CountriesInShippingZones(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country_codes: list[CountryCode] = Field(default_factory=list, alias="countryCodes")
    include_rest_of_world: Optional[Boolean] = Field(None, alias="includeRestOfWorld")
    typename__: Optional[Literal["CountriesInShippingZones"]] = Field("CountriesInShippingZones", alias="__typename")


class CountryHarmonizedSystemCode(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    harmonized_system_code: Optional[String] = Field(None, alias="harmonizedSystemCode")
    typename__: Optional[Literal["CountryHarmonizedSystemCode"]] = Field(
        "CountryHarmonizedSystemCode", alias="__typename"
    )


class CountryHarmonizedSystemCodeConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CountryHarmonizedSystemCodeEdge] = Field(default_factory=list)
    nodes: list[CountryHarmonizedSystemCode] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CountryHarmonizedSystemCodeConnection"]] = Field(
        "CountryHarmonizedSystemCodeConnection", alias="__typename"
    )


class CountryHarmonizedSystemCodeEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CountryHarmonizedSystemCode] = None
    typename__: Optional[Literal["CountryHarmonizedSystemCodeEdge"]] = Field(
        "CountryHarmonizedSystemCodeEdge", alias="__typename"
    )


class CurrencyFormats(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    money_format: Optional[FormattedString] = Field(None, alias="moneyFormat")
    money_in_emails_format: Optional[String] = Field(None, alias="moneyInEmailsFormat")
    money_with_currency_format: Optional[FormattedString] = Field(None, alias="moneyWithCurrencyFormat")
    money_with_currency_in_emails_format: Optional[String] = Field(None, alias="moneyWithCurrencyInEmailsFormat")
    typename__: Optional[Literal["CurrencyFormats"]] = Field("CurrencyFormats", alias="__typename")


class CurrencySetting(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    currency_code: Optional[CurrencyCode] = Field(None, alias="currencyCode")
    currency_name: Optional[String] = Field(None, alias="currencyName")
    enabled: Optional[Boolean] = None
    rate_updated_at: Optional[DateTime] = Field(None, alias="rateUpdatedAt")
    typename__: Optional[Literal["CurrencySetting"]] = Field("CurrencySetting", alias="__typename")


class CurrencySettingConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CurrencySettingEdge] = Field(default_factory=list)
    nodes: list[CurrencySetting] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CurrencySettingConnection"]] = Field("CurrencySettingConnection", alias="__typename")


class CurrencySettingEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CurrencySetting] = None
    typename__: Optional[Literal["CurrencySettingEdge"]] = Field("CurrencySettingEdge", alias="__typename")


class Customer(
    CommentEventSubject,
    HasEvents,
    HasMetafieldDefinitions,
    HasMetafields,
    HasStoreCreditAccounts,
    LegacyInteroperability,
    Node,
):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    addresses: list[MailingAddress] = Field(default_factory=list)
    amount_spent: Optional[MoneyV2] = Field(None, alias="amountSpent")
    can_delete: Optional[Boolean] = Field(None, alias="canDelete")
    company_contact_profiles: list[CompanyContact] = Field(default_factory=list, alias="companyContactProfiles")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    data_sale_opt_out: Optional[Boolean] = Field(None, alias="dataSaleOptOut")
    default_address: Optional[MailingAddress] = Field(None, alias="defaultAddress")
    display_name: Optional[String] = Field(None, alias="displayName")
    email: Optional[String] = None
    email_marketing_consent: Optional[CustomerEmailMarketingConsentState] = Field(None, alias="emailMarketingConsent")
    events: Optional[EventConnection] = None
    first_name: Optional[String] = Field(None, alias="firstName")
    has_timeline_comment: Optional[Boolean] = Field(None, alias="hasTimelineComment")
    id: Optional[ID] = None
    image: Optional[Image] = None
    last_name: Optional[String] = Field(None, alias="lastName")
    last_order: Optional[Order] = Field(None, alias="lastOrder")
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    lifetime_duration: Optional[String] = Field(None, alias="lifetimeDuration")
    locale: Optional[String] = None
    market: Optional[Market] = None
    mergeable: Optional[CustomerMergeable] = None
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    multipass_identifier: Optional[String] = Field(None, alias="multipassIdentifier")
    note: Optional[String] = None
    number_of_orders: Optional[UnsignedInt64] = Field(None, alias="numberOfOrders")
    orders: Optional[OrderConnection] = None
    payment_methods: Optional[CustomerPaymentMethodConnection] = Field(None, alias="paymentMethods")
    phone: Optional[String] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    product_subscriber_status: Optional[CustomerProductSubscriberStatus] = Field(None, alias="productSubscriberStatus")
    sms_marketing_consent: Optional[CustomerSmsMarketingConsentState] = Field(None, alias="smsMarketingConsent")
    state: Optional[CustomerState] = None
    statistics: Optional[CustomerStatistics] = None
    store_credit_accounts: Optional[StoreCreditAccountConnection] = Field(None, alias="storeCreditAccounts")
    subscription_contracts: Optional[SubscriptionContractConnection] = Field(None, alias="subscriptionContracts")
    tags: list[String] = Field(default_factory=list)
    tax_exempt: Optional[Boolean] = Field(None, alias="taxExempt")
    tax_exemptions: list[TaxExemption] = Field(default_factory=list, alias="taxExemptions")
    unsubscribe_url: Optional[URL] = Field(None, alias="unsubscribeUrl")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    valid_email_address: Optional[Boolean] = Field(None, alias="validEmailAddress")
    verified_email: Optional[Boolean] = Field(None, alias="verifiedEmail")
    typename__: Optional[Literal["Customer"]] = Field("Customer", alias="__typename")


class CustomerAccountsV2(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_accounts_version: Optional[CustomerAccountsVersion] = Field(None, alias="customerAccountsVersion")
    login_links_visible_on_storefront_and_checkout: Optional[Boolean] = Field(
        None, alias="loginLinksVisibleOnStorefrontAndCheckout"
    )
    login_required_at_checkout: Optional[Boolean] = Field(None, alias="loginRequiredAtCheckout")
    url: Optional[URL] = None
    typename__: Optional[Literal["CustomerAccountsV2"]] = Field("CustomerAccountsV2", alias="__typename")


class CustomerAddTaxExemptionsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer: Optional[Customer] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerAddTaxExemptionsPayload"]] = Field(
        "CustomerAddTaxExemptionsPayload", alias="__typename"
    )


class CustomerCancelDataErasurePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_id: Optional[ID] = Field(None, alias="customerId")
    user_errors: list[CustomerCancelDataErasureUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerCancelDataErasurePayload"]] = Field(
        "CustomerCancelDataErasurePayload", alias="__typename"
    )


class CustomerCancelDataErasureUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CustomerCancelDataErasureErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CustomerCancelDataErasureUserError"]] = Field(
        "CustomerCancelDataErasureUserError", alias="__typename"
    )


class CustomerConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CustomerEdge] = Field(default_factory=list)
    nodes: list[Customer] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CustomerConnection"]] = Field("CustomerConnection", alias="__typename")


class CustomerCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer: Optional[Customer] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerCreatePayload"]] = Field("CustomerCreatePayload", alias="__typename")


class CustomerCreditCard(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_address: Optional[CustomerCreditCardBillingAddress] = Field(None, alias="billingAddress")
    brand: Optional[String] = None
    expires_soon: Optional[Boolean] = Field(None, alias="expiresSoon")
    expiry_month: Optional[Int] = Field(None, alias="expiryMonth")
    expiry_year: Optional[Int] = Field(None, alias="expiryYear")
    first_digits: Optional[String] = Field(None, alias="firstDigits")
    is_revocable: Optional[Boolean] = Field(None, alias="isRevocable")
    last_digits: Optional[String] = Field(None, alias="lastDigits")
    masked_number: Optional[String] = Field(None, alias="maskedNumber")
    name: Optional[String] = None
    source: Optional[String] = None
    virtual_last_digits: Optional[String] = Field(None, alias="virtualLastDigits")
    typename__: Optional[Literal["CustomerCreditCard"]] = Field("CustomerCreditCard", alias="__typename")


class CustomerCreditCardBillingAddress(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    city: Optional[String] = None
    country: Optional[String] = None
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    first_name: Optional[String] = Field(None, alias="firstName")
    last_name: Optional[String] = Field(None, alias="lastName")
    province: Optional[String] = None
    province_code: Optional[String] = Field(None, alias="provinceCode")
    zip: Optional[String] = None
    typename__: Optional[Literal["CustomerCreditCardBillingAddress"]] = Field(
        "CustomerCreditCardBillingAddress", alias="__typename"
    )


class CustomerDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_customer_id: Optional[ID] = Field(None, alias="deletedCustomerId")
    shop: Optional[Shop] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerDeletePayload"]] = Field("CustomerDeletePayload", alias="__typename")


class CustomerEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Customer] = None
    typename__: Optional[Literal["CustomerEdge"]] = Field("CustomerEdge", alias="__typename")


class CustomerEmailAddress(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    email_address: Optional[String] = Field(None, alias="emailAddress")
    marketing_state: Optional[CustomerEmailAddressMarketingState] = Field(None, alias="marketingState")
    marketing_unsubscribe_url: Optional[URL] = Field(None, alias="marketingUnsubscribeUrl")
    open_tracking_level: Optional[CustomerEmailAddressOpenTrackingLevel] = Field(None, alias="openTrackingLevel")
    open_tracking_url: Optional[URL] = Field(None, alias="openTrackingUrl")
    typename__: Optional[Literal["CustomerEmailAddress"]] = Field("CustomerEmailAddress", alias="__typename")


class CustomerEmailMarketingConsentState(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    consent_updated_at: Optional[DateTime] = Field(None, alias="consentUpdatedAt")
    marketing_opt_in_level: Optional[CustomerMarketingOptInLevel] = Field(None, alias="marketingOptInLevel")
    marketing_state: Optional[CustomerEmailMarketingState] = Field(None, alias="marketingState")
    typename__: Optional[Literal["CustomerEmailMarketingConsentState"]] = Field(
        "CustomerEmailMarketingConsentState", alias="__typename"
    )


class CustomerEmailMarketingConsentUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer: Optional[Customer] = None
    user_errors: list[CustomerEmailMarketingConsentUpdateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerEmailMarketingConsentUpdatePayload"]] = Field(
        "CustomerEmailMarketingConsentUpdatePayload", alias="__typename"
    )


class CustomerEmailMarketingConsentUpdateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CustomerEmailMarketingConsentUpdateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CustomerEmailMarketingConsentUpdateUserError"]] = Field(
        "CustomerEmailMarketingConsentUpdateUserError", alias="__typename"
    )


class CustomerGenerateAccountActivationUrlPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    account_activation_url: Optional[URL] = Field(None, alias="accountActivationUrl")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerGenerateAccountActivationUrlPayload"]] = Field(
        "CustomerGenerateAccountActivationUrlPayload", alias="__typename"
    )


class CustomerJourney(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_order_index: Optional[Int] = Field(None, alias="customerOrderIndex")
    days_to_conversion: Optional[Int] = Field(None, alias="daysToConversion")
    first_visit: Optional[CustomerVisit] = Field(None, alias="firstVisit")
    last_visit: Optional[CustomerVisit] = Field(None, alias="lastVisit")
    moments: list[CustomerMoment] = Field(default_factory=list)
    typename__: Optional[Literal["CustomerJourney"]] = Field("CustomerJourney", alias="__typename")


class CustomerJourneySummary(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_order_index: Optional[Int] = Field(None, alias="customerOrderIndex")
    days_to_conversion: Optional[Int] = Field(None, alias="daysToConversion")
    first_visit: Optional[CustomerVisit] = Field(None, alias="firstVisit")
    last_visit: Optional[CustomerVisit] = Field(None, alias="lastVisit")
    moments: Optional[CustomerMomentConnection] = None
    moments_count: Optional[Count] = Field(None, alias="momentsCount")
    ready: Optional[Boolean] = None
    typename__: Optional[Literal["CustomerJourneySummary"]] = Field("CustomerJourneySummary", alias="__typename")


class CustomerMergeError(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    error_fields: list[CustomerMergeErrorFieldType] = Field(default_factory=list, alias="errorFields")
    message: Optional[String] = None
    typename__: Optional[Literal["CustomerMergeError"]] = Field("CustomerMergeError", alias="__typename")


class CustomerMergePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    resulting_customer_id: Optional[ID] = Field(None, alias="resultingCustomerId")
    user_errors: list[CustomerMergeUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerMergePayload"]] = Field("CustomerMergePayload", alias="__typename")


class CustomerMergePreview(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alternate_fields: Optional[CustomerMergePreviewAlternateFields] = Field(None, alias="alternateFields")
    blocking_fields: Optional[CustomerMergePreviewBlockingFields] = Field(None, alias="blockingFields")
    customer_merge_errors: Optional[list[CustomerMergeError]] = Field(default_factory=list, alias="customerMergeErrors")
    default_fields: Optional[CustomerMergePreviewDefaultFields] = Field(None, alias="defaultFields")
    resulting_customer_id: Optional[ID] = Field(None, alias="resultingCustomerId")
    typename__: Optional[Literal["CustomerMergePreview"]] = Field("CustomerMergePreview", alias="__typename")


class CustomerMergePreviewAlternateFields(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    default_address: Optional[MailingAddress] = Field(None, alias="defaultAddress")
    email: Optional[CustomerEmailAddress] = None
    first_name: Optional[String] = Field(None, alias="firstName")
    last_name: Optional[String] = Field(None, alias="lastName")
    phone_number: Optional[CustomerPhoneNumber] = Field(None, alias="phoneNumber")
    typename__: Optional[Literal["CustomerMergePreviewAlternateFields"]] = Field(
        "CustomerMergePreviewAlternateFields", alias="__typename"
    )


class CustomerMergePreviewBlockingFields(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    note: Optional[String] = None
    tags: list[String] = Field(default_factory=list)
    typename__: Optional[Literal["CustomerMergePreviewBlockingFields"]] = Field(
        "CustomerMergePreviewBlockingFields", alias="__typename"
    )


class CustomerMergePreviewDefaultFields(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    addresses: Optional[MailingAddressConnection] = None
    default_address: Optional[MailingAddress] = Field(None, alias="defaultAddress")
    discount_node_count: Optional[UnsignedInt64] = Field(None, alias="discountNodeCount")
    discount_nodes: Optional[DiscountNodeConnection] = Field(None, alias="discountNodes")
    display_name: Optional[String] = Field(None, alias="displayName")
    draft_order_count: Optional[UnsignedInt64] = Field(None, alias="draftOrderCount")
    draft_orders: Optional[DraftOrderConnection] = Field(None, alias="draftOrders")
    email: Optional[CustomerEmailAddress] = None
    first_name: Optional[String] = Field(None, alias="firstName")
    gift_card_count: Optional[UnsignedInt64] = Field(None, alias="giftCardCount")
    gift_cards: Optional[GiftCardConnection] = Field(None, alias="giftCards")
    last_name: Optional[String] = Field(None, alias="lastName")
    metafield_count: Optional[UnsignedInt64] = Field(None, alias="metafieldCount")
    note: Optional[String] = None
    order_count: Optional[UnsignedInt64] = Field(None, alias="orderCount")
    orders: Optional[OrderConnection] = None
    phone_number: Optional[CustomerPhoneNumber] = Field(None, alias="phoneNumber")
    tags: list[String] = Field(default_factory=list)
    typename__: Optional[Literal["CustomerMergePreviewDefaultFields"]] = Field(
        "CustomerMergePreviewDefaultFields", alias="__typename"
    )


class CustomerMergeRequest(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_merge_errors: list[CustomerMergeError] = Field(default_factory=list, alias="customerMergeErrors")
    job_id: Optional[ID] = Field(None, alias="jobId")
    resulting_customer_id: Optional[ID] = Field(None, alias="resultingCustomerId")
    status: Optional[CustomerMergeRequestStatus] = None
    typename__: Optional[Literal["CustomerMergeRequest"]] = Field("CustomerMergeRequest", alias="__typename")


class CustomerMergeUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CustomerMergeErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CustomerMergeUserError"]] = Field("CustomerMergeUserError", alias="__typename")


class CustomerMergeable(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    error_fields: list[CustomerMergeErrorFieldType] = Field(default_factory=list, alias="errorFields")
    is_mergeable: Optional[Boolean] = Field(None, alias="isMergeable")
    merge_in_progress: Optional[CustomerMergeRequest] = Field(None, alias="mergeInProgress")
    reason: Optional[String] = None
    typename__: Optional[Literal["CustomerMergeable"]] = Field("CustomerMergeable", alias="__typename")


class CustomerMomentConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CustomerMomentEdge] = Field(default_factory=list)
    nodes: list[CustomerMoment] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CustomerMomentConnection"]] = Field("CustomerMomentConnection", alias="__typename")


class CustomerMomentEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CustomerMoment] = None
    typename__: Optional[Literal["CustomerMomentEdge"]] = Field("CustomerMomentEdge", alias="__typename")


class CustomerPaymentInstrumentBillingAddress(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    city: Optional[String] = None
    country: Optional[String] = None
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    name: Optional[String] = None
    province: Optional[String] = None
    province_code: Optional[String] = Field(None, alias="provinceCode")
    zip: Optional[String] = None
    typename__: Optional[Literal["CustomerPaymentInstrumentBillingAddress"]] = Field(
        "CustomerPaymentInstrumentBillingAddress", alias="__typename"
    )


class CustomerPaymentMethod(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer: Optional[Customer] = None
    id: Optional[ID] = None
    instrument: Optional[CustomerPaymentInstrument] = None
    revoked_at: Optional[DateTime] = Field(None, alias="revokedAt")
    revoked_reason: Optional[CustomerPaymentMethodRevocationReason] = Field(None, alias="revokedReason")
    subscription_contracts: Optional[SubscriptionContractConnection] = Field(None, alias="subscriptionContracts")
    typename__: Optional[Literal["CustomerPaymentMethod"]] = Field("CustomerPaymentMethod", alias="__typename")


class CustomerPaymentMethodConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CustomerPaymentMethodEdge] = Field(default_factory=list)
    nodes: list[CustomerPaymentMethod] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CustomerPaymentMethodConnection"]] = Field(
        "CustomerPaymentMethodConnection", alias="__typename"
    )


class CustomerPaymentMethodCreateFromDuplicationDataPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_payment_method: Optional[CustomerPaymentMethod] = Field(None, alias="customerPaymentMethod")
    user_errors: list[CustomerPaymentMethodCreateFromDuplicationDataUserError] = Field(
        default_factory=list, alias="userErrors"
    )
    typename__: Optional[Literal["CustomerPaymentMethodCreateFromDuplicationDataPayload"]] = Field(
        "CustomerPaymentMethodCreateFromDuplicationDataPayload", alias="__typename"
    )


class CustomerPaymentMethodCreateFromDuplicationDataUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CustomerPaymentMethodCreateFromDuplicationDataUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CustomerPaymentMethodCreateFromDuplicationDataUserError"]] = Field(
        "CustomerPaymentMethodCreateFromDuplicationDataUserError", alias="__typename"
    )


class CustomerPaymentMethodCreditCardCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_payment_method: Optional[CustomerPaymentMethod] = Field(None, alias="customerPaymentMethod")
    processing: Optional[Boolean] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerPaymentMethodCreditCardCreatePayload"]] = Field(
        "CustomerPaymentMethodCreditCardCreatePayload", alias="__typename"
    )


class CustomerPaymentMethodCreditCardUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_payment_method: Optional[CustomerPaymentMethod] = Field(None, alias="customerPaymentMethod")
    processing: Optional[Boolean] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerPaymentMethodCreditCardUpdatePayload"]] = Field(
        "CustomerPaymentMethodCreditCardUpdatePayload", alias="__typename"
    )


class CustomerPaymentMethodEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CustomerPaymentMethod] = None
    typename__: Optional[Literal["CustomerPaymentMethodEdge"]] = Field("CustomerPaymentMethodEdge", alias="__typename")


class CustomerPaymentMethodGetDuplicationDataPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    encrypted_duplication_data: Optional[String] = Field(None, alias="encryptedDuplicationData")
    user_errors: list[CustomerPaymentMethodGetDuplicationDataUserError] = Field(
        default_factory=list, alias="userErrors"
    )
    typename__: Optional[Literal["CustomerPaymentMethodGetDuplicationDataPayload"]] = Field(
        "CustomerPaymentMethodGetDuplicationDataPayload", alias="__typename"
    )


class CustomerPaymentMethodGetDuplicationDataUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CustomerPaymentMethodGetDuplicationDataUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CustomerPaymentMethodGetDuplicationDataUserError"]] = Field(
        "CustomerPaymentMethodGetDuplicationDataUserError", alias="__typename"
    )


class CustomerPaymentMethodGetUpdateUrlPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    update_payment_method_url: Optional[URL] = Field(None, alias="updatePaymentMethodUrl")
    user_errors: list[CustomerPaymentMethodGetUpdateUrlUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerPaymentMethodGetUpdateUrlPayload"]] = Field(
        "CustomerPaymentMethodGetUpdateUrlPayload", alias="__typename"
    )


class CustomerPaymentMethodGetUpdateUrlUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CustomerPaymentMethodGetUpdateUrlUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CustomerPaymentMethodGetUpdateUrlUserError"]] = Field(
        "CustomerPaymentMethodGetUpdateUrlUserError", alias="__typename"
    )


class CustomerPaymentMethodPaypalBillingAgreementCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_payment_method: Optional[CustomerPaymentMethod] = Field(None, alias="customerPaymentMethod")
    user_errors: list[CustomerPaymentMethodUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerPaymentMethodPaypalBillingAgreementCreatePayload"]] = Field(
        "CustomerPaymentMethodPaypalBillingAgreementCreatePayload", alias="__typename"
    )


class CustomerPaymentMethodPaypalBillingAgreementUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_payment_method: Optional[CustomerPaymentMethod] = Field(None, alias="customerPaymentMethod")
    user_errors: list[CustomerPaymentMethodUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerPaymentMethodPaypalBillingAgreementUpdatePayload"]] = Field(
        "CustomerPaymentMethodPaypalBillingAgreementUpdatePayload", alias="__typename"
    )


class CustomerPaymentMethodRemoteCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_payment_method: Optional[CustomerPaymentMethod] = Field(None, alias="customerPaymentMethod")
    user_errors: list[CustomerPaymentMethodRemoteUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerPaymentMethodRemoteCreatePayload"]] = Field(
        "CustomerPaymentMethodRemoteCreatePayload", alias="__typename"
    )


class CustomerPaymentMethodRemoteCreditCardCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_payment_method: Optional[CustomerPaymentMethod] = Field(None, alias="customerPaymentMethod")
    user_errors: list[CustomerPaymentMethodUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerPaymentMethodRemoteCreditCardCreatePayload"]] = Field(
        "CustomerPaymentMethodRemoteCreditCardCreatePayload", alias="__typename"
    )


class CustomerPaymentMethodRemoteUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CustomerPaymentMethodRemoteUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CustomerPaymentMethodRemoteUserError"]] = Field(
        "CustomerPaymentMethodRemoteUserError", alias="__typename"
    )


class CustomerPaymentMethodRevokePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    revoked_customer_payment_method_id: Optional[ID] = Field(None, alias="revokedCustomerPaymentMethodId")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerPaymentMethodRevokePayload"]] = Field(
        "CustomerPaymentMethodRevokePayload", alias="__typename"
    )


class CustomerPaymentMethodSendUpdateEmailPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer: Optional[Customer] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerPaymentMethodSendUpdateEmailPayload"]] = Field(
        "CustomerPaymentMethodSendUpdateEmailPayload", alias="__typename"
    )


class CustomerPaymentMethodUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CustomerPaymentMethodUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CustomerPaymentMethodUserError"]] = Field(
        "CustomerPaymentMethodUserError", alias="__typename"
    )


class CustomerPaypalBillingAgreement(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_address: Optional[CustomerPaymentInstrumentBillingAddress] = Field(None, alias="billingAddress")
    inactive: Optional[Boolean] = None
    is_revocable: Optional[Boolean] = Field(None, alias="isRevocable")
    paypal_account_email: Optional[String] = Field(None, alias="paypalAccountEmail")
    typename__: Optional[Literal["CustomerPaypalBillingAgreement"]] = Field(
        "CustomerPaypalBillingAgreement", alias="__typename"
    )


class CustomerPhoneNumber(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    marketing_state: Optional[CustomerSmsMarketingState] = Field(None, alias="marketingState")
    phone_number: Optional[String] = Field(None, alias="phoneNumber")
    typename__: Optional[Literal["CustomerPhoneNumber"]] = Field("CustomerPhoneNumber", alias="__typename")


class CustomerRemoveTaxExemptionsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer: Optional[Customer] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerRemoveTaxExemptionsPayload"]] = Field(
        "CustomerRemoveTaxExemptionsPayload", alias="__typename"
    )


class CustomerReplaceTaxExemptionsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer: Optional[Customer] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerReplaceTaxExemptionsPayload"]] = Field(
        "CustomerReplaceTaxExemptionsPayload", alias="__typename"
    )


class CustomerRequestDataErasurePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_id: Optional[ID] = Field(None, alias="customerId")
    user_errors: list[CustomerRequestDataErasureUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerRequestDataErasurePayload"]] = Field(
        "CustomerRequestDataErasurePayload", alias="__typename"
    )


class CustomerRequestDataErasureUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CustomerRequestDataErasureErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CustomerRequestDataErasureUserError"]] = Field(
        "CustomerRequestDataErasureUserError", alias="__typename"
    )


class CustomerSegmentMember(HasMetafields):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount_spent: Optional[MoneyV2] = Field(None, alias="amountSpent")
    default_address: Optional[MailingAddress] = Field(None, alias="defaultAddress")
    default_email_address: Optional[CustomerEmailAddress] = Field(None, alias="defaultEmailAddress")
    default_phone_number: Optional[CustomerPhoneNumber] = Field(None, alias="defaultPhoneNumber")
    display_name: Optional[String] = Field(None, alias="displayName")
    first_name: Optional[String] = Field(None, alias="firstName")
    id: Optional[ID] = None
    last_name: Optional[String] = Field(None, alias="lastName")
    last_order_id: Optional[ID] = Field(None, alias="lastOrderId")
    mergeable: Optional[CustomerMergeable] = None
    metafield: Optional[Metafield] = None
    metafields: Optional[MetafieldConnection] = None
    note: Optional[String] = None
    number_of_orders: Optional[UnsignedInt64] = Field(None, alias="numberOfOrders")
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    typename__: Optional[Literal["CustomerSegmentMember"]] = Field("CustomerSegmentMember", alias="__typename")


class CustomerSegmentMemberConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CustomerSegmentMemberEdge] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    statistics: Optional[SegmentStatistics] = None
    total_count: Optional[Int] = Field(None, alias="totalCount")
    typename__: Optional[Literal["CustomerSegmentMemberConnection"]] = Field(
        "CustomerSegmentMemberConnection", alias="__typename"
    )


class CustomerSegmentMemberEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CustomerSegmentMember] = None
    typename__: Optional[Literal["CustomerSegmentMemberEdge"]] = Field("CustomerSegmentMemberEdge", alias="__typename")


class CustomerSegmentMembersQuery(JobResult, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    current_count: Optional[Int] = Field(None, alias="currentCount")
    done: Optional[Boolean] = None
    id: Optional[ID] = None
    typename__: Optional[Literal["CustomerSegmentMembersQuery"]] = Field(
        "CustomerSegmentMembersQuery", alias="__typename"
    )


class CustomerSegmentMembersQueryCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_segment_members_query: Optional[CustomerSegmentMembersQuery] = Field(
        None, alias="customerSegmentMembersQuery"
    )
    user_errors: list[CustomerSegmentMembersQueryUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerSegmentMembersQueryCreatePayload"]] = Field(
        "CustomerSegmentMembersQueryCreatePayload", alias="__typename"
    )


class CustomerSegmentMembersQueryUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CustomerSegmentMembersQueryUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CustomerSegmentMembersQueryUserError"]] = Field(
        "CustomerSegmentMembersQueryUserError", alias="__typename"
    )


class CustomerShopPayAgreement(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_address: Optional[CustomerCreditCardBillingAddress] = Field(None, alias="billingAddress")
    expires_soon: Optional[Boolean] = Field(None, alias="expiresSoon")
    expiry_month: Optional[Int] = Field(None, alias="expiryMonth")
    expiry_year: Optional[Int] = Field(None, alias="expiryYear")
    inactive: Optional[Boolean] = None
    is_revocable: Optional[Boolean] = Field(None, alias="isRevocable")
    last_digits: Optional[String] = Field(None, alias="lastDigits")
    masked_number: Optional[String] = Field(None, alias="maskedNumber")
    name: Optional[String] = None
    typename__: Optional[Literal["CustomerShopPayAgreement"]] = Field("CustomerShopPayAgreement", alias="__typename")


class CustomerSmsMarketingConsentError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CustomerSmsMarketingConsentErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["CustomerSmsMarketingConsentError"]] = Field(
        "CustomerSmsMarketingConsentError", alias="__typename"
    )


class CustomerSmsMarketingConsentState(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    consent_collected_from: Optional[CustomerConsentCollectedFrom] = Field(None, alias="consentCollectedFrom")
    consent_updated_at: Optional[DateTime] = Field(None, alias="consentUpdatedAt")
    marketing_opt_in_level: Optional[CustomerMarketingOptInLevel] = Field(None, alias="marketingOptInLevel")
    marketing_state: Optional[CustomerSmsMarketingState] = Field(None, alias="marketingState")
    typename__: Optional[Literal["CustomerSmsMarketingConsentState"]] = Field(
        "CustomerSmsMarketingConsentState", alias="__typename"
    )


class CustomerSmsMarketingConsentUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer: Optional[Customer] = None
    user_errors: list[CustomerSmsMarketingConsentError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerSmsMarketingConsentUpdatePayload"]] = Field(
        "CustomerSmsMarketingConsentUpdatePayload", alias="__typename"
    )


class CustomerStatistics(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    predicted_spend_tier: Optional[CustomerPredictedSpendTier] = Field(None, alias="predictedSpendTier")
    typename__: Optional[Literal["CustomerStatistics"]] = Field("CustomerStatistics", alias="__typename")


class CustomerUpdateDefaultAddressPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer: Optional[Customer] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerUpdateDefaultAddressPayload"]] = Field(
        "CustomerUpdateDefaultAddressPayload", alias="__typename"
    )


class CustomerUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer: Optional[Customer] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["CustomerUpdatePayload"]] = Field("CustomerUpdatePayload", alias="__typename")


class CustomerVisit(CustomerMoment, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    landing_page: Optional[URL] = Field(None, alias="landingPage")
    landing_page_html: Optional[HTML] = Field(None, alias="landingPageHtml")
    marketing_event: Optional[MarketingEvent] = Field(None, alias="marketingEvent")
    occurred_at: Optional[DateTime] = Field(None, alias="occurredAt")
    referral_code: Optional[String] = Field(None, alias="referralCode")
    referral_info_html: Optional[FormattedString] = Field(None, alias="referralInfoHtml")
    referrer_url: Optional[URL] = Field(None, alias="referrerUrl")
    source: Optional[String] = None
    source_description: Optional[String] = Field(None, alias="sourceDescription")
    source_type: Optional[MarketingTactic] = Field(None, alias="sourceType")
    utm_parameters: Optional[UTMParameters] = Field(None, alias="utmParameters")
    typename__: Optional[Literal["CustomerVisit"]] = Field("CustomerVisit", alias="__typename")


class CustomerVisitProductInfo(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    quantity: Optional[Int] = None
    variant: Optional[ProductVariant] = None
    typename__: Optional[Literal["CustomerVisitProductInfo"]] = Field("CustomerVisitProductInfo", alias="__typename")


class CustomerVisitProductInfoConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[CustomerVisitProductInfoEdge] = Field(default_factory=list)
    nodes: list[CustomerVisitProductInfo] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["CustomerVisitProductInfoConnection"]] = Field(
        "CustomerVisitProductInfoConnection", alias="__typename"
    )


class CustomerVisitProductInfoEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[CustomerVisitProductInfo] = None
    typename__: Optional[Literal["CustomerVisitProductInfoEdge"]] = Field(
        "CustomerVisitProductInfoEdge", alias="__typename"
    )


class DataSaleOptOutPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_id: Optional[ID] = Field(None, alias="customerId")
    user_errors: list[DataSaleOptOutUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DataSaleOptOutPayload"]] = Field("DataSaleOptOutPayload", alias="__typename")


class DataSaleOptOutUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[DataSaleOptOutUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["DataSaleOptOutUserError"]] = Field("DataSaleOptOutUserError", alias="__typename")


class DelegateAccessToken(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    access_scopes: list[String] = Field(default_factory=list, alias="accessScopes")
    access_token: Optional[String] = Field(None, alias="accessToken")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    typename__: Optional[Literal["DelegateAccessToken"]] = Field("DelegateAccessToken", alias="__typename")


class DelegateAccessTokenCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    delegate_access_token: Optional[DelegateAccessToken] = Field(None, alias="delegateAccessToken")
    shop: Optional[Shop] = None
    user_errors: list[DelegateAccessTokenCreateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DelegateAccessTokenCreatePayload"]] = Field(
        "DelegateAccessTokenCreatePayload", alias="__typename"
    )


class DelegateAccessTokenCreateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[DelegateAccessTokenCreateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["DelegateAccessTokenCreateUserError"]] = Field(
        "DelegateAccessTokenCreateUserError", alias="__typename"
    )


class DelegateAccessTokenDestroyPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    shop: Optional[Shop] = None
    status: Optional[Boolean] = None
    user_errors: list[DelegateAccessTokenDestroyUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DelegateAccessTokenDestroyPayload"]] = Field(
        "DelegateAccessTokenDestroyPayload", alias="__typename"
    )


class DelegateAccessTokenDestroyUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[DelegateAccessTokenDestroyUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["DelegateAccessTokenDestroyUserError"]] = Field(
        "DelegateAccessTokenDestroyUserError", alias="__typename"
    )


class DeletionEvent(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    occurred_at: Optional[DateTime] = Field(None, alias="occurredAt")
    subject_id: Optional[ID] = Field(None, alias="subjectId")
    subject_type: Optional[DeletionEventSubjectType] = Field(None, alias="subjectType")
    typename__: Optional[Literal["DeletionEvent"]] = Field("DeletionEvent", alias="__typename")


class DeletionEventConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DeletionEventEdge] = Field(default_factory=list)
    nodes: list[DeletionEvent] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DeletionEventConnection"]] = Field("DeletionEventConnection", alias="__typename")


class DeletionEventEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DeletionEvent] = None
    typename__: Optional[Literal["DeletionEventEdge"]] = Field("DeletionEventEdge", alias="__typename")


class DeliveryAvailableService(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    countries: Optional[DeliveryCountryCodesOrRestOfWorld] = None
    name: Optional[String] = None
    typename__: Optional[Literal["DeliveryAvailableService"]] = Field("DeliveryAvailableService", alias="__typename")


class DeliveryBrandedPromise(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    handle: Optional[String] = None
    name: Optional[String] = None
    typename__: Optional[Literal["DeliveryBrandedPromise"]] = Field("DeliveryBrandedPromise", alias="__typename")


class DeliveryCarrierService(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    active: Optional[Boolean] = None
    available_services_for_countries: list[DeliveryAvailableService] = Field(
        default_factory=list, alias="availableServicesForCountries"
    )
    callback_url: Optional[URL] = Field(None, alias="callbackUrl")
    formatted_name: Optional[String] = Field(None, alias="formattedName")
    icon: Optional[Image] = None
    id: Optional[ID] = None
    name: Optional[String] = None
    supports_service_discovery: Optional[Boolean] = Field(None, alias="supportsServiceDiscovery")
    typename__: Optional[Literal["DeliveryCarrierService"]] = Field("DeliveryCarrierService", alias="__typename")


class DeliveryCarrierServiceAndLocations(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    carrier_service: Optional[DeliveryCarrierService] = Field(None, alias="carrierService")
    locations: list[Location] = Field(default_factory=list)
    typename__: Optional[Literal["DeliveryCarrierServiceAndLocations"]] = Field(
        "DeliveryCarrierServiceAndLocations", alias="__typename"
    )


class DeliveryCarrierServiceConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DeliveryCarrierServiceEdge] = Field(default_factory=list)
    nodes: list[DeliveryCarrierService] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DeliveryCarrierServiceConnection"]] = Field(
        "DeliveryCarrierServiceConnection", alias="__typename"
    )


class DeliveryCarrierServiceEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DeliveryCarrierService] = None
    typename__: Optional[Literal["DeliveryCarrierServiceEdge"]] = Field(
        "DeliveryCarrierServiceEdge", alias="__typename"
    )


class DeliveryCondition(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    condition_criteria: Optional[DeliveryConditionCriteria] = Field(None, alias="conditionCriteria")
    field: Optional[DeliveryConditionField] = None
    id: Optional[ID] = None
    operator: Optional[DeliveryConditionOperator] = None
    typename__: Optional[Literal["DeliveryCondition"]] = Field("DeliveryCondition", alias="__typename")


class DeliveryCountry(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[DeliveryCountryCodeOrRestOfWorld] = None
    id: Optional[ID] = None
    name: Optional[String] = None
    provinces: list[DeliveryProvince] = Field(default_factory=list)
    translated_name: Optional[String] = Field(None, alias="translatedName")
    typename__: Optional[Literal["DeliveryCountry"]] = Field("DeliveryCountry", alias="__typename")


class DeliveryCountryAndZone(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country: Optional[DeliveryCountry] = None
    zone: Optional[String] = None
    typename__: Optional[Literal["DeliveryCountryAndZone"]] = Field("DeliveryCountryAndZone", alias="__typename")


class DeliveryCountryCodeOrRestOfWorld(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    rest_of_world: Optional[Boolean] = Field(None, alias="restOfWorld")
    typename__: Optional[Literal["DeliveryCountryCodeOrRestOfWorld"]] = Field(
        "DeliveryCountryCodeOrRestOfWorld", alias="__typename"
    )


class DeliveryCountryCodesOrRestOfWorld(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country_codes: list[CountryCode] = Field(default_factory=list, alias="countryCodes")
    rest_of_world: Optional[Boolean] = Field(None, alias="restOfWorld")
    typename__: Optional[Literal["DeliveryCountryCodesOrRestOfWorld"]] = Field(
        "DeliveryCountryCodesOrRestOfWorld", alias="__typename"
    )


class DeliveryCustomization(HasMetafieldDefinitions, HasMetafields, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    enabled: Optional[Boolean] = None
    error_history: Optional[FunctionsErrorHistory] = Field(None, alias="errorHistory")
    function_id: Optional[String] = Field(None, alias="functionId")
    id: Optional[ID] = None
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    shopify_function: Optional[ShopifyFunction] = Field(None, alias="shopifyFunction")
    title: Optional[String] = None
    typename__: Optional[Literal["DeliveryCustomization"]] = Field("DeliveryCustomization", alias="__typename")


class DeliveryCustomizationActivationPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ids: Optional[list[String]] = Field(default_factory=list)
    user_errors: list[DeliveryCustomizationError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DeliveryCustomizationActivationPayload"]] = Field(
        "DeliveryCustomizationActivationPayload", alias="__typename"
    )


class DeliveryCustomizationConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DeliveryCustomizationEdge] = Field(default_factory=list)
    nodes: list[DeliveryCustomization] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DeliveryCustomizationConnection"]] = Field(
        "DeliveryCustomizationConnection", alias="__typename"
    )


class DeliveryCustomizationCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    delivery_customization: Optional[DeliveryCustomization] = Field(None, alias="deliveryCustomization")
    user_errors: list[DeliveryCustomizationError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DeliveryCustomizationCreatePayload"]] = Field(
        "DeliveryCustomizationCreatePayload", alias="__typename"
    )


class DeliveryCustomizationDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[DeliveryCustomizationError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DeliveryCustomizationDeletePayload"]] = Field(
        "DeliveryCustomizationDeletePayload", alias="__typename"
    )


class DeliveryCustomizationEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DeliveryCustomization] = None
    typename__: Optional[Literal["DeliveryCustomizationEdge"]] = Field("DeliveryCustomizationEdge", alias="__typename")


class DeliveryCustomizationError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[DeliveryCustomizationErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["DeliveryCustomizationError"]] = Field(
        "DeliveryCustomizationError", alias="__typename"
    )


class DeliveryCustomizationUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    delivery_customization: Optional[DeliveryCustomization] = Field(None, alias="deliveryCustomization")
    user_errors: list[DeliveryCustomizationError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DeliveryCustomizationUpdatePayload"]] = Field(
        "DeliveryCustomizationUpdatePayload", alias="__typename"
    )


class DeliveryLegacyModeBlocked(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    blocked: Optional[Boolean] = None
    reasons: Optional[list[DeliveryLegacyModeBlockedReason]] = Field(default_factory=list)
    typename__: Optional[Literal["DeliveryLegacyModeBlocked"]] = Field("DeliveryLegacyModeBlocked", alias="__typename")


class DeliveryLocalPickupSettings(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    instructions: Optional[String] = None
    pickup_time: Optional[DeliveryLocalPickupTime] = Field(None, alias="pickupTime")
    typename__: Optional[Literal["DeliveryLocalPickupSettings"]] = Field(
        "DeliveryLocalPickupSettings", alias="__typename"
    )


class DeliveryLocationGroup(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    locations: Optional[LocationConnection] = None
    locations_count: Optional[Count] = Field(None, alias="locationsCount")
    typename__: Optional[Literal["DeliveryLocationGroup"]] = Field("DeliveryLocationGroup", alias="__typename")


class DeliveryLocationGroupZone(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    method_definition_counts: Optional[DeliveryMethodDefinitionCounts] = Field(None, alias="methodDefinitionCounts")
    method_definitions: Optional[DeliveryMethodDefinitionConnection] = Field(None, alias="methodDefinitions")
    zone: Optional[DeliveryZone] = None
    typename__: Optional[Literal["DeliveryLocationGroupZone"]] = Field("DeliveryLocationGroupZone", alias="__typename")


class DeliveryLocationGroupZoneConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DeliveryLocationGroupZoneEdge] = Field(default_factory=list)
    nodes: list[DeliveryLocationGroupZone] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DeliveryLocationGroupZoneConnection"]] = Field(
        "DeliveryLocationGroupZoneConnection", alias="__typename"
    )


class DeliveryLocationGroupZoneEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DeliveryLocationGroupZone] = None
    typename__: Optional[Literal["DeliveryLocationGroupZoneEdge"]] = Field(
        "DeliveryLocationGroupZoneEdge", alias="__typename"
    )


class DeliveryLocationLocalPickupSettingsError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[DeliveryLocationLocalPickupSettingsErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["DeliveryLocationLocalPickupSettingsError"]] = Field(
        "DeliveryLocationLocalPickupSettingsError", alias="__typename"
    )


class DeliveryMethod(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    additional_information: Optional[DeliveryMethodAdditionalInformation] = Field(None, alias="additionalInformation")
    branded_promise: Optional[DeliveryBrandedPromise] = Field(None, alias="brandedPromise")
    id: Optional[ID] = None
    max_delivery_date_time: Optional[DateTime] = Field(None, alias="maxDeliveryDateTime")
    method_type: Optional[DeliveryMethodType] = Field(None, alias="methodType")
    min_delivery_date_time: Optional[DateTime] = Field(None, alias="minDeliveryDateTime")
    presented_name: Optional[String] = Field(None, alias="presentedName")
    service_code: Optional[String] = Field(None, alias="serviceCode")
    source_reference: Optional[String] = Field(None, alias="sourceReference")
    typename__: Optional[Literal["DeliveryMethod"]] = Field("DeliveryMethod", alias="__typename")


class DeliveryMethodAdditionalInformation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    instructions: Optional[String] = None
    phone: Optional[String] = None
    typename__: Optional[Literal["DeliveryMethodAdditionalInformation"]] = Field(
        "DeliveryMethodAdditionalInformation", alias="__typename"
    )


class DeliveryMethodDefinition(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    active: Optional[Boolean] = None
    description: Optional[String] = None
    id: Optional[ID] = None
    method_conditions: list[DeliveryCondition] = Field(default_factory=list, alias="methodConditions")
    name: Optional[String] = None
    rate_provider: Optional[DeliveryRateProvider] = Field(None, alias="rateProvider")
    typename__: Optional[Literal["DeliveryMethodDefinition"]] = Field("DeliveryMethodDefinition", alias="__typename")


class DeliveryMethodDefinitionConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DeliveryMethodDefinitionEdge] = Field(default_factory=list)
    nodes: list[DeliveryMethodDefinition] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DeliveryMethodDefinitionConnection"]] = Field(
        "DeliveryMethodDefinitionConnection", alias="__typename"
    )


class DeliveryMethodDefinitionCounts(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    participant_definitions_count: Optional[Int] = Field(None, alias="participantDefinitionsCount")
    rate_definitions_count: Optional[Int] = Field(None, alias="rateDefinitionsCount")
    typename__: Optional[Literal["DeliveryMethodDefinitionCounts"]] = Field(
        "DeliveryMethodDefinitionCounts", alias="__typename"
    )


class DeliveryMethodDefinitionEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DeliveryMethodDefinition] = None
    typename__: Optional[Literal["DeliveryMethodDefinitionEdge"]] = Field(
        "DeliveryMethodDefinitionEdge", alias="__typename"
    )


class DeliveryParticipant(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    adapt_to_new_services_flag: Optional[Boolean] = Field(None, alias="adaptToNewServicesFlag")
    carrier_service: Optional[DeliveryCarrierService] = Field(None, alias="carrierService")
    fixed_fee: Optional[MoneyV2] = Field(None, alias="fixedFee")
    id: Optional[ID] = None
    participant_services: list[DeliveryParticipantService] = Field(default_factory=list, alias="participantServices")
    percentage_of_rate_fee: Optional[Float] = Field(None, alias="percentageOfRateFee")
    typename__: Optional[Literal["DeliveryParticipant"]] = Field("DeliveryParticipant", alias="__typename")


class DeliveryParticipantService(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    active: Optional[Boolean] = None
    name: Optional[String] = None
    typename__: Optional[Literal["DeliveryParticipantService"]] = Field(
        "DeliveryParticipantService", alias="__typename"
    )


class DeliveryProductVariantsCount(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    capped: Optional[Boolean] = None
    count: Optional[Int] = None
    typename__: Optional[Literal["DeliveryProductVariantsCount"]] = Field(
        "DeliveryProductVariantsCount", alias="__typename"
    )


class DeliveryProfile(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    active_method_definitions_count: Optional[Int] = Field(None, alias="activeMethodDefinitionsCount")
    default: Optional[Boolean] = None
    id: Optional[ID] = None
    legacy_mode: Optional[Boolean] = Field(None, alias="legacyMode")
    locations_without_rates_count: Optional[Int] = Field(None, alias="locationsWithoutRatesCount")
    name: Optional[String] = None
    origin_location_count: Optional[Int] = Field(None, alias="originLocationCount")
    product_variants_count: Optional[Count] = Field(None, alias="productVariantsCount")
    product_variants_count_v2: Optional[DeliveryProductVariantsCount] = Field(None, alias="productVariantsCountV2")
    profile_items: Optional[DeliveryProfileItemConnection] = Field(None, alias="profileItems")
    profile_location_groups: list[DeliveryProfileLocationGroup] = Field(
        default_factory=list, alias="profileLocationGroups"
    )
    selling_plan_groups: Optional[SellingPlanGroupConnection] = Field(None, alias="sellingPlanGroups")
    unassigned_locations: list[Location] = Field(default_factory=list, alias="unassignedLocations")
    unassigned_locations_paginated: Optional[LocationConnection] = Field(None, alias="unassignedLocationsPaginated")
    zone_country_count: Optional[Int] = Field(None, alias="zoneCountryCount")
    typename__: Optional[Literal["DeliveryProfile"]] = Field("DeliveryProfile", alias="__typename")


class DeliveryProfileConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DeliveryProfileEdge] = Field(default_factory=list)
    nodes: list[DeliveryProfile] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DeliveryProfileConnection"]] = Field("DeliveryProfileConnection", alias="__typename")


class DeliveryProfileCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    profile: Optional[DeliveryProfile] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DeliveryProfileCreatePayload"]] = Field(
        "DeliveryProfileCreatePayload", alias="__typename"
    )


class DeliveryProfileEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DeliveryProfile] = None
    typename__: Optional[Literal["DeliveryProfileEdge"]] = Field("DeliveryProfileEdge", alias="__typename")


class DeliveryProfileItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    product: Optional[Product] = None
    variants: Optional[ProductVariantConnection] = None
    typename__: Optional[Literal["DeliveryProfileItem"]] = Field("DeliveryProfileItem", alias="__typename")


class DeliveryProfileItemConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DeliveryProfileItemEdge] = Field(default_factory=list)
    nodes: list[DeliveryProfileItem] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DeliveryProfileItemConnection"]] = Field(
        "DeliveryProfileItemConnection", alias="__typename"
    )


class DeliveryProfileItemEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DeliveryProfileItem] = None
    typename__: Optional[Literal["DeliveryProfileItemEdge"]] = Field("DeliveryProfileItemEdge", alias="__typename")


class DeliveryProfileLocationGroup(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    countries_in_any_zone: list[DeliveryCountryAndZone] = Field(default_factory=list, alias="countriesInAnyZone")
    location_group: Optional[DeliveryLocationGroup] = Field(None, alias="locationGroup")
    location_group_zones: Optional[DeliveryLocationGroupZoneConnection] = Field(None, alias="locationGroupZones")
    typename__: Optional[Literal["DeliveryProfileLocationGroup"]] = Field(
        "DeliveryProfileLocationGroup", alias="__typename"
    )


class DeliveryProfileRemovePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DeliveryProfileRemovePayload"]] = Field(
        "DeliveryProfileRemovePayload", alias="__typename"
    )


class DeliveryProfileUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    profile: Optional[DeliveryProfile] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DeliveryProfileUpdatePayload"]] = Field(
        "DeliveryProfileUpdatePayload", alias="__typename"
    )


class DeliveryPromiseProvider(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    active: Optional[Boolean] = None
    fulfillment_delay: Optional[Int] = Field(None, alias="fulfillmentDelay")
    id: Optional[ID] = None
    location: Optional[Location] = None
    time_zone: Optional[String] = Field(None, alias="timeZone")
    typename__: Optional[Literal["DeliveryPromiseProvider"]] = Field("DeliveryPromiseProvider", alias="__typename")


class DeliveryPromiseProviderUpsertPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    delivery_promise_provider: Optional[DeliveryPromiseProvider] = Field(None, alias="deliveryPromiseProvider")
    user_errors: list[DeliveryPromiseProviderUpsertUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DeliveryPromiseProviderUpsertPayload"]] = Field(
        "DeliveryPromiseProviderUpsertPayload", alias="__typename"
    )


class DeliveryPromiseProviderUpsertUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[DeliveryPromiseProviderUpsertUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["DeliveryPromiseProviderUpsertUserError"]] = Field(
        "DeliveryPromiseProviderUpsertUserError", alias="__typename"
    )


class DeliveryProvince(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[String] = None
    id: Optional[ID] = None
    name: Optional[String] = None
    translated_name: Optional[String] = Field(None, alias="translatedName")
    typename__: Optional[Literal["DeliveryProvince"]] = Field("DeliveryProvince", alias="__typename")


class DeliveryRateDefinition(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    price: Optional[MoneyV2] = None
    typename__: Optional[Literal["DeliveryRateDefinition"]] = Field("DeliveryRateDefinition", alias="__typename")


class DeliverySetting(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    legacy_mode_blocked: Optional[DeliveryLegacyModeBlocked] = Field(None, alias="legacyModeBlocked")
    legacy_mode_profiles: Optional[Boolean] = Field(None, alias="legacyModeProfiles")
    typename__: Optional[Literal["DeliverySetting"]] = Field("DeliverySetting", alias="__typename")


class DeliverySettingUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    setting: Optional[DeliverySetting] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DeliverySettingUpdatePayload"]] = Field(
        "DeliverySettingUpdatePayload", alias="__typename"
    )


class DeliveryShippingOriginAssignPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DeliveryShippingOriginAssignPayload"]] = Field(
        "DeliveryShippingOriginAssignPayload", alias="__typename"
    )


class DeliveryZone(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    countries: list[DeliveryCountry] = Field(default_factory=list)
    id: Optional[ID] = None
    name: Optional[String] = None
    typename__: Optional[Literal["DeliveryZone"]] = Field("DeliveryZone", alias="__typename")


class DiscountAllocation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocated_amount: Optional[MoneyV2] = Field(None, alias="allocatedAmount")
    allocated_amount_set: Optional[MoneyBag] = Field(None, alias="allocatedAmountSet")
    discount_application: Optional[DiscountApplication] = Field(None, alias="discountApplication")
    typename__: Optional[Literal["DiscountAllocation"]] = Field("DiscountAllocation", alias="__typename")


class DiscountAmount(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[MoneyV2] = None
    applies_on_each_item: Optional[Boolean] = Field(None, alias="appliesOnEachItem")
    typename__: Optional[Literal["DiscountAmount"]] = Field("DiscountAmount", alias="__typename")


class DiscountApplicationConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DiscountApplicationEdge] = Field(default_factory=list)
    nodes: list[DiscountApplication] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DiscountApplicationConnection"]] = Field(
        "DiscountApplicationConnection", alias="__typename"
    )


class DiscountApplicationEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DiscountApplication] = None
    typename__: Optional[Literal["DiscountApplicationEdge"]] = Field("DiscountApplicationEdge", alias="__typename")


class DiscountAutomaticActivatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automatic_discount_node: Optional[DiscountAutomaticNode] = Field(None, alias="automaticDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountAutomaticActivatePayload"]] = Field(
        "DiscountAutomaticActivatePayload", alias="__typename"
    )


class DiscountAutomaticApp(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_discount_type: Optional[AppDiscountType] = Field(None, alias="appDiscountType")
    async_usage_count: Optional[Int] = Field(None, alias="asyncUsageCount")
    combines_with: Optional[DiscountCombinesWith] = Field(None, alias="combinesWith")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    discount_class: Optional[DiscountClass] = Field(None, alias="discountClass")
    discount_id: Optional[ID] = Field(None, alias="discountId")
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    error_history: Optional[FunctionsErrorHistory] = Field(None, alias="errorHistory")
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    status: Optional[DiscountStatus] = None
    title: Optional[String] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["DiscountAutomaticApp"]] = Field("DiscountAutomaticApp", alias="__typename")


class DiscountAutomaticAppCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automatic_app_discount: Optional[DiscountAutomaticApp] = Field(None, alias="automaticAppDiscount")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountAutomaticAppCreatePayload"]] = Field(
        "DiscountAutomaticAppCreatePayload", alias="__typename"
    )


class DiscountAutomaticAppUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automatic_app_discount: Optional[DiscountAutomaticApp] = Field(None, alias="automaticAppDiscount")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountAutomaticAppUpdatePayload"]] = Field(
        "DiscountAutomaticAppUpdatePayload", alias="__typename"
    )


class DiscountAutomaticBasic(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    async_usage_count: Optional[Int] = Field(None, alias="asyncUsageCount")
    combines_with: Optional[DiscountCombinesWith] = Field(None, alias="combinesWith")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    customer_gets: Optional[DiscountCustomerGets] = Field(None, alias="customerGets")
    discount_class: Optional[MerchandiseDiscountClass] = Field(None, alias="discountClass")
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    minimum_requirement: Optional[DiscountMinimumRequirement] = Field(None, alias="minimumRequirement")
    recurring_cycle_limit: Optional[Int] = Field(None, alias="recurringCycleLimit")
    short_summary: Optional[String] = Field(None, alias="shortSummary")
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    status: Optional[DiscountStatus] = None
    summary: Optional[String] = None
    title: Optional[String] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    usage_count: Optional[Int] = Field(None, alias="usageCount")
    typename__: Optional[Literal["DiscountAutomaticBasic"]] = Field("DiscountAutomaticBasic", alias="__typename")


class DiscountAutomaticBasicCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automatic_discount_node: Optional[DiscountAutomaticNode] = Field(None, alias="automaticDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountAutomaticBasicCreatePayload"]] = Field(
        "DiscountAutomaticBasicCreatePayload", alias="__typename"
    )


class DiscountAutomaticBasicUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automatic_discount_node: Optional[DiscountAutomaticNode] = Field(None, alias="automaticDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountAutomaticBasicUpdatePayload"]] = Field(
        "DiscountAutomaticBasicUpdatePayload", alias="__typename"
    )


class DiscountAutomaticBulkDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountAutomaticBulkDeletePayload"]] = Field(
        "DiscountAutomaticBulkDeletePayload", alias="__typename"
    )


class DiscountAutomaticBxgy(HasEvents, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    async_usage_count: Optional[Int] = Field(None, alias="asyncUsageCount")
    combines_with: Optional[DiscountCombinesWith] = Field(None, alias="combinesWith")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    customer_buys: Optional[DiscountCustomerBuys] = Field(None, alias="customerBuys")
    customer_gets: Optional[DiscountCustomerGets] = Field(None, alias="customerGets")
    discount_class: Optional[MerchandiseDiscountClass] = Field(None, alias="discountClass")
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    events: Optional[EventConnection] = None
    id: Optional[ID] = None
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    status: Optional[DiscountStatus] = None
    summary: Optional[String] = None
    title: Optional[String] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    usage_count: Optional[Int] = Field(None, alias="usageCount")
    uses_per_order_limit: Optional[Int] = Field(None, alias="usesPerOrderLimit")
    typename__: Optional[Literal["DiscountAutomaticBxgy"]] = Field("DiscountAutomaticBxgy", alias="__typename")


class DiscountAutomaticBxgyCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automatic_discount_node: Optional[DiscountAutomaticNode] = Field(None, alias="automaticDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountAutomaticBxgyCreatePayload"]] = Field(
        "DiscountAutomaticBxgyCreatePayload", alias="__typename"
    )


class DiscountAutomaticBxgyUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automatic_discount_node: Optional[DiscountAutomaticNode] = Field(None, alias="automaticDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountAutomaticBxgyUpdatePayload"]] = Field(
        "DiscountAutomaticBxgyUpdatePayload", alias="__typename"
    )


class DiscountAutomaticConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DiscountAutomaticEdge] = Field(default_factory=list)
    nodes: list[DiscountAutomatic] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DiscountAutomaticConnection"]] = Field(
        "DiscountAutomaticConnection", alias="__typename"
    )


class DiscountAutomaticDeactivatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automatic_discount_node: Optional[DiscountAutomaticNode] = Field(None, alias="automaticDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountAutomaticDeactivatePayload"]] = Field(
        "DiscountAutomaticDeactivatePayload", alias="__typename"
    )


class DiscountAutomaticDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_automatic_discount_id: Optional[ID] = Field(None, alias="deletedAutomaticDiscountId")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountAutomaticDeletePayload"]] = Field(
        "DiscountAutomaticDeletePayload", alias="__typename"
    )


class DiscountAutomaticEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DiscountAutomatic] = None
    typename__: Optional[Literal["DiscountAutomaticEdge"]] = Field("DiscountAutomaticEdge", alias="__typename")


class DiscountAutomaticFreeShipping(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applies_on_one_time_purchase: Optional[Boolean] = Field(None, alias="appliesOnOneTimePurchase")
    applies_on_subscription: Optional[Boolean] = Field(None, alias="appliesOnSubscription")
    async_usage_count: Optional[Int] = Field(None, alias="asyncUsageCount")
    combines_with: Optional[DiscountCombinesWith] = Field(None, alias="combinesWith")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    destination_selection: Optional[DiscountShippingDestinationSelection] = Field(None, alias="destinationSelection")
    discount_class: Optional[ShippingDiscountClass] = Field(None, alias="discountClass")
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    has_timeline_comment: Optional[Boolean] = Field(None, alias="hasTimelineComment")
    maximum_shipping_price: Optional[MoneyV2] = Field(None, alias="maximumShippingPrice")
    minimum_requirement: Optional[DiscountMinimumRequirement] = Field(None, alias="minimumRequirement")
    recurring_cycle_limit: Optional[Int] = Field(None, alias="recurringCycleLimit")
    short_summary: Optional[String] = Field(None, alias="shortSummary")
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    status: Optional[DiscountStatus] = None
    summary: Optional[String] = None
    title: Optional[String] = None
    total_sales: Optional[MoneyV2] = Field(None, alias="totalSales")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["DiscountAutomaticFreeShipping"]] = Field(
        "DiscountAutomaticFreeShipping", alias="__typename"
    )


class DiscountAutomaticFreeShippingCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automatic_discount_node: Optional[DiscountAutomaticNode] = Field(None, alias="automaticDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountAutomaticFreeShippingCreatePayload"]] = Field(
        "DiscountAutomaticFreeShippingCreatePayload", alias="__typename"
    )


class DiscountAutomaticFreeShippingUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automatic_discount_node: Optional[DiscountAutomaticNode] = Field(None, alias="automaticDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountAutomaticFreeShippingUpdatePayload"]] = Field(
        "DiscountAutomaticFreeShippingUpdatePayload", alias="__typename"
    )


class DiscountAutomaticNode(HasEvents, HasMetafieldDefinitions, HasMetafields, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    automatic_discount: Optional[DiscountAutomatic] = Field(None, alias="automaticDiscount")
    events: Optional[EventConnection] = None
    id: Optional[ID] = None
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    typename__: Optional[Literal["DiscountAutomaticNode"]] = Field("DiscountAutomaticNode", alias="__typename")


class DiscountAutomaticNodeConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DiscountAutomaticNodeEdge] = Field(default_factory=list)
    nodes: list[DiscountAutomaticNode] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DiscountAutomaticNodeConnection"]] = Field(
        "DiscountAutomaticNodeConnection", alias="__typename"
    )


class DiscountAutomaticNodeEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DiscountAutomaticNode] = None
    typename__: Optional[Literal["DiscountAutomaticNodeEdge"]] = Field("DiscountAutomaticNodeEdge", alias="__typename")


class DiscountCodeActivatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code_discount_node: Optional[DiscountCodeNode] = Field(None, alias="codeDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountCodeActivatePayload"]] = Field(
        "DiscountCodeActivatePayload", alias="__typename"
    )


class DiscountCodeApp(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_discount_type: Optional[AppDiscountType] = Field(None, alias="appDiscountType")
    applies_once_per_customer: Optional[Boolean] = Field(None, alias="appliesOncePerCustomer")
    async_usage_count: Optional[Int] = Field(None, alias="asyncUsageCount")
    codes: Optional[DiscountRedeemCodeConnection] = None
    codes_count: Optional[Count] = Field(None, alias="codesCount")
    combines_with: Optional[DiscountCombinesWith] = Field(None, alias="combinesWith")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    customer_selection: Optional[DiscountCustomerSelection] = Field(None, alias="customerSelection")
    discount_class: Optional[DiscountClass] = Field(None, alias="discountClass")
    discount_id: Optional[ID] = Field(None, alias="discountId")
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    error_history: Optional[FunctionsErrorHistory] = Field(None, alias="errorHistory")
    has_timeline_comment: Optional[Boolean] = Field(None, alias="hasTimelineComment")
    recurring_cycle_limit: Optional[Int] = Field(None, alias="recurringCycleLimit")
    shareable_urls: list[DiscountShareableUrl] = Field(default_factory=list, alias="shareableUrls")
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    status: Optional[DiscountStatus] = None
    title: Optional[String] = None
    total_sales: Optional[MoneyV2] = Field(None, alias="totalSales")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    usage_limit: Optional[Int] = Field(None, alias="usageLimit")
    typename__: Optional[Literal["DiscountCodeApp"]] = Field("DiscountCodeApp", alias="__typename")


class DiscountCodeAppCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code_app_discount: Optional[DiscountCodeApp] = Field(None, alias="codeAppDiscount")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountCodeAppCreatePayload"]] = Field(
        "DiscountCodeAppCreatePayload", alias="__typename"
    )


class DiscountCodeAppUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code_app_discount: Optional[DiscountCodeApp] = Field(None, alias="codeAppDiscount")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountCodeAppUpdatePayload"]] = Field(
        "DiscountCodeAppUpdatePayload", alias="__typename"
    )


class DiscountCodeApplication(DiscountApplication):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocation_method: Optional[DiscountApplicationAllocationMethod] = Field(None, alias="allocationMethod")
    code: Optional[String] = None
    index: Optional[Int] = None
    target_selection: Optional[DiscountApplicationTargetSelection] = Field(None, alias="targetSelection")
    target_type: Optional[DiscountApplicationTargetType] = Field(None, alias="targetType")
    value: Optional[PricingValue] = None
    typename__: Optional[Literal["DiscountCodeApplication"]] = Field("DiscountCodeApplication", alias="__typename")


class DiscountCodeBasic(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applies_once_per_customer: Optional[Boolean] = Field(None, alias="appliesOncePerCustomer")
    async_usage_count: Optional[Int] = Field(None, alias="asyncUsageCount")
    codes: Optional[DiscountRedeemCodeConnection] = None
    codes_count: Optional[Count] = Field(None, alias="codesCount")
    combines_with: Optional[DiscountCombinesWith] = Field(None, alias="combinesWith")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    customer_gets: Optional[DiscountCustomerGets] = Field(None, alias="customerGets")
    customer_selection: Optional[DiscountCustomerSelection] = Field(None, alias="customerSelection")
    discount_class: Optional[MerchandiseDiscountClass] = Field(None, alias="discountClass")
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    has_timeline_comment: Optional[Boolean] = Field(None, alias="hasTimelineComment")
    minimum_requirement: Optional[DiscountMinimumRequirement] = Field(None, alias="minimumRequirement")
    recurring_cycle_limit: Optional[Int] = Field(None, alias="recurringCycleLimit")
    shareable_urls: list[DiscountShareableUrl] = Field(default_factory=list, alias="shareableUrls")
    short_summary: Optional[String] = Field(None, alias="shortSummary")
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    status: Optional[DiscountStatus] = None
    summary: Optional[String] = None
    title: Optional[String] = None
    total_sales: Optional[MoneyV2] = Field(None, alias="totalSales")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    usage_limit: Optional[Int] = Field(None, alias="usageLimit")
    typename__: Optional[Literal["DiscountCodeBasic"]] = Field("DiscountCodeBasic", alias="__typename")


class DiscountCodeBasicCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code_discount_node: Optional[DiscountCodeNode] = Field(None, alias="codeDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountCodeBasicCreatePayload"]] = Field(
        "DiscountCodeBasicCreatePayload", alias="__typename"
    )


class DiscountCodeBasicUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code_discount_node: Optional[DiscountCodeNode] = Field(None, alias="codeDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountCodeBasicUpdatePayload"]] = Field(
        "DiscountCodeBasicUpdatePayload", alias="__typename"
    )


class DiscountCodeBulkActivatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountCodeBulkActivatePayload"]] = Field(
        "DiscountCodeBulkActivatePayload", alias="__typename"
    )


class DiscountCodeBulkDeactivatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountCodeBulkDeactivatePayload"]] = Field(
        "DiscountCodeBulkDeactivatePayload", alias="__typename"
    )


class DiscountCodeBulkDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountCodeBulkDeletePayload"]] = Field(
        "DiscountCodeBulkDeletePayload", alias="__typename"
    )


class DiscountCodeBxgy(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applies_once_per_customer: Optional[Boolean] = Field(None, alias="appliesOncePerCustomer")
    async_usage_count: Optional[Int] = Field(None, alias="asyncUsageCount")
    codes: Optional[DiscountRedeemCodeConnection] = None
    codes_count: Optional[Count] = Field(None, alias="codesCount")
    combines_with: Optional[DiscountCombinesWith] = Field(None, alias="combinesWith")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    customer_buys: Optional[DiscountCustomerBuys] = Field(None, alias="customerBuys")
    customer_gets: Optional[DiscountCustomerGets] = Field(None, alias="customerGets")
    customer_selection: Optional[DiscountCustomerSelection] = Field(None, alias="customerSelection")
    discount_class: Optional[MerchandiseDiscountClass] = Field(None, alias="discountClass")
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    has_timeline_comment: Optional[Boolean] = Field(None, alias="hasTimelineComment")
    shareable_urls: list[DiscountShareableUrl] = Field(default_factory=list, alias="shareableUrls")
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    status: Optional[DiscountStatus] = None
    summary: Optional[String] = None
    title: Optional[String] = None
    total_sales: Optional[MoneyV2] = Field(None, alias="totalSales")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    usage_limit: Optional[Int] = Field(None, alias="usageLimit")
    uses_per_order_limit: Optional[Int] = Field(None, alias="usesPerOrderLimit")
    typename__: Optional[Literal["DiscountCodeBxgy"]] = Field("DiscountCodeBxgy", alias="__typename")


class DiscountCodeBxgyCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code_discount_node: Optional[DiscountCodeNode] = Field(None, alias="codeDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountCodeBxgyCreatePayload"]] = Field(
        "DiscountCodeBxgyCreatePayload", alias="__typename"
    )


class DiscountCodeBxgyUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code_discount_node: Optional[DiscountCodeNode] = Field(None, alias="codeDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountCodeBxgyUpdatePayload"]] = Field(
        "DiscountCodeBxgyUpdatePayload", alias="__typename"
    )


class DiscountCodeDeactivatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code_discount_node: Optional[DiscountCodeNode] = Field(None, alias="codeDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountCodeDeactivatePayload"]] = Field(
        "DiscountCodeDeactivatePayload", alias="__typename"
    )


class DiscountCodeDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_code_discount_id: Optional[ID] = Field(None, alias="deletedCodeDiscountId")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountCodeDeletePayload"]] = Field("DiscountCodeDeletePayload", alias="__typename")


class DiscountCodeFreeShipping(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applies_on_one_time_purchase: Optional[Boolean] = Field(None, alias="appliesOnOneTimePurchase")
    applies_on_subscription: Optional[Boolean] = Field(None, alias="appliesOnSubscription")
    applies_once_per_customer: Optional[Boolean] = Field(None, alias="appliesOncePerCustomer")
    async_usage_count: Optional[Int] = Field(None, alias="asyncUsageCount")
    codes: Optional[DiscountRedeemCodeConnection] = None
    codes_count: Optional[Count] = Field(None, alias="codesCount")
    combines_with: Optional[DiscountCombinesWith] = Field(None, alias="combinesWith")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    customer_selection: Optional[DiscountCustomerSelection] = Field(None, alias="customerSelection")
    destination_selection: Optional[DiscountShippingDestinationSelection] = Field(None, alias="destinationSelection")
    discount_class: Optional[ShippingDiscountClass] = Field(None, alias="discountClass")
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    has_timeline_comment: Optional[Boolean] = Field(None, alias="hasTimelineComment")
    maximum_shipping_price: Optional[MoneyV2] = Field(None, alias="maximumShippingPrice")
    minimum_requirement: Optional[DiscountMinimumRequirement] = Field(None, alias="minimumRequirement")
    recurring_cycle_limit: Optional[Int] = Field(None, alias="recurringCycleLimit")
    shareable_urls: list[DiscountShareableUrl] = Field(default_factory=list, alias="shareableUrls")
    short_summary: Optional[String] = Field(None, alias="shortSummary")
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    status: Optional[DiscountStatus] = None
    summary: Optional[String] = None
    title: Optional[String] = None
    total_sales: Optional[MoneyV2] = Field(None, alias="totalSales")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    usage_limit: Optional[Int] = Field(None, alias="usageLimit")
    typename__: Optional[Literal["DiscountCodeFreeShipping"]] = Field("DiscountCodeFreeShipping", alias="__typename")


class DiscountCodeFreeShippingCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code_discount_node: Optional[DiscountCodeNode] = Field(None, alias="codeDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountCodeFreeShippingCreatePayload"]] = Field(
        "DiscountCodeFreeShippingCreatePayload", alias="__typename"
    )


class DiscountCodeFreeShippingUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code_discount_node: Optional[DiscountCodeNode] = Field(None, alias="codeDiscountNode")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountCodeFreeShippingUpdatePayload"]] = Field(
        "DiscountCodeFreeShippingUpdatePayload", alias="__typename"
    )


class DiscountCodeNode(HasEvents, HasMetafieldDefinitions, HasMetafields, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code_discount: Optional[DiscountCode] = Field(None, alias="codeDiscount")
    events: Optional[EventConnection] = None
    id: Optional[ID] = None
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    typename__: Optional[Literal["DiscountCodeNode"]] = Field("DiscountCodeNode", alias="__typename")


class DiscountCodeNodeConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DiscountCodeNodeEdge] = Field(default_factory=list)
    nodes: list[DiscountCodeNode] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DiscountCodeNodeConnection"]] = Field(
        "DiscountCodeNodeConnection", alias="__typename"
    )


class DiscountCodeNodeEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DiscountCodeNode] = None
    typename__: Optional[Literal["DiscountCodeNodeEdge"]] = Field("DiscountCodeNodeEdge", alias="__typename")


class DiscountCodeRedeemCodeBulkDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountCodeRedeemCodeBulkDeletePayload"]] = Field(
        "DiscountCodeRedeemCodeBulkDeletePayload", alias="__typename"
    )


class DiscountCollections(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    collections: Optional[CollectionConnection] = None
    typename__: Optional[Literal["DiscountCollections"]] = Field("DiscountCollections", alias="__typename")


class DiscountCombinesWith(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    order_discounts: Optional[Boolean] = Field(None, alias="orderDiscounts")
    product_discounts: Optional[Boolean] = Field(None, alias="productDiscounts")
    shipping_discounts: Optional[Boolean] = Field(None, alias="shippingDiscounts")
    typename__: Optional[Literal["DiscountCombinesWith"]] = Field("DiscountCombinesWith", alias="__typename")


class DiscountCountries(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    countries: list[CountryCode] = Field(default_factory=list)
    include_rest_of_world: Optional[Boolean] = Field(None, alias="includeRestOfWorld")
    typename__: Optional[Literal["DiscountCountries"]] = Field("DiscountCountries", alias="__typename")


class DiscountCountryAll(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    all_countries: Optional[Boolean] = Field(None, alias="allCountries")
    typename__: Optional[Literal["DiscountCountryAll"]] = Field("DiscountCountryAll", alias="__typename")


class DiscountCustomerAll(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    all_customers: Optional[Boolean] = Field(None, alias="allCustomers")
    typename__: Optional[Literal["DiscountCustomerAll"]] = Field("DiscountCustomerAll", alias="__typename")


class DiscountCustomerBuys(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    items: Optional[DiscountItems] = None
    value: Optional[DiscountCustomerBuysValue] = None
    typename__: Optional[Literal["DiscountCustomerBuys"]] = Field("DiscountCustomerBuys", alias="__typename")


class DiscountCustomerGets(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applies_on_one_time_purchase: Optional[Boolean] = Field(None, alias="appliesOnOneTimePurchase")
    applies_on_subscription: Optional[Boolean] = Field(None, alias="appliesOnSubscription")
    items: Optional[DiscountItems] = None
    value: Optional[DiscountCustomerGetsValue] = None
    typename__: Optional[Literal["DiscountCustomerGets"]] = Field("DiscountCustomerGets", alias="__typename")


class DiscountCustomerSegments(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    segments: list[Segment] = Field(default_factory=list)
    typename__: Optional[Literal["DiscountCustomerSegments"]] = Field("DiscountCustomerSegments", alias="__typename")


class DiscountCustomers(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customers: list[Customer] = Field(default_factory=list)
    typename__: Optional[Literal["DiscountCustomers"]] = Field("DiscountCustomers", alias="__typename")


class DiscountMinimumQuantity(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    greater_than_or_equal_to_quantity: Optional[UnsignedInt64] = Field(None, alias="greaterThanOrEqualToQuantity")
    typename__: Optional[Literal["DiscountMinimumQuantity"]] = Field("DiscountMinimumQuantity", alias="__typename")


class DiscountMinimumSubtotal(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    greater_than_or_equal_to_subtotal: Optional[MoneyV2] = Field(None, alias="greaterThanOrEqualToSubtotal")
    typename__: Optional[Literal["DiscountMinimumSubtotal"]] = Field("DiscountMinimumSubtotal", alias="__typename")


class DiscountNode(HasEvents, HasMetafieldDefinitions, HasMetafields, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    discount: Optional[Discount] = None
    events: Optional[EventConnection] = None
    id: Optional[ID] = None
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    typename__: Optional[Literal["DiscountNode"]] = Field("DiscountNode", alias="__typename")


class DiscountNodeConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DiscountNodeEdge] = Field(default_factory=list)
    nodes: list[DiscountNode] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DiscountNodeConnection"]] = Field("DiscountNodeConnection", alias="__typename")


class DiscountNodeEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DiscountNode] = None
    typename__: Optional[Literal["DiscountNodeEdge"]] = Field("DiscountNodeEdge", alias="__typename")


class DiscountOnQuantity(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    effect: Optional[DiscountEffect] = None
    quantity: Optional[DiscountQuantity] = None
    typename__: Optional[Literal["DiscountOnQuantity"]] = Field("DiscountOnQuantity", alias="__typename")


class DiscountPercentage(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    percentage: Optional[Float] = None
    typename__: Optional[Literal["DiscountPercentage"]] = Field("DiscountPercentage", alias="__typename")


class DiscountProducts(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product_variants: Optional[ProductVariantConnection] = Field(None, alias="productVariants")
    products: Optional[ProductConnection] = None
    typename__: Optional[Literal["DiscountProducts"]] = Field("DiscountProducts", alias="__typename")


class DiscountPurchaseAmount(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[Decimal] = None
    typename__: Optional[Literal["DiscountPurchaseAmount"]] = Field("DiscountPurchaseAmount", alias="__typename")


class DiscountQuantity(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    quantity: Optional[UnsignedInt64] = None
    typename__: Optional[Literal["DiscountQuantity"]] = Field("DiscountQuantity", alias="__typename")


class DiscountRedeemCode(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    async_usage_count: Optional[Int] = Field(None, alias="asyncUsageCount")
    code: Optional[String] = None
    created_by: Optional[App] = Field(None, alias="createdBy")
    id: Optional[ID] = None
    typename__: Optional[Literal["DiscountRedeemCode"]] = Field("DiscountRedeemCode", alias="__typename")


class DiscountRedeemCodeBulkAddPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    bulk_creation: Optional[DiscountRedeemCodeBulkCreation] = Field(None, alias="bulkCreation")
    user_errors: list[DiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DiscountRedeemCodeBulkAddPayload"]] = Field(
        "DiscountRedeemCodeBulkAddPayload", alias="__typename"
    )


class DiscountRedeemCodeBulkCreation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    codes: Optional[DiscountRedeemCodeBulkCreationCodeConnection] = None
    codes_count: Optional[Int] = Field(None, alias="codesCount")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    discount_code: Optional[DiscountCodeNode] = Field(None, alias="discountCode")
    done: Optional[Boolean] = None
    failed_count: Optional[Int] = Field(None, alias="failedCount")
    id: Optional[ID] = None
    imported_count: Optional[Int] = Field(None, alias="importedCount")
    typename__: Optional[Literal["DiscountRedeemCodeBulkCreation"]] = Field(
        "DiscountRedeemCodeBulkCreation", alias="__typename"
    )


class DiscountRedeemCodeBulkCreationCode(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[String] = None
    discount_redeem_code: Optional[DiscountRedeemCode] = Field(None, alias="discountRedeemCode")
    errors: list[DiscountUserError] = Field(default_factory=list)
    typename__: Optional[Literal["DiscountRedeemCodeBulkCreationCode"]] = Field(
        "DiscountRedeemCodeBulkCreationCode", alias="__typename"
    )


class DiscountRedeemCodeBulkCreationCodeConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DiscountRedeemCodeBulkCreationCodeEdge] = Field(default_factory=list)
    nodes: list[DiscountRedeemCodeBulkCreationCode] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DiscountRedeemCodeBulkCreationCodeConnection"]] = Field(
        "DiscountRedeemCodeBulkCreationCodeConnection", alias="__typename"
    )


class DiscountRedeemCodeBulkCreationCodeEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DiscountRedeemCodeBulkCreationCode] = None
    typename__: Optional[Literal["DiscountRedeemCodeBulkCreationCodeEdge"]] = Field(
        "DiscountRedeemCodeBulkCreationCodeEdge", alias="__typename"
    )


class DiscountRedeemCodeConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DiscountRedeemCodeEdge] = Field(default_factory=list)
    nodes: list[DiscountRedeemCode] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DiscountRedeemCodeConnection"]] = Field(
        "DiscountRedeemCodeConnection", alias="__typename"
    )


class DiscountRedeemCodeEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DiscountRedeemCode] = None
    typename__: Optional[Literal["DiscountRedeemCodeEdge"]] = Field("DiscountRedeemCodeEdge", alias="__typename")


class DiscountShareableUrl(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    target_item_image: Optional[Image] = Field(None, alias="targetItemImage")
    target_type: Optional[DiscountShareableUrlTargetType] = Field(None, alias="targetType")
    title: Optional[String] = None
    url: Optional[URL] = None
    typename__: Optional[Literal["DiscountShareableUrl"]] = Field("DiscountShareableUrl", alias="__typename")


class DiscountUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[DiscountErrorCode] = None
    extra_info: Optional[String] = Field(None, alias="extraInfo")
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["DiscountUserError"]] = Field("DiscountUserError", alias="__typename")


class DisputeEvidenceUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    dispute_evidence: Optional[ShopifyPaymentsDisputeEvidence] = Field(None, alias="disputeEvidence")
    user_errors: list[DisputeEvidenceUpdateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DisputeEvidenceUpdatePayload"]] = Field(
        "DisputeEvidenceUpdatePayload", alias="__typename"
    )


class DisputeEvidenceUpdateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[DisputeEvidenceUpdateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["DisputeEvidenceUpdateUserError"]] = Field(
        "DisputeEvidenceUpdateUserError", alias="__typename"
    )


class Domain(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    host: Optional[String] = None
    id: Optional[ID] = None
    localization: Optional[DomainLocalization] = None
    market_web_presence: Optional[MarketWebPresence] = Field(None, alias="marketWebPresence")
    ssl_enabled: Optional[Boolean] = Field(None, alias="sslEnabled")
    url: Optional[URL] = None
    typename__: Optional[Literal["Domain"]] = Field("Domain", alias="__typename")


class DomainLocalization(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alternate_locales: list[String] = Field(default_factory=list, alias="alternateLocales")
    country: Optional[String] = None
    default_locale: Optional[String] = Field(None, alias="defaultLocale")
    typename__: Optional[Literal["DomainLocalization"]] = Field("DomainLocalization", alias="__typename")


class DraftOrder(
    CommentEventSubject,
    HasEvents,
    HasLocalizationExtensions,
    HasMetafields,
    LegacyInteroperability,
    Navigable,
    Node,
):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accept_automatic_discounts: Optional[Boolean] = Field(None, alias="acceptAutomaticDiscounts")
    allow_discount_codes_in_checkout: Optional[Boolean] = Field(None, alias="allowDiscountCodesInCheckout")
    applied_discount: Optional[DraftOrderAppliedDiscount] = Field(None, alias="appliedDiscount")
    billing_address: Optional[MailingAddress] = Field(None, alias="billingAddress")
    billing_address_matches_shipping_address: Optional[Boolean] = Field(
        None, alias="billingAddressMatchesShippingAddress"
    )
    completed_at: Optional[DateTime] = Field(None, alias="completedAt")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    currency_code: Optional[CurrencyCode] = Field(None, alias="currencyCode")
    custom_attributes: list[Attribute] = Field(default_factory=list, alias="customAttributes")
    customer: Optional[Customer] = None
    default_cursor: Optional[String] = Field(None, alias="defaultCursor")
    discount_codes: list[String] = Field(default_factory=list, alias="discountCodes")
    email: Optional[String] = None
    events: Optional[EventConnection] = None
    has_timeline_comment: Optional[Boolean] = Field(None, alias="hasTimelineComment")
    id: Optional[ID] = None
    invoice_email_template_subject: Optional[String] = Field(None, alias="invoiceEmailTemplateSubject")
    invoice_sent_at: Optional[DateTime] = Field(None, alias="invoiceSentAt")
    invoice_url: Optional[URL] = Field(None, alias="invoiceUrl")
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    line_items: Optional[DraftOrderLineItemConnection] = Field(None, alias="lineItems")
    line_items_subtotal_price: Optional[MoneyBag] = Field(None, alias="lineItemsSubtotalPrice")
    localization_extensions: Optional[LocalizationExtensionConnection] = Field(None, alias="localizationExtensions")
    market_name: Optional[String] = Field(None, alias="marketName")
    market_region_country_code: Optional[CountryCode] = Field(None, alias="marketRegionCountryCode")
    metafield: Optional[Metafield] = None
    metafields: Optional[MetafieldConnection] = None
    name: Optional[String] = None
    note2: Optional[String] = None
    order: Optional[Order] = None
    payment_terms: Optional[PaymentTerms] = Field(None, alias="paymentTerms")
    phone: Optional[String] = None
    platform_discounts: list[DraftOrderPlatformDiscount] = Field(default_factory=list, alias="platformDiscounts")
    po_number: Optional[String] = Field(None, alias="poNumber")
    presentment_currency_code: Optional[CurrencyCode] = Field(None, alias="presentmentCurrencyCode")
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    purchasing_entity: Optional[PurchasingEntity] = Field(None, alias="purchasingEntity")
    ready: Optional[Boolean] = None
    reserve_inventory_until: Optional[DateTime] = Field(None, alias="reserveInventoryUntil")
    shipping_address: Optional[MailingAddress] = Field(None, alias="shippingAddress")
    shipping_line: Optional[ShippingLine] = Field(None, alias="shippingLine")
    status: Optional[DraftOrderStatus] = None
    subtotal_price: Optional[Money] = Field(None, alias="subtotalPrice")
    subtotal_price_set: Optional[MoneyBag] = Field(None, alias="subtotalPriceSet")
    tags: list[String] = Field(default_factory=list)
    tax_exempt: Optional[Boolean] = Field(None, alias="taxExempt")
    tax_lines: list[TaxLine] = Field(default_factory=list, alias="taxLines")
    taxes_included: Optional[Boolean] = Field(None, alias="taxesIncluded")
    total_discounts_set: Optional[MoneyBag] = Field(None, alias="totalDiscountsSet")
    total_line_items_price_set: Optional[MoneyBag] = Field(None, alias="totalLineItemsPriceSet")
    total_price: Optional[Money] = Field(None, alias="totalPrice")
    total_price_set: Optional[MoneyBag] = Field(None, alias="totalPriceSet")
    total_quantity_of_line_items: Optional[Int] = Field(None, alias="totalQuantityOfLineItems")
    total_shipping_price: Optional[Money] = Field(None, alias="totalShippingPrice")
    total_shipping_price_set: Optional[MoneyBag] = Field(None, alias="totalShippingPriceSet")
    total_tax: Optional[Money] = Field(None, alias="totalTax")
    total_tax_set: Optional[MoneyBag] = Field(None, alias="totalTaxSet")
    total_weight: Optional[UnsignedInt64] = Field(None, alias="totalWeight")
    transformer_fingerprint: Optional[String] = Field(None, alias="transformerFingerprint")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    visible_to_customer: Optional[Boolean] = Field(None, alias="visibleToCustomer")
    warnings: list[DraftOrderWarning] = Field(default_factory=list)
    typename__: Optional[Literal["DraftOrder"]] = Field("DraftOrder", alias="__typename")


class DraftOrderAppliedDiscount(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[Money] = None
    amount_set: Optional[MoneyBag] = Field(None, alias="amountSet")
    amount_v2: Optional[MoneyV2] = Field(None, alias="amountV2")
    description: Optional[String] = None
    title: Optional[String] = None
    value: Optional[Float] = None
    value_type: Optional[DraftOrderAppliedDiscountType] = Field(None, alias="valueType")
    typename__: Optional[Literal["DraftOrderAppliedDiscount"]] = Field("DraftOrderAppliedDiscount", alias="__typename")


class DraftOrderBulkAddTagsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DraftOrderBulkAddTagsPayload"]] = Field(
        "DraftOrderBulkAddTagsPayload", alias="__typename"
    )


class DraftOrderBulkDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DraftOrderBulkDeletePayload"]] = Field(
        "DraftOrderBulkDeletePayload", alias="__typename"
    )


class DraftOrderBulkRemoveTagsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DraftOrderBulkRemoveTagsPayload"]] = Field(
        "DraftOrderBulkRemoveTagsPayload", alias="__typename"
    )


class DraftOrderBundleAddedWarning(DraftOrderWarning):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    error_code: Optional[String] = Field(None, alias="errorCode")
    field: Optional[String] = None
    message: Optional[String] = None
    typename__: Optional[Literal["DraftOrderBundleAddedWarning"]] = Field(
        "DraftOrderBundleAddedWarning", alias="__typename"
    )


class DraftOrderCalculatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    calculated_draft_order: Optional[CalculatedDraftOrder] = Field(None, alias="calculatedDraftOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DraftOrderCalculatePayload"]] = Field(
        "DraftOrderCalculatePayload", alias="__typename"
    )


class DraftOrderCompletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    draft_order: Optional[DraftOrder] = Field(None, alias="draftOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DraftOrderCompletePayload"]] = Field("DraftOrderCompletePayload", alias="__typename")


class DraftOrderConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DraftOrderEdge] = Field(default_factory=list)
    nodes: list[DraftOrder] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DraftOrderConnection"]] = Field("DraftOrderConnection", alias="__typename")


class DraftOrderCreateFromOrderPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    draft_order: Optional[DraftOrder] = Field(None, alias="draftOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DraftOrderCreateFromOrderPayload"]] = Field(
        "DraftOrderCreateFromOrderPayload", alias="__typename"
    )


class DraftOrderCreateMerchantCheckoutPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DraftOrderCreateMerchantCheckoutPayload"]] = Field(
        "DraftOrderCreateMerchantCheckoutPayload", alias="__typename"
    )


class DraftOrderCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    draft_order: Optional[DraftOrder] = Field(None, alias="draftOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DraftOrderCreatePayload"]] = Field("DraftOrderCreatePayload", alias="__typename")


class DraftOrderDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DraftOrderDeletePayload"]] = Field("DraftOrderDeletePayload", alias="__typename")


class DraftOrderDiscountNotAppliedWarning(DraftOrderWarning):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    discount_code: Optional[String] = Field(None, alias="discountCode")
    discount_title: Optional[String] = Field(None, alias="discountTitle")
    error_code: Optional[String] = Field(None, alias="errorCode")
    field: Optional[String] = None
    message: Optional[String] = None
    price_rule: Optional[PriceRule] = Field(None, alias="priceRule")
    typename__: Optional[Literal["DraftOrderDiscountNotAppliedWarning"]] = Field(
        "DraftOrderDiscountNotAppliedWarning", alias="__typename"
    )


class DraftOrderDuplicatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    draft_order: Optional[DraftOrder] = Field(None, alias="draftOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DraftOrderDuplicatePayload"]] = Field(
        "DraftOrderDuplicatePayload", alias="__typename"
    )


class DraftOrderEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DraftOrder] = None
    typename__: Optional[Literal["DraftOrderEdge"]] = Field("DraftOrderEdge", alias="__typename")


class DraftOrderInvoicePreviewPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    preview_html: Optional[HTML] = Field(None, alias="previewHtml")
    preview_subject: Optional[HTML] = Field(None, alias="previewSubject")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DraftOrderInvoicePreviewPayload"]] = Field(
        "DraftOrderInvoicePreviewPayload", alias="__typename"
    )


class DraftOrderInvoiceSendPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    draft_order: Optional[DraftOrder] = Field(None, alias="draftOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DraftOrderInvoiceSendPayload"]] = Field(
        "DraftOrderInvoiceSendPayload", alias="__typename"
    )


class DraftOrderLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applied_discount: Optional[DraftOrderAppliedDiscount] = Field(None, alias="appliedDiscount")
    approximate_discounted_unit_price_set: Optional[MoneyBag] = Field(None, alias="approximateDiscountedUnitPriceSet")
    bundle_components: list[DraftOrderLineItem] = Field(default_factory=list, alias="bundleComponents")
    custom: Optional[Boolean] = None
    custom_attributes: list[Attribute] = Field(default_factory=list, alias="customAttributes")
    custom_attributes_v2: list[TypedAttribute] = Field(default_factory=list, alias="customAttributesV2")
    discounted_total: Optional[Money] = Field(None, alias="discountedTotal")
    discounted_total_set: Optional[MoneyBag] = Field(None, alias="discountedTotalSet")
    discounted_unit_price: Optional[Money] = Field(None, alias="discountedUnitPrice")
    discounted_unit_price_set: Optional[MoneyBag] = Field(None, alias="discountedUnitPriceSet")
    fulfillment_service: Optional[FulfillmentService] = Field(None, alias="fulfillmentService")
    grams: Optional[Int] = None
    id: Optional[ID] = None
    image: Optional[Image] = None
    is_gift_card: Optional[Boolean] = Field(None, alias="isGiftCard")
    name: Optional[String] = None
    original_total: Optional[Money] = Field(None, alias="originalTotal")
    original_total_set: Optional[MoneyBag] = Field(None, alias="originalTotalSet")
    original_unit_price: Optional[Money] = Field(None, alias="originalUnitPrice")
    original_unit_price_set: Optional[MoneyBag] = Field(None, alias="originalUnitPriceSet")
    original_unit_price_with_currency: Optional[MoneyV2] = Field(None, alias="originalUnitPriceWithCurrency")
    product: Optional[Product] = None
    quantity: Optional[Int] = None
    requires_shipping: Optional[Boolean] = Field(None, alias="requiresShipping")
    sku: Optional[String] = None
    tax_lines: list[TaxLine] = Field(default_factory=list, alias="taxLines")
    taxable: Optional[Boolean] = None
    title: Optional[String] = None
    total_discount: Optional[Money] = Field(None, alias="totalDiscount")
    total_discount_set: Optional[MoneyBag] = Field(None, alias="totalDiscountSet")
    uuid: Optional[String] = None
    variant: Optional[ProductVariant] = None
    variant_title: Optional[String] = Field(None, alias="variantTitle")
    vendor: Optional[String] = None
    weight: Optional[Weight] = None
    typename__: Optional[Literal["DraftOrderLineItem"]] = Field("DraftOrderLineItem", alias="__typename")


class DraftOrderLineItemConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[DraftOrderLineItemEdge] = Field(default_factory=list)
    nodes: list[DraftOrderLineItem] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["DraftOrderLineItemConnection"]] = Field(
        "DraftOrderLineItemConnection", alias="__typename"
    )


class DraftOrderLineItemEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[DraftOrderLineItem] = None
    typename__: Optional[Literal["DraftOrderLineItemEdge"]] = Field("DraftOrderLineItemEdge", alias="__typename")


class DraftOrderPlatformDiscount(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocations: list[DraftOrderPlatformDiscountAllocation] = Field(default_factory=list)
    automatic_discount: Optional[Boolean] = Field(None, alias="automaticDiscount")
    bxgy_discount: Optional[Boolean] = Field(None, alias="bxgyDiscount")
    code: Optional[String] = None
    discount_class: Optional[DiscountClass] = Field(None, alias="discountClass")
    discount_node: Optional[DiscountNode] = Field(None, alias="discountNode")
    id: Optional[ID] = None
    presentation_level: Optional[String] = Field(None, alias="presentationLevel")
    short_summary: Optional[String] = Field(None, alias="shortSummary")
    summary: Optional[String] = None
    title: Optional[String] = None
    total_amount: Optional[MoneyV2] = Field(None, alias="totalAmount")
    total_amount_price_set: Optional[MoneyBag] = Field(None, alias="totalAmountPriceSet")
    typename__: Optional[Literal["DraftOrderPlatformDiscount"]] = Field(
        "DraftOrderPlatformDiscount", alias="__typename"
    )


class DraftOrderPlatformDiscountAllocation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    quantity: Optional[Int] = None
    reduction_amount: Optional[MoneyV2] = Field(None, alias="reductionAmount")
    reduction_amount_set: Optional[MoneyBag] = Field(None, alias="reductionAmountSet")
    target: Optional[DraftOrderPlatformDiscountAllocationTarget] = None
    typename__: Optional[Literal["DraftOrderPlatformDiscountAllocation"]] = Field(
        "DraftOrderPlatformDiscountAllocation", alias="__typename"
    )


class DraftOrderTag(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    handle: Optional[String] = None
    id: Optional[ID] = None
    title: Optional[String] = None
    typename__: Optional[Literal["DraftOrderTag"]] = Field("DraftOrderTag", alias="__typename")


class DraftOrderUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    draft_order: Optional[DraftOrder] = Field(None, alias="draftOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["DraftOrderUpdatePayload"]] = Field("DraftOrderUpdatePayload", alias="__typename")


class Duty(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country_code_of_origin: Optional[CountryCode] = Field(None, alias="countryCodeOfOrigin")
    harmonized_system_code: Optional[String] = Field(None, alias="harmonizedSystemCode")
    id: Optional[ID] = None
    price: Optional[MoneyBag] = None
    tax_lines: list[TaxLine] = Field(default_factory=list, alias="taxLines")
    typename__: Optional[Literal["Duty"]] = Field("Duty", alias="__typename")


class DutySale(Sale):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    action_type: Optional[SaleActionType] = Field(None, alias="actionType")
    duty: Optional[Duty] = None
    id: Optional[ID] = None
    line_type: Optional[SaleLineType] = Field(None, alias="lineType")
    quantity: Optional[Int] = None
    taxes: list[SaleTax] = Field(default_factory=list)
    total_amount: Optional[MoneyBag] = Field(None, alias="totalAmount")
    total_discount_amount_after_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountAfterTaxes")
    total_discount_amount_before_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountBeforeTaxes")
    total_tax_amount: Optional[MoneyBag] = Field(None, alias="totalTaxAmount")
    typename__: Optional[Literal["DutySale"]] = Field("DutySale", alias="__typename")


class EditableProperty(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    locked: Optional[Boolean] = None
    reason: Optional[FormattedString] = None
    typename__: Optional[Literal["EditableProperty"]] = Field("EditableProperty", alias="__typename")


class ErrorsServerPixelUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ErrorsServerPixelUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ErrorsServerPixelUserError"]] = Field(
        "ErrorsServerPixelUserError", alias="__typename"
    )


class ErrorsWebPixelUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ErrorsWebPixelUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ErrorsWebPixelUserError"]] = Field("ErrorsWebPixelUserError", alias="__typename")


class EventBridgeServerPixelUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    server_pixel: Optional[ServerPixel] = Field(None, alias="serverPixel")
    user_errors: list[ErrorsServerPixelUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["EventBridgeServerPixelUpdatePayload"]] = Field(
        "EventBridgeServerPixelUpdatePayload", alias="__typename"
    )


class EventBridgeWebhookSubscriptionCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    webhook_subscription: Optional[WebhookSubscription] = Field(None, alias="webhookSubscription")
    typename__: Optional[Literal["EventBridgeWebhookSubscriptionCreatePayload"]] = Field(
        "EventBridgeWebhookSubscriptionCreatePayload", alias="__typename"
    )


class EventBridgeWebhookSubscriptionUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    webhook_subscription: Optional[WebhookSubscription] = Field(None, alias="webhookSubscription")
    typename__: Optional[Literal["EventBridgeWebhookSubscriptionUpdatePayload"]] = Field(
        "EventBridgeWebhookSubscriptionUpdatePayload", alias="__typename"
    )


class EventConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[EventEdge] = Field(default_factory=list)
    nodes: list[Event] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["EventConnection"]] = Field("EventConnection", alias="__typename")


class EventEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Event] = None
    typename__: Optional[Literal["EventEdge"]] = Field("EventEdge", alias="__typename")


class ExchangeLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    line_item: Optional[LineItem] = Field(None, alias="lineItem")
    typename__: Optional[Literal["ExchangeLineItem"]] = Field("ExchangeLineItem", alias="__typename")


class ExchangeLineItemConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ExchangeLineItemEdge] = Field(default_factory=list)
    nodes: list[ExchangeLineItem] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ExchangeLineItemConnection"]] = Field(
        "ExchangeLineItemConnection", alias="__typename"
    )


class ExchangeLineItemEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ExchangeLineItem] = None
    typename__: Optional[Literal["ExchangeLineItemEdge"]] = Field("ExchangeLineItemEdge", alias="__typename")


class ExchangeV2(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    additions: Optional[ExchangeV2Additions] = None
    completed_at: Optional[DateTime] = Field(None, alias="completedAt")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    id: Optional[ID] = None
    location: Optional[Location] = None
    note: Optional[String] = None
    refunds: list[Refund] = Field(default_factory=list)
    returns: Optional[ExchangeV2Returns] = None
    staff_member: Optional[StaffMember] = Field(None, alias="staffMember")
    total_amount_processed_set: Optional[MoneyBag] = Field(None, alias="totalAmountProcessedSet")
    total_price_set: Optional[MoneyBag] = Field(None, alias="totalPriceSet")
    transactions: list[OrderTransaction] = Field(default_factory=list)
    typename__: Optional[Literal["ExchangeV2"]] = Field("ExchangeV2", alias="__typename")


class ExchangeV2Additions(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    line_items: list[ExchangeV2LineItem] = Field(default_factory=list, alias="lineItems")
    subtotal_price_set: Optional[MoneyBag] = Field(None, alias="subtotalPriceSet")
    tax_lines: list[TaxLine] = Field(default_factory=list, alias="taxLines")
    total_price_set: Optional[MoneyBag] = Field(None, alias="totalPriceSet")
    typename__: Optional[Literal["ExchangeV2Additions"]] = Field("ExchangeV2Additions", alias="__typename")


class ExchangeV2Connection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ExchangeV2Edge] = Field(default_factory=list)
    nodes: list[ExchangeV2] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ExchangeV2Connection"]] = Field("ExchangeV2Connection", alias="__typename")


class ExchangeV2Edge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ExchangeV2] = None
    typename__: Optional[Literal["ExchangeV2Edge"]] = Field("ExchangeV2Edge", alias="__typename")


class ExchangeV2LineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    custom_attributes: list[Attribute] = Field(default_factory=list, alias="customAttributes")
    discounted_total_set: Optional[MoneyBag] = Field(None, alias="discountedTotalSet")
    discounted_unit_price_set: Optional[MoneyBag] = Field(None, alias="discountedUnitPriceSet")
    fulfillment_service: Optional[FulfillmentService] = Field(None, alias="fulfillmentService")
    gift_card: Optional[Boolean] = Field(None, alias="giftCard")
    gift_cards: list[GiftCard] = Field(default_factory=list, alias="giftCards")
    is_gift_card: Optional[Boolean] = Field(None, alias="isGiftCard")
    line_item: Optional[LineItem] = Field(None, alias="lineItem")
    name: Optional[String] = None
    original_total_set: Optional[MoneyBag] = Field(None, alias="originalTotalSet")
    original_unit_price_set: Optional[MoneyBag] = Field(None, alias="originalUnitPriceSet")
    quantity: Optional[Int] = None
    requires_shipping: Optional[Boolean] = Field(None, alias="requiresShipping")
    sku: Optional[String] = None
    tax_lines: list[TaxLine] = Field(default_factory=list, alias="taxLines")
    taxable: Optional[Boolean] = None
    title: Optional[String] = None
    variant: Optional[ProductVariant] = None
    variant_title: Optional[String] = Field(None, alias="variantTitle")
    vendor: Optional[String] = None
    typename__: Optional[Literal["ExchangeV2LineItem"]] = Field("ExchangeV2LineItem", alias="__typename")


class ExchangeV2Returns(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    line_items: list[ExchangeV2LineItem] = Field(default_factory=list, alias="lineItems")
    order_discount_amount_set: Optional[MoneyBag] = Field(None, alias="orderDiscountAmountSet")
    shipping_refund_amount_set: Optional[MoneyBag] = Field(None, alias="shippingRefundAmountSet")
    subtotal_price_set: Optional[MoneyBag] = Field(None, alias="subtotalPriceSet")
    tax_lines: list[TaxLine] = Field(default_factory=list, alias="taxLines")
    tip_refund_amount_set: Optional[MoneyBag] = Field(None, alias="tipRefundAmountSet")
    total_price_set: Optional[MoneyBag] = Field(None, alias="totalPriceSet")
    typename__: Optional[Literal["ExchangeV2Returns"]] = Field("ExchangeV2Returns", alias="__typename")


class ExternalVideo(File, Media, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alt: Optional[String] = None
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    embed_url: Optional[URL] = Field(None, alias="embedUrl")
    embedded_url: Optional[URL] = Field(None, alias="embeddedUrl")
    file_errors: list[FileError] = Field(default_factory=list, alias="fileErrors")
    file_status: Optional[FileStatus] = Field(None, alias="fileStatus")
    host: Optional[MediaHost] = None
    id: Optional[ID] = None
    media_content_type: Optional[MediaContentType] = Field(None, alias="mediaContentType")
    media_errors: list[MediaError] = Field(default_factory=list, alias="mediaErrors")
    media_warnings: list[MediaWarning] = Field(default_factory=list, alias="mediaWarnings")
    origin_url: Optional[URL] = Field(None, alias="originUrl")
    preview: Optional[MediaPreviewImage] = None
    status: Optional[MediaStatus] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["ExternalVideo"]] = Field("ExternalVideo", alias="__typename")


class FailedRequirement(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    action: Optional[NavigationItem] = None
    message: Optional[String] = None
    typename__: Optional[Literal["FailedRequirement"]] = Field("FailedRequirement", alias="__typename")


class FeeSale(Sale):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    action_type: Optional[SaleActionType] = Field(None, alias="actionType")
    fee: Optional[Fee] = None
    id: Optional[ID] = None
    line_type: Optional[SaleLineType] = Field(None, alias="lineType")
    quantity: Optional[Int] = None
    taxes: list[SaleTax] = Field(default_factory=list)
    total_amount: Optional[MoneyBag] = Field(None, alias="totalAmount")
    total_discount_amount_after_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountAfterTaxes")
    total_discount_amount_before_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountBeforeTaxes")
    total_tax_amount: Optional[MoneyBag] = Field(None, alias="totalTaxAmount")
    typename__: Optional[Literal["FeeSale"]] = Field("FeeSale", alias="__typename")


class FileAcknowledgeUpdateFailedPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    files: Optional[list[File]] = Field(default_factory=list)
    user_errors: list[FilesUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FileAcknowledgeUpdateFailedPayload"]] = Field(
        "FileAcknowledgeUpdateFailedPayload", alias="__typename"
    )


class FileConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[FileEdge] = Field(default_factory=list)
    nodes: list[File] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["FileConnection"]] = Field("FileConnection", alias="__typename")


class FileCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    files: Optional[list[File]] = Field(default_factory=list)
    user_errors: list[FilesUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FileCreatePayload"]] = Field("FileCreatePayload", alias="__typename")


class FileDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_file_ids: Optional[list[ID]] = Field(default_factory=list, alias="deletedFileIds")
    user_errors: list[FilesUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FileDeletePayload"]] = Field("FileDeletePayload", alias="__typename")


class FileEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[File] = None
    typename__: Optional[Literal["FileEdge"]] = Field("FileEdge", alias="__typename")


class FileError(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[FileErrorCode] = None
    details: Optional[String] = None
    message: Optional[String] = None
    typename__: Optional[Literal["FileError"]] = Field("FileError", alias="__typename")


class FileUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    files: Optional[list[File]] = Field(default_factory=list)
    user_errors: list[FilesUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FileUpdatePayload"]] = Field("FileUpdatePayload", alias="__typename")


class FilesUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[FilesErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["FilesUserError"]] = Field("FilesUserError", alias="__typename")


class FilterOption(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    label: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["FilterOption"]] = Field("FilterOption", alias="__typename")


class FinancialSummaryDiscountAllocation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    approximate_allocated_amount_per_item: Optional[MoneyBag] = Field(None, alias="approximateAllocatedAmountPerItem")
    discount_application: Optional[FinancialSummaryDiscountApplication] = Field(None, alias="discountApplication")
    typename__: Optional[Literal["FinancialSummaryDiscountAllocation"]] = Field(
        "FinancialSummaryDiscountAllocation", alias="__typename"
    )


class FinancialSummaryDiscountApplication(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocation_method: Optional[DiscountApplicationAllocationMethod] = Field(None, alias="allocationMethod")
    target_selection: Optional[DiscountApplicationTargetSelection] = Field(None, alias="targetSelection")
    target_type: Optional[DiscountApplicationTargetType] = Field(None, alias="targetType")
    typename__: Optional[Literal["FinancialSummaryDiscountApplication"]] = Field(
        "FinancialSummaryDiscountApplication", alias="__typename"
    )


class FlowGenerateSignaturePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    payload: Optional[String] = None
    signature: Optional[String] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FlowGenerateSignaturePayload"]] = Field(
        "FlowGenerateSignaturePayload", alias="__typename"
    )


class FlowTriggerReceivePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FlowTriggerReceivePayload"]] = Field("FlowTriggerReceivePayload", alias="__typename")


class Fulfillment(LegacyInteroperability, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    delivered_at: Optional[DateTime] = Field(None, alias="deliveredAt")
    display_status: Optional[FulfillmentDisplayStatus] = Field(None, alias="displayStatus")
    estimated_delivery_at: Optional[DateTime] = Field(None, alias="estimatedDeliveryAt")
    events: Optional[FulfillmentEventConnection] = None
    fulfillment_line_items: Optional[FulfillmentLineItemConnection] = Field(None, alias="fulfillmentLineItems")
    fulfillment_orders: Optional[FulfillmentOrderConnection] = Field(None, alias="fulfillmentOrders")
    id: Optional[ID] = None
    in_transit_at: Optional[DateTime] = Field(None, alias="inTransitAt")
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    location: Optional[Location] = None
    name: Optional[String] = None
    order: Optional[Order] = None
    origin_address: Optional[FulfillmentOriginAddress] = Field(None, alias="originAddress")
    requires_shipping: Optional[Boolean] = Field(None, alias="requiresShipping")
    service: Optional[FulfillmentService] = None
    status: Optional[FulfillmentStatus] = None
    total_quantity: Optional[Int] = Field(None, alias="totalQuantity")
    tracking_info: list[FulfillmentTrackingInfo] = Field(default_factory=list, alias="trackingInfo")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["Fulfillment"]] = Field("Fulfillment", alias="__typename")


class FulfillmentCancelPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment: Optional[Fulfillment] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentCancelPayload"]] = Field("FulfillmentCancelPayload", alias="__typename")


class FulfillmentConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[FulfillmentEdge] = Field(default_factory=list)
    nodes: list[Fulfillment] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["FulfillmentConnection"]] = Field("FulfillmentConnection", alias="__typename")


class FulfillmentConstraintRule(HasMetafields, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    function: Optional[ShopifyFunction] = None
    id: Optional[ID] = None
    metafield: Optional[Metafield] = None
    metafields: Optional[MetafieldConnection] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    typename__: Optional[Literal["FulfillmentConstraintRule"]] = Field("FulfillmentConstraintRule", alias="__typename")


class FulfillmentConstraintRuleCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_constraint_rule: Optional[FulfillmentConstraintRule] = Field(None, alias="fulfillmentConstraintRule")
    user_errors: list[FulfillmentConstraintRuleCreateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentConstraintRuleCreatePayload"]] = Field(
        "FulfillmentConstraintRuleCreatePayload", alias="__typename"
    )


class FulfillmentConstraintRuleCreateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[FulfillmentConstraintRuleCreateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["FulfillmentConstraintRuleCreateUserError"]] = Field(
        "FulfillmentConstraintRuleCreateUserError", alias="__typename"
    )


class FulfillmentConstraintRuleDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    success: Optional[Boolean] = None
    user_errors: list[FulfillmentConstraintRuleDeleteUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentConstraintRuleDeletePayload"]] = Field(
        "FulfillmentConstraintRuleDeletePayload", alias="__typename"
    )


class FulfillmentConstraintRuleDeleteUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[FulfillmentConstraintRuleDeleteUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["FulfillmentConstraintRuleDeleteUserError"]] = Field(
        "FulfillmentConstraintRuleDeleteUserError", alias="__typename"
    )


class FulfillmentCreateV2Payload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment: Optional[Fulfillment] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentCreateV2Payload"]] = Field(
        "FulfillmentCreateV2Payload", alias="__typename"
    )


class FulfillmentEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Fulfillment] = None
    typename__: Optional[Literal["FulfillmentEdge"]] = Field("FulfillmentEdge", alias="__typename")


class FulfillmentEvent(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    city: Optional[String] = None
    country: Optional[String] = None
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    estimated_delivery_at: Optional[DateTime] = Field(None, alias="estimatedDeliveryAt")
    happened_at: Optional[DateTime] = Field(None, alias="happenedAt")
    id: Optional[ID] = None
    latitude: Optional[Float] = None
    longitude: Optional[Float] = None
    message: Optional[String] = None
    province: Optional[String] = None
    status: Optional[FulfillmentEventStatus] = None
    zip: Optional[String] = None
    typename__: Optional[Literal["FulfillmentEvent"]] = Field("FulfillmentEvent", alias="__typename")


class FulfillmentEventConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[FulfillmentEventEdge] = Field(default_factory=list)
    nodes: list[FulfillmentEvent] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["FulfillmentEventConnection"]] = Field(
        "FulfillmentEventConnection", alias="__typename"
    )


class FulfillmentEventCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_event: Optional[FulfillmentEvent] = Field(None, alias="fulfillmentEvent")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentEventCreatePayload"]] = Field(
        "FulfillmentEventCreatePayload", alias="__typename"
    )


class FulfillmentEventEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[FulfillmentEvent] = None
    typename__: Optional[Literal["FulfillmentEventEdge"]] = Field("FulfillmentEventEdge", alias="__typename")


class FulfillmentHold(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    held_by: Optional[String] = Field(None, alias="heldBy")
    held_by_requesting_app: Optional[Boolean] = Field(None, alias="heldByRequestingApp")
    reason: Optional[FulfillmentHoldReason] = None
    reason_notes: Optional[String] = Field(None, alias="reasonNotes")
    typename__: Optional[Literal["FulfillmentHold"]] = Field("FulfillmentHold", alias="__typename")


class FulfillmentLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    discounted_total: Optional[Money] = Field(None, alias="discountedTotal")
    discounted_total_set: Optional[MoneyBag] = Field(None, alias="discountedTotalSet")
    id: Optional[ID] = None
    line_item: Optional[LineItem] = Field(None, alias="lineItem")
    original_total: Optional[Money] = Field(None, alias="originalTotal")
    original_total_set: Optional[MoneyBag] = Field(None, alias="originalTotalSet")
    quantity: Optional[Int] = None
    typename__: Optional[Literal["FulfillmentLineItem"]] = Field("FulfillmentLineItem", alias="__typename")


class FulfillmentLineItemConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[FulfillmentLineItemEdge] = Field(default_factory=list)
    nodes: list[FulfillmentLineItem] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["FulfillmentLineItemConnection"]] = Field(
        "FulfillmentLineItemConnection", alias="__typename"
    )


class FulfillmentLineItemEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[FulfillmentLineItem] = None
    typename__: Optional[Literal["FulfillmentLineItemEdge"]] = Field("FulfillmentLineItemEdge", alias="__typename")


class FulfillmentOrder(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    assigned_location: Optional[FulfillmentOrderAssignedLocation] = Field(None, alias="assignedLocation")
    channel_id: Optional[ID] = Field(None, alias="channelId")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    delivery_method: Optional[DeliveryMethod] = Field(None, alias="deliveryMethod")
    destination: Optional[FulfillmentOrderDestination] = None
    fulfill_at: Optional[DateTime] = Field(None, alias="fulfillAt")
    fulfill_by: Optional[DateTime] = Field(None, alias="fulfillBy")
    fulfillment_holds: list[FulfillmentHold] = Field(default_factory=list, alias="fulfillmentHolds")
    fulfillment_orders_for_merge: Optional[FulfillmentOrderConnection] = Field(None, alias="fulfillmentOrdersForMerge")
    fulfillments: Optional[FulfillmentConnection] = None
    id: Optional[ID] = None
    international_duties: Optional[FulfillmentOrderInternationalDuties] = Field(None, alias="internationalDuties")
    line_items: Optional[FulfillmentOrderLineItemConnection] = Field(None, alias="lineItems")
    locations_for_move: Optional[FulfillmentOrderLocationForMoveConnection] = Field(None, alias="locationsForMove")
    merchant_requests: Optional[FulfillmentOrderMerchantRequestConnection] = Field(None, alias="merchantRequests")
    order: Optional[Order] = None
    order_id: Optional[ID] = Field(None, alias="orderId")
    order_name: Optional[String] = Field(None, alias="orderName")
    order_processed_at: Optional[DateTime] = Field(None, alias="orderProcessedAt")
    request_status: Optional[FulfillmentOrderRequestStatus] = Field(None, alias="requestStatus")
    status: Optional[FulfillmentOrderStatus] = None
    supported_actions: list[FulfillmentOrderSupportedAction] = Field(default_factory=list, alias="supportedActions")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["FulfillmentOrder"]] = Field("FulfillmentOrder", alias="__typename")


class FulfillmentOrderAcceptCancellationRequestPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="fulfillmentOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrderAcceptCancellationRequestPayload"]] = Field(
        "FulfillmentOrderAcceptCancellationRequestPayload", alias="__typename"
    )


class FulfillmentOrderAcceptFulfillmentRequestPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="fulfillmentOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrderAcceptFulfillmentRequestPayload"]] = Field(
        "FulfillmentOrderAcceptFulfillmentRequestPayload", alias="__typename"
    )


class FulfillmentOrderAssignedLocation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    address2: Optional[String] = None
    city: Optional[String] = None
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    location: Optional[Location] = None
    name: Optional[String] = None
    phone: Optional[String] = None
    province: Optional[String] = None
    zip: Optional[String] = None
    typename__: Optional[Literal["FulfillmentOrderAssignedLocation"]] = Field(
        "FulfillmentOrderAssignedLocation", alias="__typename"
    )


class FulfillmentOrderCancelPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="fulfillmentOrder")
    replacement_fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="replacementFulfillmentOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrderCancelPayload"]] = Field(
        "FulfillmentOrderCancelPayload", alias="__typename"
    )


class FulfillmentOrderClosePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="fulfillmentOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrderClosePayload"]] = Field(
        "FulfillmentOrderClosePayload", alias="__typename"
    )


class FulfillmentOrderConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[FulfillmentOrderEdge] = Field(default_factory=list)
    nodes: list[FulfillmentOrder] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["FulfillmentOrderConnection"]] = Field(
        "FulfillmentOrderConnection", alias="__typename"
    )


class FulfillmentOrderDestination(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    address2: Optional[String] = None
    city: Optional[String] = None
    company: Optional[String] = None
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    email: Optional[String] = None
    first_name: Optional[String] = Field(None, alias="firstName")
    id: Optional[ID] = None
    last_name: Optional[String] = Field(None, alias="lastName")
    phone: Optional[String] = None
    province: Optional[String] = None
    zip: Optional[String] = None
    typename__: Optional[Literal["FulfillmentOrderDestination"]] = Field(
        "FulfillmentOrderDestination", alias="__typename"
    )


class FulfillmentOrderEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[FulfillmentOrder] = None
    typename__: Optional[Literal["FulfillmentOrderEdge"]] = Field("FulfillmentOrderEdge", alias="__typename")


class FulfillmentOrderHoldPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_hold: Optional[FulfillmentHold] = Field(None, alias="fulfillmentHold")
    fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="fulfillmentOrder")
    remaining_fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="remainingFulfillmentOrder")
    user_errors: list[FulfillmentOrderHoldUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrderHoldPayload"]] = Field(
        "FulfillmentOrderHoldPayload", alias="__typename"
    )


class FulfillmentOrderHoldUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[FulfillmentOrderHoldUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["FulfillmentOrderHoldUserError"]] = Field(
        "FulfillmentOrderHoldUserError", alias="__typename"
    )


class FulfillmentOrderInternationalDuties(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    incoterm: Optional[String] = None
    typename__: Optional[Literal["FulfillmentOrderInternationalDuties"]] = Field(
        "FulfillmentOrderInternationalDuties", alias="__typename"
    )


class FulfillmentOrderLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    financial_summaries: list[FulfillmentOrderLineItemFinancialSummary] = Field(
        default_factory=list, alias="financialSummaries"
    )
    id: Optional[ID] = None
    image: Optional[Image] = None
    inventory_item_id: Optional[ID] = Field(None, alias="inventoryItemId")
    line_item: Optional[LineItem] = Field(None, alias="lineItem")
    original_unit_price_set: Optional[MoneyBag] = Field(None, alias="originalUnitPriceSet")
    product_title: Optional[String] = Field(None, alias="productTitle")
    remaining_quantity: Optional[Int] = Field(None, alias="remainingQuantity")
    requires_shipping: Optional[Boolean] = Field(None, alias="requiresShipping")
    sku: Optional[String] = None
    total_quantity: Optional[Int] = Field(None, alias="totalQuantity")
    variant: Optional[ProductVariant] = None
    variant_title: Optional[String] = Field(None, alias="variantTitle")
    vendor: Optional[String] = None
    warnings: list[FulfillmentOrderLineItemWarning] = Field(default_factory=list)
    weight: Optional[Weight] = None
    typename__: Optional[Literal["FulfillmentOrderLineItem"]] = Field("FulfillmentOrderLineItem", alias="__typename")


class FulfillmentOrderLineItemConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[FulfillmentOrderLineItemEdge] = Field(default_factory=list)
    nodes: list[FulfillmentOrderLineItem] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["FulfillmentOrderLineItemConnection"]] = Field(
        "FulfillmentOrderLineItemConnection", alias="__typename"
    )


class FulfillmentOrderLineItemEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[FulfillmentOrderLineItem] = None
    typename__: Optional[Literal["FulfillmentOrderLineItemEdge"]] = Field(
        "FulfillmentOrderLineItemEdge", alias="__typename"
    )


class FulfillmentOrderLineItemFinancialSummary(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    approximate_discounted_unit_price_set: Optional[MoneyBag] = Field(None, alias="approximateDiscountedUnitPriceSet")
    discount_allocations: list[FinancialSummaryDiscountAllocation] = Field(
        default_factory=list, alias="discountAllocations"
    )
    original_unit_price_set: Optional[MoneyBag] = Field(None, alias="originalUnitPriceSet")
    quantity: Optional[Int] = None
    typename__: Optional[Literal["FulfillmentOrderLineItemFinancialSummary"]] = Field(
        "FulfillmentOrderLineItemFinancialSummary", alias="__typename"
    )


class FulfillmentOrderLineItemWarning(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[String] = None
    title: Optional[String] = None
    typename__: Optional[Literal["FulfillmentOrderLineItemWarning"]] = Field(
        "FulfillmentOrderLineItemWarning", alias="__typename"
    )


class FulfillmentOrderLineItemsPreparedForPickupPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[FulfillmentOrderLineItemsPreparedForPickupUserError] = Field(
        default_factory=list, alias="userErrors"
    )
    typename__: Optional[Literal["FulfillmentOrderLineItemsPreparedForPickupPayload"]] = Field(
        "FulfillmentOrderLineItemsPreparedForPickupPayload", alias="__typename"
    )


class FulfillmentOrderLineItemsPreparedForPickupUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[FulfillmentOrderLineItemsPreparedForPickupUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["FulfillmentOrderLineItemsPreparedForPickupUserError"]] = Field(
        "FulfillmentOrderLineItemsPreparedForPickupUserError", alias="__typename"
    )


class FulfillmentOrderLocationForMove(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    available_line_items: Optional[FulfillmentOrderLineItemConnection] = Field(None, alias="availableLineItems")
    available_line_items_count: Optional[Count] = Field(None, alias="availableLineItemsCount")
    location: Optional[Location] = None
    message: Optional[String] = None
    movable: Optional[Boolean] = None
    unavailable_line_items: Optional[FulfillmentOrderLineItemConnection] = Field(None, alias="unavailableLineItems")
    unavailable_line_items_count: Optional[Count] = Field(None, alias="unavailableLineItemsCount")
    typename__: Optional[Literal["FulfillmentOrderLocationForMove"]] = Field(
        "FulfillmentOrderLocationForMove", alias="__typename"
    )


class FulfillmentOrderLocationForMoveConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[FulfillmentOrderLocationForMoveEdge] = Field(default_factory=list)
    nodes: list[FulfillmentOrderLocationForMove] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["FulfillmentOrderLocationForMoveConnection"]] = Field(
        "FulfillmentOrderLocationForMoveConnection", alias="__typename"
    )


class FulfillmentOrderLocationForMoveEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[FulfillmentOrderLocationForMove] = None
    typename__: Optional[Literal["FulfillmentOrderLocationForMoveEdge"]] = Field(
        "FulfillmentOrderLocationForMoveEdge", alias="__typename"
    )


class FulfillmentOrderMerchantRequest(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="fulfillmentOrder")
    id: Optional[ID] = None
    kind: Optional[FulfillmentOrderMerchantRequestKind] = None
    message: Optional[String] = None
    request_options: Optional[JSON] = Field(None, alias="requestOptions")
    response_data: Optional[JSON] = Field(None, alias="responseData")
    sent_at: Optional[DateTime] = Field(None, alias="sentAt")
    typename__: Optional[Literal["FulfillmentOrderMerchantRequest"]] = Field(
        "FulfillmentOrderMerchantRequest", alias="__typename"
    )


class FulfillmentOrderMerchantRequestConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[FulfillmentOrderMerchantRequestEdge] = Field(default_factory=list)
    nodes: list[FulfillmentOrderMerchantRequest] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["FulfillmentOrderMerchantRequestConnection"]] = Field(
        "FulfillmentOrderMerchantRequestConnection", alias="__typename"
    )


class FulfillmentOrderMerchantRequestEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[FulfillmentOrderMerchantRequest] = None
    typename__: Optional[Literal["FulfillmentOrderMerchantRequestEdge"]] = Field(
        "FulfillmentOrderMerchantRequestEdge", alias="__typename"
    )


class FulfillmentOrderMergePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order_merges: Optional[list[FulfillmentOrderMergeResult]] = Field(
        default_factory=list, alias="fulfillmentOrderMerges"
    )
    user_errors: list[FulfillmentOrderMergeUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrderMergePayload"]] = Field(
        "FulfillmentOrderMergePayload", alias="__typename"
    )


class FulfillmentOrderMergeResult(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="fulfillmentOrder")
    typename__: Optional[Literal["FulfillmentOrderMergeResult"]] = Field(
        "FulfillmentOrderMergeResult", alias="__typename"
    )


class FulfillmentOrderMergeUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[FulfillmentOrderMergeUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["FulfillmentOrderMergeUserError"]] = Field(
        "FulfillmentOrderMergeUserError", alias="__typename"
    )


class FulfillmentOrderMovePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    moved_fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="movedFulfillmentOrder")
    original_fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="originalFulfillmentOrder")
    remaining_fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="remainingFulfillmentOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrderMovePayload"]] = Field(
        "FulfillmentOrderMovePayload", alias="__typename"
    )


class FulfillmentOrderOpenPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="fulfillmentOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrderOpenPayload"]] = Field(
        "FulfillmentOrderOpenPayload", alias="__typename"
    )


class FulfillmentOrderRejectCancellationRequestPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="fulfillmentOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrderRejectCancellationRequestPayload"]] = Field(
        "FulfillmentOrderRejectCancellationRequestPayload", alias="__typename"
    )


class FulfillmentOrderRejectFulfillmentRequestPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="fulfillmentOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrderRejectFulfillmentRequestPayload"]] = Field(
        "FulfillmentOrderRejectFulfillmentRequestPayload", alias="__typename"
    )


class FulfillmentOrderReleaseHoldPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="fulfillmentOrder")
    user_errors: list[FulfillmentOrderReleaseHoldUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrderReleaseHoldPayload"]] = Field(
        "FulfillmentOrderReleaseHoldPayload", alias="__typename"
    )


class FulfillmentOrderReleaseHoldUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[FulfillmentOrderReleaseHoldUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["FulfillmentOrderReleaseHoldUserError"]] = Field(
        "FulfillmentOrderReleaseHoldUserError", alias="__typename"
    )


class FulfillmentOrderReschedulePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="fulfillmentOrder")
    user_errors: list[FulfillmentOrderRescheduleUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrderReschedulePayload"]] = Field(
        "FulfillmentOrderReschedulePayload", alias="__typename"
    )


class FulfillmentOrderRescheduleUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[FulfillmentOrderRescheduleUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["FulfillmentOrderRescheduleUserError"]] = Field(
        "FulfillmentOrderRescheduleUserError", alias="__typename"
    )


class FulfillmentOrderSplitPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order_splits: Optional[list[FulfillmentOrderSplitResult]] = Field(
        default_factory=list, alias="fulfillmentOrderSplits"
    )
    user_errors: list[FulfillmentOrderSplitUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrderSplitPayload"]] = Field(
        "FulfillmentOrderSplitPayload", alias="__typename"
    )


class FulfillmentOrderSplitResult(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="fulfillmentOrder")
    remaining_fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="remainingFulfillmentOrder")
    replacement_fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="replacementFulfillmentOrder")
    typename__: Optional[Literal["FulfillmentOrderSplitResult"]] = Field(
        "FulfillmentOrderSplitResult", alias="__typename"
    )


class FulfillmentOrderSplitUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[FulfillmentOrderSplitUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["FulfillmentOrderSplitUserError"]] = Field(
        "FulfillmentOrderSplitUserError", alias="__typename"
    )


class FulfillmentOrderSubmitCancellationRequestPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="fulfillmentOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrderSubmitCancellationRequestPayload"]] = Field(
        "FulfillmentOrderSubmitCancellationRequestPayload", alias="__typename"
    )


class FulfillmentOrderSubmitFulfillmentRequestPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    original_fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="originalFulfillmentOrder")
    submitted_fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="submittedFulfillmentOrder")
    unsubmitted_fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="unsubmittedFulfillmentOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrderSubmitFulfillmentRequestPayload"]] = Field(
        "FulfillmentOrderSubmitFulfillmentRequestPayload", alias="__typename"
    )


class FulfillmentOrderSupportedAction(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    action: Optional[FulfillmentOrderAction] = None
    external_url: Optional[URL] = Field(None, alias="externalUrl")
    typename__: Optional[Literal["FulfillmentOrderSupportedAction"]] = Field(
        "FulfillmentOrderSupportedAction", alias="__typename"
    )


class FulfillmentOrdersReleaseHoldsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[FulfillmentOrdersReleaseHoldsUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentOrdersReleaseHoldsPayload"]] = Field(
        "FulfillmentOrdersReleaseHoldsPayload", alias="__typename"
    )


class FulfillmentOrdersReleaseHoldsUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[FulfillmentOrdersReleaseHoldsUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["FulfillmentOrdersReleaseHoldsUserError"]] = Field(
        "FulfillmentOrdersReleaseHoldsUserError", alias="__typename"
    )


class FulfillmentOrdersSetFulfillmentDeadlinePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    success: Optional[Boolean] = None
    user_errors: list[FulfillmentOrdersSetFulfillmentDeadlineUserError] = Field(
        default_factory=list, alias="userErrors"
    )
    typename__: Optional[Literal["FulfillmentOrdersSetFulfillmentDeadlinePayload"]] = Field(
        "FulfillmentOrdersSetFulfillmentDeadlinePayload", alias="__typename"
    )


class FulfillmentOrdersSetFulfillmentDeadlineUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["FulfillmentOrdersSetFulfillmentDeadlineUserError"]] = Field(
        "FulfillmentOrdersSetFulfillmentDeadlineUserError", alias="__typename"
    )


class FulfillmentOriginAddress(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    address2: Optional[String] = None
    city: Optional[String] = None
    country_code: Optional[String] = Field(None, alias="countryCode")
    province_code: Optional[String] = Field(None, alias="provinceCode")
    zip: Optional[String] = None
    typename__: Optional[Literal["FulfillmentOriginAddress"]] = Field("FulfillmentOriginAddress", alias="__typename")


class FulfillmentService(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    callback_url: Optional[URL] = Field(None, alias="callbackUrl")
    fulfillment_orders_opt_in: Optional[Boolean] = Field(None, alias="fulfillmentOrdersOptIn")
    handle: Optional[String] = None
    id: Optional[ID] = None
    inventory_management: Optional[Boolean] = Field(None, alias="inventoryManagement")
    location: Optional[Location] = None
    permits_sku_sharing: Optional[Boolean] = Field(None, alias="permitsSkuSharing")
    service_name: Optional[String] = Field(None, alias="serviceName")
    shipping_methods: list[ShippingMethod] = Field(default_factory=list, alias="shippingMethods")
    tracking_support: Optional[Boolean] = Field(None, alias="trackingSupport")
    type: Optional[FulfillmentServiceType] = None
    typename__: Optional[Literal["FulfillmentService"]] = Field("FulfillmentService", alias="__typename")


class FulfillmentServiceCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_service: Optional[FulfillmentService] = Field(None, alias="fulfillmentService")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentServiceCreatePayload"]] = Field(
        "FulfillmentServiceCreatePayload", alias="__typename"
    )


class FulfillmentServiceDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentServiceDeletePayload"]] = Field(
        "FulfillmentServiceDeletePayload", alias="__typename"
    )


class FulfillmentServiceUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_service: Optional[FulfillmentService] = Field(None, alias="fulfillmentService")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentServiceUpdatePayload"]] = Field(
        "FulfillmentServiceUpdatePayload", alias="__typename"
    )


class FulfillmentTrackingInfo(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company: Optional[String] = None
    number: Optional[String] = None
    url: Optional[URL] = None
    typename__: Optional[Literal["FulfillmentTrackingInfo"]] = Field("FulfillmentTrackingInfo", alias="__typename")


class FulfillmentTrackingInfoUpdateV2Payload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment: Optional[Fulfillment] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["FulfillmentTrackingInfoUpdateV2Payload"]] = Field(
        "FulfillmentTrackingInfoUpdateV2Payload", alias="__typename"
    )


class FunctionsAppBridge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    create_path: Optional[String] = Field(None, alias="createPath")
    details_path: Optional[String] = Field(None, alias="detailsPath")
    typename__: Optional[Literal["FunctionsAppBridge"]] = Field("FunctionsAppBridge", alias="__typename")


class FunctionsErrorHistory(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    errors_first_occurred_at: Optional[DateTime] = Field(None, alias="errorsFirstOccurredAt")
    first_occurred_at: Optional[DateTime] = Field(None, alias="firstOccurredAt")
    has_been_shared_since_last_error: Optional[Boolean] = Field(None, alias="hasBeenSharedSinceLastError")
    has_shared_recent_errors: Optional[Boolean] = Field(None, alias="hasSharedRecentErrors")
    typename__: Optional[Literal["FunctionsErrorHistory"]] = Field("FunctionsErrorHistory", alias="__typename")


class GenericFile(File, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alt: Optional[String] = None
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    file_errors: list[FileError] = Field(default_factory=list, alias="fileErrors")
    file_status: Optional[FileStatus] = Field(None, alias="fileStatus")
    id: Optional[ID] = None
    mime_type: Optional[String] = Field(None, alias="mimeType")
    original_file_size: Optional[Int] = Field(None, alias="originalFileSize")
    preview: Optional[MediaPreviewImage] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    url: Optional[URL] = None
    typename__: Optional[Literal["GenericFile"]] = Field("GenericFile", alias="__typename")


class GiftCard(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    balance: Optional[MoneyV2] = None
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    customer: Optional[Customer] = None
    disabled_at: Optional[DateTime] = Field(None, alias="disabledAt")
    enabled: Optional[Boolean] = None
    expires_on: Optional[Date] = Field(None, alias="expiresOn")
    id: Optional[ID] = None
    initial_value: Optional[MoneyV2] = Field(None, alias="initialValue")
    last_characters: Optional[String] = Field(None, alias="lastCharacters")
    masked_code: Optional[String] = Field(None, alias="maskedCode")
    note: Optional[String] = None
    order: Optional[Order] = None
    typename__: Optional[Literal["GiftCard"]] = Field("GiftCard", alias="__typename")


class GiftCardConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[GiftCardEdge] = Field(default_factory=list)
    nodes: list[GiftCard] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["GiftCardConnection"]] = Field("GiftCardConnection", alias="__typename")


class GiftCardCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    gift_card: Optional[GiftCard] = Field(None, alias="giftCard")
    gift_card_code: Optional[String] = Field(None, alias="giftCardCode")
    user_errors: list[GiftCardUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["GiftCardCreatePayload"]] = Field("GiftCardCreatePayload", alias="__typename")


class GiftCardDisablePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    gift_card: Optional[GiftCard] = Field(None, alias="giftCard")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["GiftCardDisablePayload"]] = Field("GiftCardDisablePayload", alias="__typename")


class GiftCardEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[GiftCard] = None
    typename__: Optional[Literal["GiftCardEdge"]] = Field("GiftCardEdge", alias="__typename")


class GiftCardSale(Sale):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    action_type: Optional[SaleActionType] = Field(None, alias="actionType")
    id: Optional[ID] = None
    line_item: Optional[LineItem] = Field(None, alias="lineItem")
    line_type: Optional[SaleLineType] = Field(None, alias="lineType")
    quantity: Optional[Int] = None
    taxes: list[SaleTax] = Field(default_factory=list)
    total_amount: Optional[MoneyBag] = Field(None, alias="totalAmount")
    total_discount_amount_after_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountAfterTaxes")
    total_discount_amount_before_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountBeforeTaxes")
    total_tax_amount: Optional[MoneyBag] = Field(None, alias="totalTaxAmount")
    typename__: Optional[Literal["GiftCardSale"]] = Field("GiftCardSale", alias="__typename")


class GiftCardUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    gift_card: Optional[GiftCard] = Field(None, alias="giftCard")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["GiftCardUpdatePayload"]] = Field("GiftCardUpdatePayload", alias="__typename")


class GiftCardUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[GiftCardErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["GiftCardUserError"]] = Field("GiftCardUserError", alias="__typename")


class Image(HasMetafields):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alt_text: Optional[String] = Field(None, alias="altText")
    height: Optional[Int] = None
    id: Optional[ID] = None
    metafield: Optional[Metafield] = None
    metafields: Optional[MetafieldConnection] = None
    original_src: Optional[URL] = Field(None, alias="originalSrc")
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    src: Optional[URL] = None
    transformed_src: Optional[URL] = Field(None, alias="transformedSrc")
    url: Optional[URL] = None
    width: Optional[Int] = None
    typename__: Optional[Literal["Image"]] = Field("Image", alias="__typename")


class ImageConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ImageEdge] = Field(default_factory=list)
    nodes: list[Image] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ImageConnection"]] = Field("ImageConnection", alias="__typename")


class ImageEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Image] = None
    typename__: Optional[Literal["ImageEdge"]] = Field("ImageEdge", alias="__typename")


class ImageUploadParameter(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["ImageUploadParameter"]] = Field("ImageUploadParameter", alias="__typename")


class InventoryActivatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    inventory_level: Optional[InventoryLevel] = Field(None, alias="inventoryLevel")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["InventoryActivatePayload"]] = Field("InventoryActivatePayload", alias="__typename")


class InventoryAdjustQuantitiesPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    inventory_adjustment_group: Optional[InventoryAdjustmentGroup] = Field(None, alias="inventoryAdjustmentGroup")
    user_errors: list[InventoryAdjustQuantitiesUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["InventoryAdjustQuantitiesPayload"]] = Field(
        "InventoryAdjustQuantitiesPayload", alias="__typename"
    )


class InventoryAdjustQuantitiesUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[InventoryAdjustQuantitiesUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["InventoryAdjustQuantitiesUserError"]] = Field(
        "InventoryAdjustQuantitiesUserError", alias="__typename"
    )


class InventoryAdjustmentGroup(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    changes: list[InventoryChange] = Field(default_factory=list)
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    id: Optional[ID] = None
    reason: Optional[String] = None
    reference_document_uri: Optional[String] = Field(None, alias="referenceDocumentUri")
    staff_member: Optional[StaffMember] = Field(None, alias="staffMember")
    typename__: Optional[Literal["InventoryAdjustmentGroup"]] = Field("InventoryAdjustmentGroup", alias="__typename")


class InventoryBulkToggleActivationPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    inventory_item: Optional[InventoryItem] = Field(None, alias="inventoryItem")
    inventory_levels: Optional[list[InventoryLevel]] = Field(default_factory=list, alias="inventoryLevels")
    user_errors: list[InventoryBulkToggleActivationUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["InventoryBulkToggleActivationPayload"]] = Field(
        "InventoryBulkToggleActivationPayload", alias="__typename"
    )


class InventoryBulkToggleActivationUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[InventoryBulkToggleActivationUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["InventoryBulkToggleActivationUserError"]] = Field(
        "InventoryBulkToggleActivationUserError", alias="__typename"
    )


class InventoryChange(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    delta: Optional[Int] = None
    item: Optional[InventoryItem] = None
    ledger_document_uri: Optional[String] = Field(None, alias="ledgerDocumentUri")
    location: Optional[Location] = None
    name: Optional[String] = None
    quantity_after_change: Optional[Int] = Field(None, alias="quantityAfterChange")
    typename__: Optional[Literal["InventoryChange"]] = Field("InventoryChange", alias="__typename")


class InventoryDeactivatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["InventoryDeactivatePayload"]] = Field(
        "InventoryDeactivatePayload", alias="__typename"
    )


class InventoryItem(LegacyInteroperability, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country_code_of_origin: Optional[CountryCode] = Field(None, alias="countryCodeOfOrigin")
    country_harmonized_system_codes: Optional[CountryHarmonizedSystemCodeConnection] = Field(
        None, alias="countryHarmonizedSystemCodes"
    )
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    duplicate_sku_count: Optional[Int] = Field(None, alias="duplicateSkuCount")
    harmonized_system_code: Optional[String] = Field(None, alias="harmonizedSystemCode")
    id: Optional[ID] = None
    inventory_history_url: Optional[URL] = Field(None, alias="inventoryHistoryUrl")
    inventory_level: Optional[InventoryLevel] = Field(None, alias="inventoryLevel")
    inventory_levels: Optional[InventoryLevelConnection] = Field(None, alias="inventoryLevels")
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    locations_count: Optional[Count] = Field(None, alias="locationsCount")
    measurement: Optional[InventoryItemMeasurement] = None
    province_code_of_origin: Optional[String] = Field(None, alias="provinceCodeOfOrigin")
    requires_shipping: Optional[Boolean] = Field(None, alias="requiresShipping")
    sku: Optional[String] = None
    tracked: Optional[Boolean] = None
    tracked_editable: Optional[EditableProperty] = Field(None, alias="trackedEditable")
    unit_cost: Optional[MoneyV2] = Field(None, alias="unitCost")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    variant: Optional[ProductVariant] = None
    typename__: Optional[Literal["InventoryItem"]] = Field("InventoryItem", alias="__typename")


class InventoryItemConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[InventoryItemEdge] = Field(default_factory=list)
    nodes: list[InventoryItem] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["InventoryItemConnection"]] = Field("InventoryItemConnection", alias="__typename")


class InventoryItemEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[InventoryItem] = None
    typename__: Optional[Literal["InventoryItemEdge"]] = Field("InventoryItemEdge", alias="__typename")


class InventoryItemMeasurement(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    weight: Optional[Weight] = None
    typename__: Optional[Literal["InventoryItemMeasurement"]] = Field("InventoryItemMeasurement", alias="__typename")


class InventoryItemUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    inventory_item: Optional[InventoryItem] = Field(None, alias="inventoryItem")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["InventoryItemUpdatePayload"]] = Field(
        "InventoryItemUpdatePayload", alias="__typename"
    )


class InventoryLevel(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    can_deactivate: Optional[Boolean] = Field(None, alias="canDeactivate")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    deactivation_alert: Optional[String] = Field(None, alias="deactivationAlert")
    id: Optional[ID] = None
    item: Optional[InventoryItem] = None
    location: Optional[Location] = None
    quantities: list[InventoryQuantity] = Field(default_factory=list)
    scheduled_changes: Optional[InventoryScheduledChangeConnection] = Field(None, alias="scheduledChanges")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["InventoryLevel"]] = Field("InventoryLevel", alias="__typename")


class InventoryLevelConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[InventoryLevelEdge] = Field(default_factory=list)
    nodes: list[InventoryLevel] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["InventoryLevelConnection"]] = Field("InventoryLevelConnection", alias="__typename")


class InventoryLevelEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[InventoryLevel] = None
    typename__: Optional[Literal["InventoryLevelEdge"]] = Field("InventoryLevelEdge", alias="__typename")


class InventoryMoveQuantitiesPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    inventory_adjustment_group: Optional[InventoryAdjustmentGroup] = Field(None, alias="inventoryAdjustmentGroup")
    user_errors: list[InventoryMoveQuantitiesUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["InventoryMoveQuantitiesPayload"]] = Field(
        "InventoryMoveQuantitiesPayload", alias="__typename"
    )


class InventoryMoveQuantitiesUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[InventoryMoveQuantitiesUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["InventoryMoveQuantitiesUserError"]] = Field(
        "InventoryMoveQuantitiesUserError", alias="__typename"
    )


class InventoryProperties(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    quantity_names: list[InventoryQuantityName] = Field(default_factory=list, alias="quantityNames")
    typename__: Optional[Literal["InventoryProperties"]] = Field("InventoryProperties", alias="__typename")


class InventoryQuantity(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    name: Optional[String] = None
    quantity: Optional[Int] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["InventoryQuantity"]] = Field("InventoryQuantity", alias="__typename")


class InventoryQuantityName(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    belongs_to: list[String] = Field(default_factory=list, alias="belongsTo")
    comprises: list[String] = Field(default_factory=list)
    display_name: Optional[String] = Field(None, alias="displayName")
    is_in_use: Optional[Boolean] = Field(None, alias="isInUse")
    name: Optional[String] = None
    typename__: Optional[Literal["InventoryQuantityName"]] = Field("InventoryQuantityName", alias="__typename")


class InventoryScheduledChange(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    expected_at: Optional[DateTime] = Field(None, alias="expectedAt")
    from_name: Optional[String] = Field(None, alias="fromName")
    inventory_level: Optional[InventoryLevel] = Field(None, alias="inventoryLevel")
    ledger_document_uri: Optional[URL] = Field(None, alias="ledgerDocumentUri")
    quantity: Optional[Int] = None
    to_name: Optional[String] = Field(None, alias="toName")
    typename__: Optional[Literal["InventoryScheduledChange"]] = Field("InventoryScheduledChange", alias="__typename")


class InventoryScheduledChangeConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[InventoryScheduledChangeEdge] = Field(default_factory=list)
    nodes: list[InventoryScheduledChange] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["InventoryScheduledChangeConnection"]] = Field(
        "InventoryScheduledChangeConnection", alias="__typename"
    )


class InventoryScheduledChangeEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[InventoryScheduledChange] = None
    typename__: Optional[Literal["InventoryScheduledChangeEdge"]] = Field(
        "InventoryScheduledChangeEdge", alias="__typename"
    )


class InventorySetOnHandQuantitiesPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    inventory_adjustment_group: Optional[InventoryAdjustmentGroup] = Field(None, alias="inventoryAdjustmentGroup")
    user_errors: list[InventorySetOnHandQuantitiesUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["InventorySetOnHandQuantitiesPayload"]] = Field(
        "InventorySetOnHandQuantitiesPayload", alias="__typename"
    )


class InventorySetOnHandQuantitiesUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[InventorySetOnHandQuantitiesUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["InventorySetOnHandQuantitiesUserError"]] = Field(
        "InventorySetOnHandQuantitiesUserError", alias="__typename"
    )


class InventorySetQuantitiesPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    inventory_adjustment_group: Optional[InventoryAdjustmentGroup] = Field(None, alias="inventoryAdjustmentGroup")
    user_errors: list[InventorySetQuantitiesUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["InventorySetQuantitiesPayload"]] = Field(
        "InventorySetQuantitiesPayload", alias="__typename"
    )


class InventorySetQuantitiesUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[InventorySetQuantitiesUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["InventorySetQuantitiesUserError"]] = Field(
        "InventorySetQuantitiesUserError", alias="__typename"
    )


class InventorySetScheduledChangesPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    scheduled_changes: Optional[list[InventoryScheduledChange]] = Field(default_factory=list, alias="scheduledChanges")
    user_errors: list[InventorySetScheduledChangesUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["InventorySetScheduledChangesPayload"]] = Field(
        "InventorySetScheduledChangesPayload", alias="__typename"
    )


class InventorySetScheduledChangesUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[InventorySetScheduledChangesUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["InventorySetScheduledChangesUserError"]] = Field(
        "InventorySetScheduledChangesUserError", alias="__typename"
    )


class Job(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    done: Optional[Boolean] = None
    id: Optional[ID] = None
    query: Optional[QueryRoot] = None
    typename__: Optional[Literal["Job"]] = Field("Job", alias="__typename")


class LimitedPendingOrderCount(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    at_max: Optional[Boolean] = Field(None, alias="atMax")
    count: Optional[Int] = None
    typename__: Optional[Literal["LimitedPendingOrderCount"]] = Field("LimitedPendingOrderCount", alias="__typename")


class LineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    can_restock: Optional[Boolean] = Field(None, alias="canRestock")
    contract: Optional[SubscriptionContract] = None
    current_quantity: Optional[Int] = Field(None, alias="currentQuantity")
    custom_attributes: list[Attribute] = Field(default_factory=list, alias="customAttributes")
    discount_allocations: list[DiscountAllocation] = Field(default_factory=list, alias="discountAllocations")
    discounted_total: Optional[Money] = Field(None, alias="discountedTotal")
    discounted_total_set: Optional[MoneyBag] = Field(None, alias="discountedTotalSet")
    discounted_unit_price: Optional[Money] = Field(None, alias="discountedUnitPrice")
    discounted_unit_price_after_all_discounts_set: Optional[MoneyBag] = Field(
        None, alias="discountedUnitPriceAfterAllDiscountsSet"
    )
    discounted_unit_price_set: Optional[MoneyBag] = Field(None, alias="discountedUnitPriceSet")
    duties: list[Duty] = Field(default_factory=list)
    fulfillable_quantity: Optional[Int] = Field(None, alias="fulfillableQuantity")
    fulfillment_service: Optional[FulfillmentService] = Field(None, alias="fulfillmentService")
    fulfillment_status: Optional[String] = Field(None, alias="fulfillmentStatus")
    id: Optional[ID] = None
    image: Optional[Image] = None
    is_gift_card: Optional[Boolean] = Field(None, alias="isGiftCard")
    line_item_group: Optional[LineItemGroup] = Field(None, alias="lineItemGroup")
    merchant_editable: Optional[Boolean] = Field(None, alias="merchantEditable")
    name: Optional[String] = None
    non_fulfillable_quantity: Optional[Int] = Field(None, alias="nonFulfillableQuantity")
    original_total: Optional[Money] = Field(None, alias="originalTotal")
    original_total_set: Optional[MoneyBag] = Field(None, alias="originalTotalSet")
    original_unit_price: Optional[Money] = Field(None, alias="originalUnitPrice")
    original_unit_price_set: Optional[MoneyBag] = Field(None, alias="originalUnitPriceSet")
    product: Optional[Product] = None
    quantity: Optional[Int] = None
    refundable_quantity: Optional[Int] = Field(None, alias="refundableQuantity")
    requires_shipping: Optional[Boolean] = Field(None, alias="requiresShipping")
    restockable: Optional[Boolean] = None
    selling_plan: Optional[LineItemSellingPlan] = Field(None, alias="sellingPlan")
    sku: Optional[String] = None
    staff_member: Optional[StaffMember] = Field(None, alias="staffMember")
    tax_lines: list[TaxLine] = Field(default_factory=list, alias="taxLines")
    taxable: Optional[Boolean] = None
    title: Optional[String] = None
    total_discount: Optional[Money] = Field(None, alias="totalDiscount")
    total_discount_set: Optional[MoneyBag] = Field(None, alias="totalDiscountSet")
    unfulfilled_discounted_total: Optional[Money] = Field(None, alias="unfulfilledDiscountedTotal")
    unfulfilled_discounted_total_set: Optional[MoneyBag] = Field(None, alias="unfulfilledDiscountedTotalSet")
    unfulfilled_original_total: Optional[Money] = Field(None, alias="unfulfilledOriginalTotal")
    unfulfilled_original_total_set: Optional[MoneyBag] = Field(None, alias="unfulfilledOriginalTotalSet")
    unfulfilled_quantity: Optional[Int] = Field(None, alias="unfulfilledQuantity")
    variant: Optional[ProductVariant] = None
    variant_title: Optional[String] = Field(None, alias="variantTitle")
    vendor: Optional[String] = None
    typename__: Optional[Literal["LineItem"]] = Field("LineItem", alias="__typename")


class LineItemConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[LineItemEdge] = Field(default_factory=list)
    nodes: list[LineItem] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["LineItemConnection"]] = Field("LineItemConnection", alias="__typename")


class LineItemEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[LineItem] = None
    typename__: Optional[Literal["LineItemEdge"]] = Field("LineItemEdge", alias="__typename")


class LineItemGroup(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    custom_attributes: list[Attribute] = Field(default_factory=list, alias="customAttributes")
    id: Optional[ID] = None
    quantity: Optional[Int] = None
    title: Optional[String] = None
    variant_id: Optional[ID] = Field(None, alias="variantId")
    variant_sku: Optional[String] = Field(None, alias="variantSku")
    typename__: Optional[Literal["LineItemGroup"]] = Field("LineItemGroup", alias="__typename")


class LineItemMutable(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    can_restock: Optional[Boolean] = Field(None, alias="canRestock")
    custom_attributes: list[Attribute] = Field(default_factory=list, alias="customAttributes")
    discount_allocations: list[DiscountAllocation] = Field(default_factory=list, alias="discountAllocations")
    discounted_total: Optional[Money] = Field(None, alias="discountedTotal")
    discounted_total_set: Optional[MoneyBag] = Field(None, alias="discountedTotalSet")
    discounted_unit_price: Optional[Money] = Field(None, alias="discountedUnitPrice")
    discounted_unit_price_set: Optional[MoneyBag] = Field(None, alias="discountedUnitPriceSet")
    fulfillable_quantity: Optional[Int] = Field(None, alias="fulfillableQuantity")
    fulfillment_service: Optional[FulfillmentService] = Field(None, alias="fulfillmentService")
    fulfillment_status: Optional[String] = Field(None, alias="fulfillmentStatus")
    id: Optional[ID] = None
    image: Optional[Image] = None
    is_gift_card: Optional[Boolean] = Field(None, alias="isGiftCard")
    merchant_editable: Optional[Boolean] = Field(None, alias="merchantEditable")
    name: Optional[String] = None
    non_fulfillable_quantity: Optional[Int] = Field(None, alias="nonFulfillableQuantity")
    original_total: Optional[Money] = Field(None, alias="originalTotal")
    original_total_set: Optional[MoneyBag] = Field(None, alias="originalTotalSet")
    original_unit_price: Optional[Money] = Field(None, alias="originalUnitPrice")
    original_unit_price_set: Optional[MoneyBag] = Field(None, alias="originalUnitPriceSet")
    product: Optional[Product] = None
    quantity: Optional[Int] = None
    refundable_quantity: Optional[Int] = Field(None, alias="refundableQuantity")
    requires_shipping: Optional[Boolean] = Field(None, alias="requiresShipping")
    restockable: Optional[Boolean] = None
    sku: Optional[String] = None
    staff_member: Optional[StaffMember] = Field(None, alias="staffMember")
    tax_lines: list[TaxLine] = Field(default_factory=list, alias="taxLines")
    taxable: Optional[Boolean] = None
    title: Optional[String] = None
    total_discount: Optional[Money] = Field(None, alias="totalDiscount")
    total_discount_set: Optional[MoneyBag] = Field(None, alias="totalDiscountSet")
    unfulfilled_discounted_total: Optional[Money] = Field(None, alias="unfulfilledDiscountedTotal")
    unfulfilled_discounted_total_set: Optional[MoneyBag] = Field(None, alias="unfulfilledDiscountedTotalSet")
    unfulfilled_original_total: Optional[Money] = Field(None, alias="unfulfilledOriginalTotal")
    unfulfilled_original_total_set: Optional[MoneyBag] = Field(None, alias="unfulfilledOriginalTotalSet")
    unfulfilled_quantity: Optional[Int] = Field(None, alias="unfulfilledQuantity")
    variant: Optional[ProductVariant] = None
    variant_title: Optional[String] = Field(None, alias="variantTitle")
    vendor: Optional[String] = None
    typename__: Optional[Literal["LineItemMutable"]] = Field("LineItemMutable", alias="__typename")


class LineItemMutableConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[LineItemMutableEdge] = Field(default_factory=list)
    nodes: list[LineItemMutable] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["LineItemMutableConnection"]] = Field("LineItemMutableConnection", alias="__typename")


class LineItemMutableEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[LineItemMutable] = None
    typename__: Optional[Literal["LineItemMutableEdge"]] = Field("LineItemMutableEdge", alias="__typename")


class LineItemSellingPlan(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[String] = None
    selling_plan_id: Optional[ID] = Field(None, alias="sellingPlanId")
    typename__: Optional[Literal["LineItemSellingPlan"]] = Field("LineItemSellingPlan", alias="__typename")


class Link(HasPublishedTranslations):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    label: Optional[String] = None
    translations: list[Translation] = Field(default_factory=list)
    url: Optional[URL] = None
    typename__: Optional[Literal["Link"]] = Field("Link", alias="__typename")


class LinkedMetafield(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    namespace: Optional[String] = None
    typename__: Optional[Literal["LinkedMetafield"]] = Field("LinkedMetafield", alias="__typename")


class Locale(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    iso_code: Optional[String] = Field(None, alias="isoCode")
    name: Optional[String] = None
    typename__: Optional[Literal["Locale"]] = Field("Locale", alias="__typename")


class LocalizationExtension(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    key: Optional[LocalizationExtensionKey] = None
    purpose: Optional[LocalizationExtensionPurpose] = None
    title: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["LocalizationExtension"]] = Field("LocalizationExtension", alias="__typename")


class LocalizationExtensionConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[LocalizationExtensionEdge] = Field(default_factory=list)
    nodes: list[LocalizationExtension] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["LocalizationExtensionConnection"]] = Field(
        "LocalizationExtensionConnection", alias="__typename"
    )


class LocalizationExtensionEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[LocalizationExtension] = None
    typename__: Optional[Literal["LocalizationExtensionEdge"]] = Field("LocalizationExtensionEdge", alias="__typename")


class Location(HasMetafieldDefinitions, HasMetafields, LegacyInteroperability, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    activatable: Optional[Boolean] = None
    address: Optional[LocationAddress] = None
    address_verified: Optional[Boolean] = Field(None, alias="addressVerified")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    deactivatable: Optional[Boolean] = None
    deactivated_at: Optional[String] = Field(None, alias="deactivatedAt")
    deletable: Optional[Boolean] = None
    fulfillment_service: Optional[FulfillmentService] = Field(None, alias="fulfillmentService")
    fulfills_online_orders: Optional[Boolean] = Field(None, alias="fulfillsOnlineOrders")
    has_active_inventory: Optional[Boolean] = Field(None, alias="hasActiveInventory")
    has_unfulfilled_orders: Optional[Boolean] = Field(None, alias="hasUnfulfilledOrders")
    id: Optional[ID] = None
    inventory_level: Optional[InventoryLevel] = Field(None, alias="inventoryLevel")
    inventory_levels: Optional[InventoryLevelConnection] = Field(None, alias="inventoryLevels")
    is_active: Optional[Boolean] = Field(None, alias="isActive")
    is_fulfillment_service: Optional[Boolean] = Field(None, alias="isFulfillmentService")
    is_primary: Optional[Boolean] = Field(None, alias="isPrimary")
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    local_pickup_settings_v2: Optional[DeliveryLocalPickupSettings] = Field(None, alias="localPickupSettingsV2")
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    name: Optional[String] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    ships_inventory: Optional[Boolean] = Field(None, alias="shipsInventory")
    suggested_addresses: list[LocationSuggestedAddress] = Field(default_factory=list, alias="suggestedAddresses")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["Location"]] = Field("Location", alias="__typename")


class LocationActivatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    location: Optional[Location] = None
    location_activate_user_errors: list[LocationActivateUserError] = Field(
        default_factory=list, alias="locationActivateUserErrors"
    )
    typename__: Optional[Literal["LocationActivatePayload"]] = Field("LocationActivatePayload", alias="__typename")


class LocationActivateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[LocationActivateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["LocationActivateUserError"]] = Field("LocationActivateUserError", alias="__typename")


class LocationAddPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    location: Optional[Location] = None
    user_errors: list[LocationAddUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["LocationAddPayload"]] = Field("LocationAddPayload", alias="__typename")


class LocationAddUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[LocationAddUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["LocationAddUserError"]] = Field("LocationAddUserError", alias="__typename")


class LocationAddress(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    address2: Optional[String] = None
    city: Optional[String] = None
    country: Optional[String] = None
    country_code: Optional[String] = Field(None, alias="countryCode")
    formatted: list[String] = Field(default_factory=list)
    latitude: Optional[Float] = None
    longitude: Optional[Float] = None
    phone: Optional[String] = None
    province: Optional[String] = None
    province_code: Optional[String] = Field(None, alias="provinceCode")
    zip: Optional[String] = None
    typename__: Optional[Literal["LocationAddress"]] = Field("LocationAddress", alias="__typename")


class LocationConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[LocationEdge] = Field(default_factory=list)
    nodes: list[Location] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["LocationConnection"]] = Field("LocationConnection", alias="__typename")


class LocationDeactivatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    location: Optional[Location] = None
    location_deactivate_user_errors: list[LocationDeactivateUserError] = Field(
        default_factory=list, alias="locationDeactivateUserErrors"
    )
    typename__: Optional[Literal["LocationDeactivatePayload"]] = Field("LocationDeactivatePayload", alias="__typename")


class LocationDeactivateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[LocationDeactivateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["LocationDeactivateUserError"]] = Field(
        "LocationDeactivateUserError", alias="__typename"
    )


class LocationDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_location_id: Optional[ID] = Field(None, alias="deletedLocationId")
    location_delete_user_errors: list[LocationDeleteUserError] = Field(
        default_factory=list, alias="locationDeleteUserErrors"
    )
    typename__: Optional[Literal["LocationDeletePayload"]] = Field("LocationDeletePayload", alias="__typename")


class LocationDeleteUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[LocationDeleteUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["LocationDeleteUserError"]] = Field("LocationDeleteUserError", alias="__typename")


class LocationEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Location] = None
    typename__: Optional[Literal["LocationEdge"]] = Field("LocationEdge", alias="__typename")


class LocationEditPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    location: Optional[Location] = None
    user_errors: list[LocationEditUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["LocationEditPayload"]] = Field("LocationEditPayload", alias="__typename")


class LocationEditUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[LocationEditUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["LocationEditUserError"]] = Field("LocationEditUserError", alias="__typename")


class LocationLocalPickupDisablePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    location_id: Optional[ID] = Field(None, alias="locationId")
    user_errors: list[DeliveryLocationLocalPickupSettingsError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["LocationLocalPickupDisablePayload"]] = Field(
        "LocationLocalPickupDisablePayload", alias="__typename"
    )


class LocationLocalPickupEnablePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    local_pickup_settings: Optional[DeliveryLocalPickupSettings] = Field(None, alias="localPickupSettings")
    user_errors: list[DeliveryLocationLocalPickupSettingsError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["LocationLocalPickupEnablePayload"]] = Field(
        "LocationLocalPickupEnablePayload", alias="__typename"
    )


class LocationSuggestedAddress(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    address2: Optional[String] = None
    city: Optional[String] = None
    country: Optional[String] = None
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    formatted: list[String] = Field(default_factory=list)
    province: Optional[String] = None
    province_code: Optional[String] = Field(None, alias="provinceCode")
    zip: Optional[String] = None
    typename__: Optional[Literal["LocationSuggestedAddress"]] = Field("LocationSuggestedAddress", alias="__typename")


class MailingAddress(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    address2: Optional[String] = None
    city: Optional[String] = None
    company: Optional[String] = None
    coordinates_validated: Optional[Boolean] = Field(None, alias="coordinatesValidated")
    country: Optional[String] = None
    country_code: Optional[String] = Field(None, alias="countryCode")
    country_code_v2: Optional[CountryCode] = Field(None, alias="countryCodeV2")
    first_name: Optional[String] = Field(None, alias="firstName")
    formatted: list[String] = Field(default_factory=list)
    formatted_area: Optional[String] = Field(None, alias="formattedArea")
    id: Optional[ID] = None
    last_name: Optional[String] = Field(None, alias="lastName")
    latitude: Optional[Float] = None
    longitude: Optional[Float] = None
    name: Optional[String] = None
    phone: Optional[String] = None
    province: Optional[String] = None
    province_code: Optional[String] = Field(None, alias="provinceCode")
    time_zone: Optional[String] = Field(None, alias="timeZone")
    validation_result_summary: Optional[MailingAddressValidationResult] = Field(None, alias="validationResultSummary")
    zip: Optional[String] = None
    typename__: Optional[Literal["MailingAddress"]] = Field("MailingAddress", alias="__typename")


class MailingAddressConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MailingAddressEdge] = Field(default_factory=list)
    nodes: list[MailingAddress] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MailingAddressConnection"]] = Field("MailingAddressConnection", alias="__typename")


class MailingAddressEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[MailingAddress] = None
    typename__: Optional[Literal["MailingAddressEdge"]] = Field("MailingAddressEdge", alias="__typename")


class ManualDiscountApplication(DiscountApplication):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocation_method: Optional[DiscountApplicationAllocationMethod] = Field(None, alias="allocationMethod")
    description: Optional[String] = None
    index: Optional[Int] = None
    target_selection: Optional[DiscountApplicationTargetSelection] = Field(None, alias="targetSelection")
    target_type: Optional[DiscountApplicationTargetType] = Field(None, alias="targetType")
    title: Optional[String] = None
    value: Optional[PricingValue] = None
    typename__: Optional[Literal["ManualDiscountApplication"]] = Field("ManualDiscountApplication", alias="__typename")


class Market(HasMetafieldDefinitions, HasMetafields, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    catalogs: Optional[MarketCatalogConnection] = None
    catalogs_count: Optional[Count] = Field(None, alias="catalogsCount")
    currency_settings: Optional[MarketCurrencySettings] = Field(None, alias="currencySettings")
    enabled: Optional[Boolean] = None
    handle: Optional[String] = None
    id: Optional[ID] = None
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    name: Optional[String] = None
    price_list: Optional[PriceList] = Field(None, alias="priceList")
    primary: Optional[Boolean] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    regions: Optional[MarketRegionConnection] = None
    web_presence: Optional[MarketWebPresence] = Field(None, alias="webPresence")
    web_presences: Optional[MarketWebPresenceConnection] = Field(None, alias="webPresences")
    typename__: Optional[Literal["Market"]] = Field("Market", alias="__typename")


class MarketCatalogConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MarketCatalogEdge] = Field(default_factory=list)
    nodes: list[MarketCatalog] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MarketCatalogConnection"]] = Field("MarketCatalogConnection", alias="__typename")


class MarketCatalogEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[MarketCatalog] = None
    typename__: Optional[Literal["MarketCatalogEdge"]] = Field("MarketCatalogEdge", alias="__typename")


class MarketConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MarketEdge] = Field(default_factory=list)
    nodes: list[Market] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MarketConnection"]] = Field("MarketConnection", alias="__typename")


class MarketCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    market: Optional[Market] = None
    user_errors: list[MarketUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketCreatePayload"]] = Field("MarketCreatePayload", alias="__typename")


class MarketCurrencySettings(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    base_currency: Optional[CurrencySetting] = Field(None, alias="baseCurrency")
    local_currencies: Optional[Boolean] = Field(None, alias="localCurrencies")
    typename__: Optional[Literal["MarketCurrencySettings"]] = Field("MarketCurrencySettings", alias="__typename")


class MarketCurrencySettingsUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    market: Optional[Market] = None
    user_errors: list[MarketCurrencySettingsUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketCurrencySettingsUpdatePayload"]] = Field(
        "MarketCurrencySettingsUpdatePayload", alias="__typename"
    )


class MarketCurrencySettingsUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MarketCurrencySettingsUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["MarketCurrencySettingsUserError"]] = Field(
        "MarketCurrencySettingsUserError", alias="__typename"
    )


class MarketDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[MarketUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketDeletePayload"]] = Field("MarketDeletePayload", alias="__typename")


class MarketEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Market] = None
    typename__: Optional[Literal["MarketEdge"]] = Field("MarketEdge", alias="__typename")


class MarketLocalizableContent(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    digest: Optional[String] = None
    key: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["MarketLocalizableContent"]] = Field("MarketLocalizableContent", alias="__typename")


class MarketLocalizableResource(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    market_localizable_content: list[MarketLocalizableContent] = Field(
        default_factory=list, alias="marketLocalizableContent"
    )
    market_localizations: list[MarketLocalization] = Field(default_factory=list, alias="marketLocalizations")
    resource_id: Optional[ID] = Field(None, alias="resourceId")
    typename__: Optional[Literal["MarketLocalizableResource"]] = Field("MarketLocalizableResource", alias="__typename")


class MarketLocalizableResourceConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MarketLocalizableResourceEdge] = Field(default_factory=list)
    nodes: list[MarketLocalizableResource] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MarketLocalizableResourceConnection"]] = Field(
        "MarketLocalizableResourceConnection", alias="__typename"
    )


class MarketLocalizableResourceEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[MarketLocalizableResource] = None
    typename__: Optional[Literal["MarketLocalizableResourceEdge"]] = Field(
        "MarketLocalizableResourceEdge", alias="__typename"
    )


class MarketLocalization(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    market: Optional[Market] = None
    outdated: Optional[Boolean] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    value: Optional[String] = None
    typename__: Optional[Literal["MarketLocalization"]] = Field("MarketLocalization", alias="__typename")


class MarketLocalizationsRegisterPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    market_localizations: Optional[list[MarketLocalization]] = Field(default_factory=list, alias="marketLocalizations")
    user_errors: list[TranslationUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketLocalizationsRegisterPayload"]] = Field(
        "MarketLocalizationsRegisterPayload", alias="__typename"
    )


class MarketLocalizationsRemovePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    market_localizations: Optional[list[MarketLocalization]] = Field(default_factory=list, alias="marketLocalizations")
    user_errors: list[TranslationUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketLocalizationsRemovePayload"]] = Field(
        "MarketLocalizationsRemovePayload", alias="__typename"
    )


class MarketRegionConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MarketRegionEdge] = Field(default_factory=list)
    nodes: list[MarketRegion] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MarketRegionConnection"]] = Field("MarketRegionConnection", alias="__typename")


class MarketRegionCountry(MarketRegion, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CountryCode] = None
    currency: Optional[CurrencySetting] = None
    id: Optional[ID] = None
    name: Optional[String] = None
    typename__: Optional[Literal["MarketRegionCountry"]] = Field("MarketRegionCountry", alias="__typename")


class MarketRegionDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    market: Optional[Market] = None
    user_errors: list[MarketUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketRegionDeletePayload"]] = Field("MarketRegionDeletePayload", alias="__typename")


class MarketRegionEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[MarketRegion] = None
    typename__: Optional[Literal["MarketRegionEdge"]] = Field("MarketRegionEdge", alias="__typename")


class MarketRegionsCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    market: Optional[Market] = None
    user_errors: list[MarketUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketRegionsCreatePayload"]] = Field(
        "MarketRegionsCreatePayload", alias="__typename"
    )


class MarketRegionsDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_ids: Optional[list[ID]] = Field(default_factory=list, alias="deletedIds")
    user_errors: list[MarketUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketRegionsDeletePayload"]] = Field(
        "MarketRegionsDeletePayload", alias="__typename"
    )


class MarketUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    market: Optional[Market] = None
    user_errors: list[MarketUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketUpdatePayload"]] = Field("MarketUpdatePayload", alias="__typename")


class MarketUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MarketUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["MarketUserError"]] = Field("MarketUserError", alias="__typename")


class MarketWebPresence(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alternate_locales: list[ShopLocale] = Field(default_factory=list, alias="alternateLocales")
    default_locale: Optional[ShopLocale] = Field(None, alias="defaultLocale")
    domain: Optional[Domain] = None
    id: Optional[ID] = None
    market: Optional[Market] = None
    root_urls: list[MarketWebPresenceRootUrl] = Field(default_factory=list, alias="rootUrls")
    subfolder_suffix: Optional[String] = Field(None, alias="subfolderSuffix")
    typename__: Optional[Literal["MarketWebPresence"]] = Field("MarketWebPresence", alias="__typename")


class MarketWebPresenceConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MarketWebPresenceEdge] = Field(default_factory=list)
    nodes: list[MarketWebPresence] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MarketWebPresenceConnection"]] = Field(
        "MarketWebPresenceConnection", alias="__typename"
    )


class MarketWebPresenceCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    market: Optional[Market] = None
    user_errors: list[MarketUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketWebPresenceCreatePayload"]] = Field(
        "MarketWebPresenceCreatePayload", alias="__typename"
    )


class MarketWebPresenceDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    market: Optional[Market] = None
    user_errors: list[MarketUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketWebPresenceDeletePayload"]] = Field(
        "MarketWebPresenceDeletePayload", alias="__typename"
    )


class MarketWebPresenceEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[MarketWebPresence] = None
    typename__: Optional[Literal["MarketWebPresenceEdge"]] = Field("MarketWebPresenceEdge", alias="__typename")


class MarketWebPresenceRootUrl(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    locale: Optional[String] = None
    url: Optional[URL] = None
    typename__: Optional[Literal["MarketWebPresenceRootUrl"]] = Field("MarketWebPresenceRootUrl", alias="__typename")


class MarketWebPresenceUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    market: Optional[Market] = None
    user_errors: list[MarketUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketWebPresenceUpdatePayload"]] = Field(
        "MarketWebPresenceUpdatePayload", alias="__typename"
    )


class MarketingActivitiesDeleteAllExternalPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[MarketingActivityUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketingActivitiesDeleteAllExternalPayload"]] = Field(
        "MarketingActivitiesDeleteAllExternalPayload", alias="__typename"
    )


class MarketingActivity(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    activity_list_url: Optional[URL] = Field(None, alias="activityListUrl")
    ad_spend: Optional[MoneyV2] = Field(None, alias="adSpend")
    app: Optional[App] = None
    app_errors: Optional[MarketingActivityExtensionAppErrors] = Field(None, alias="appErrors")
    budget: Optional[MarketingBudget] = None
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    form_data: Optional[String] = Field(None, alias="formData")
    hierarchy_level: Optional[MarketingActivityHierarchyLevel] = Field(None, alias="hierarchyLevel")
    id: Optional[ID] = None
    in_main_workflow_version: Optional[Boolean] = Field(None, alias="inMainWorkflowVersion")
    is_external: Optional[Boolean] = Field(None, alias="isExternal")
    marketing_channel: Optional[MarketingChannel] = Field(None, alias="marketingChannel")
    marketing_channel_type: Optional[MarketingChannel] = Field(None, alias="marketingChannelType")
    marketing_event: Optional[MarketingEvent] = Field(None, alias="marketingEvent")
    parent_activity_id: Optional[ID] = Field(None, alias="parentActivityId")
    parent_remote_id: Optional[String] = Field(None, alias="parentRemoteId")
    source_and_medium: Optional[String] = Field(None, alias="sourceAndMedium")
    status: Optional[MarketingActivityStatus] = None
    status_badge_type: Optional[MarketingActivityStatusBadgeType] = Field(None, alias="statusBadgeType")
    status_badge_type_v2: Optional[BadgeType] = Field(None, alias="statusBadgeTypeV2")
    status_label: Optional[String] = Field(None, alias="statusLabel")
    status_transitioned_at: Optional[DateTime] = Field(None, alias="statusTransitionedAt")
    tactic: Optional[MarketingTactic] = None
    target_status: Optional[MarketingActivityStatus] = Field(None, alias="targetStatus")
    title: Optional[String] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    url_parameter_value: Optional[String] = Field(None, alias="urlParameterValue")
    utm_parameters: Optional[UTMParameters] = Field(None, alias="utmParameters")
    typename__: Optional[Literal["MarketingActivity"]] = Field("MarketingActivity", alias="__typename")


class MarketingActivityConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MarketingActivityEdge] = Field(default_factory=list)
    nodes: list[MarketingActivity] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MarketingActivityConnection"]] = Field(
        "MarketingActivityConnection", alias="__typename"
    )


class MarketingActivityCreateExternalPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    marketing_activity: Optional[MarketingActivity] = Field(None, alias="marketingActivity")
    user_errors: list[MarketingActivityUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketingActivityCreateExternalPayload"]] = Field(
        "MarketingActivityCreateExternalPayload", alias="__typename"
    )


class MarketingActivityCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    marketing_activity: Optional[MarketingActivity] = Field(None, alias="marketingActivity")
    redirect_path: Optional[String] = Field(None, alias="redirectPath")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketingActivityCreatePayload"]] = Field(
        "MarketingActivityCreatePayload", alias="__typename"
    )


class MarketingActivityDeleteExternalPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_marketing_activity_id: Optional[ID] = Field(None, alias="deletedMarketingActivityId")
    user_errors: list[MarketingActivityUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketingActivityDeleteExternalPayload"]] = Field(
        "MarketingActivityDeleteExternalPayload", alias="__typename"
    )


class MarketingActivityEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[MarketingActivity] = None
    typename__: Optional[Literal["MarketingActivityEdge"]] = Field("MarketingActivityEdge", alias="__typename")


class MarketingActivityExtensionAppErrors(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MarketingActivityExtensionAppErrorCode] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketingActivityExtensionAppErrors"]] = Field(
        "MarketingActivityExtensionAppErrors", alias="__typename"
    )


class MarketingActivityUpdateExternalPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    marketing_activity: Optional[MarketingActivity] = Field(None, alias="marketingActivity")
    user_errors: list[MarketingActivityUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketingActivityUpdateExternalPayload"]] = Field(
        "MarketingActivityUpdateExternalPayload", alias="__typename"
    )


class MarketingActivityUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    marketing_activity: Optional[MarketingActivity] = Field(None, alias="marketingActivity")
    redirect_path: Optional[String] = Field(None, alias="redirectPath")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketingActivityUpdatePayload"]] = Field(
        "MarketingActivityUpdatePayload", alias="__typename"
    )


class MarketingActivityUpsertExternalPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    marketing_activity: Optional[MarketingActivity] = Field(None, alias="marketingActivity")
    user_errors: list[MarketingActivityUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketingActivityUpsertExternalPayload"]] = Field(
        "MarketingActivityUpsertExternalPayload", alias="__typename"
    )


class MarketingActivityUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MarketingActivityUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["MarketingActivityUserError"]] = Field(
        "MarketingActivityUserError", alias="__typename"
    )


class MarketingBudget(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    budget_type: Optional[MarketingBudgetBudgetType] = Field(None, alias="budgetType")
    total: Optional[MoneyV2] = None
    typename__: Optional[Literal["MarketingBudget"]] = Field("MarketingBudget", alias="__typename")


class MarketingEngagement(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ad_spend: Optional[MoneyV2] = Field(None, alias="adSpend")
    channel_handle: Optional[String] = Field(None, alias="channelHandle")
    clicks_count: Optional[Int] = Field(None, alias="clicksCount")
    comments_count: Optional[Int] = Field(None, alias="commentsCount")
    complaints_count: Optional[Int] = Field(None, alias="complaintsCount")
    fails_count: Optional[Int] = Field(None, alias="failsCount")
    favorites_count: Optional[Int] = Field(None, alias="favoritesCount")
    first_time_customers: Optional[Decimal] = Field(None, alias="firstTimeCustomers")
    impressions_count: Optional[Int] = Field(None, alias="impressionsCount")
    is_cumulative: Optional[Boolean] = Field(None, alias="isCumulative")
    marketing_activity: Optional[MarketingActivity] = Field(None, alias="marketingActivity")
    occurred_on: Optional[Date] = Field(None, alias="occurredOn")
    orders: Optional[Decimal] = None
    returning_customers: Optional[Decimal] = Field(None, alias="returningCustomers")
    sales: Optional[MoneyV2] = None
    sends_count: Optional[Int] = Field(None, alias="sendsCount")
    sessions_count: Optional[Int] = Field(None, alias="sessionsCount")
    shares_count: Optional[Int] = Field(None, alias="sharesCount")
    unique_clicks_count: Optional[Int] = Field(None, alias="uniqueClicksCount")
    unique_views_count: Optional[Int] = Field(None, alias="uniqueViewsCount")
    unsubscribes_count: Optional[Int] = Field(None, alias="unsubscribesCount")
    utc_offset: Optional[UtcOffset] = Field(None, alias="utcOffset")
    views_count: Optional[Int] = Field(None, alias="viewsCount")
    typename__: Optional[Literal["MarketingEngagement"]] = Field("MarketingEngagement", alias="__typename")


class MarketingEngagementCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    marketing_engagement: Optional[MarketingEngagement] = Field(None, alias="marketingEngagement")
    user_errors: list[MarketingActivityUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketingEngagementCreatePayload"]] = Field(
        "MarketingEngagementCreatePayload", alias="__typename"
    )


class MarketingEngagementsDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    result: Optional[String] = None
    user_errors: list[MarketingActivityUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MarketingEngagementsDeletePayload"]] = Field(
        "MarketingEngagementsDeletePayload", alias="__typename"
    )


class MarketingEvent(LegacyInteroperability, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    channel: Optional[MarketingChannel] = None
    channel_handle: Optional[String] = Field(None, alias="channelHandle")
    description: Optional[String] = None
    ended_at: Optional[DateTime] = Field(None, alias="endedAt")
    id: Optional[ID] = None
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    manage_url: Optional[URL] = Field(None, alias="manageUrl")
    marketing_channel_type: Optional[MarketingChannel] = Field(None, alias="marketingChannelType")
    preview_url: Optional[URL] = Field(None, alias="previewUrl")
    remote_id: Optional[String] = Field(None, alias="remoteId")
    scheduled_to_end_at: Optional[DateTime] = Field(None, alias="scheduledToEndAt")
    source_and_medium: Optional[String] = Field(None, alias="sourceAndMedium")
    started_at: Optional[DateTime] = Field(None, alias="startedAt")
    target_type_display_text: Optional[String] = Field(None, alias="targetTypeDisplayText")
    type: Optional[MarketingTactic] = None
    utm_campaign: Optional[String] = Field(None, alias="utmCampaign")
    utm_medium: Optional[String] = Field(None, alias="utmMedium")
    utm_source: Optional[String] = Field(None, alias="utmSource")
    typename__: Optional[Literal["MarketingEvent"]] = Field("MarketingEvent", alias="__typename")


class MarketingEventConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MarketingEventEdge] = Field(default_factory=list)
    nodes: list[MarketingEvent] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MarketingEventConnection"]] = Field("MarketingEventConnection", alias="__typename")


class MarketingEventEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[MarketingEvent] = None
    typename__: Optional[Literal["MarketingEventEdge"]] = Field("MarketingEventEdge", alias="__typename")


class MediaConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MediaEdge] = Field(default_factory=list)
    nodes: list[Media] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MediaConnection"]] = Field("MediaConnection", alias="__typename")


class MediaEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Media] = None
    typename__: Optional[Literal["MediaEdge"]] = Field("MediaEdge", alias="__typename")


class MediaError(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MediaErrorCode] = None
    details: Optional[String] = None
    message: Optional[String] = None
    typename__: Optional[Literal["MediaError"]] = Field("MediaError", alias="__typename")


class MediaImage(File, HasMetafields, Media, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alt: Optional[String] = None
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    file_errors: list[FileError] = Field(default_factory=list, alias="fileErrors")
    file_status: Optional[FileStatus] = Field(None, alias="fileStatus")
    id: Optional[ID] = None
    image: Optional[Image] = None
    media_content_type: Optional[MediaContentType] = Field(None, alias="mediaContentType")
    media_errors: list[MediaError] = Field(default_factory=list, alias="mediaErrors")
    media_warnings: list[MediaWarning] = Field(default_factory=list, alias="mediaWarnings")
    metafield: Optional[Metafield] = None
    metafields: Optional[MetafieldConnection] = None
    mime_type: Optional[String] = Field(None, alias="mimeType")
    original_source: Optional[MediaImageOriginalSource] = Field(None, alias="originalSource")
    preview: Optional[MediaPreviewImage] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    status: Optional[MediaStatus] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["MediaImage"]] = Field("MediaImage", alias="__typename")


class MediaImageOriginalSource(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    file_size: Optional[Int] = Field(None, alias="fileSize")
    url: Optional[URL] = None
    typename__: Optional[Literal["MediaImageOriginalSource"]] = Field("MediaImageOriginalSource", alias="__typename")


class MediaPreviewImage(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    image: Optional[Image] = None
    status: Optional[MediaPreviewImageStatus] = None
    typename__: Optional[Literal["MediaPreviewImage"]] = Field("MediaPreviewImage", alias="__typename")


class MediaUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MediaUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["MediaUserError"]] = Field("MediaUserError", alias="__typename")


class MediaWarning(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MediaWarningCode] = None
    message: Optional[String] = None
    typename__: Optional[Literal["MediaWarning"]] = Field("MediaWarning", alias="__typename")


class Menu(HasPublishedTranslations, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    handle: Optional[String] = None
    id: Optional[ID] = None
    is_default: Optional[Boolean] = Field(None, alias="isDefault")
    items: list[MenuItem] = Field(default_factory=list)
    title: Optional[String] = None
    translations: list[Translation] = Field(default_factory=list)
    typename__: Optional[Literal["Menu"]] = Field("Menu", alias="__typename")


class MenuConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MenuEdge] = Field(default_factory=list)
    nodes: list[Menu] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MenuConnection"]] = Field("MenuConnection", alias="__typename")


class MenuCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    menu: Optional[Menu] = None
    user_errors: list[MenuCreateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MenuCreatePayload"]] = Field("MenuCreatePayload", alias="__typename")


class MenuCreateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MenuCreateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["MenuCreateUserError"]] = Field("MenuCreateUserError", alias="__typename")


class MenuDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_menu_id: Optional[ID] = Field(None, alias="deletedMenuId")
    user_errors: list[MenuDeleteUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MenuDeletePayload"]] = Field("MenuDeletePayload", alias="__typename")


class MenuDeleteUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MenuDeleteUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["MenuDeleteUserError"]] = Field("MenuDeleteUserError", alias="__typename")


class MenuEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Menu] = None
    typename__: Optional[Literal["MenuEdge"]] = Field("MenuEdge", alias="__typename")


class MenuItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    items: list[MenuItem] = Field(default_factory=list)
    resource_id: Optional[ID] = Field(None, alias="resourceId")
    tags: list[String] = Field(default_factory=list)
    title: Optional[String] = None
    type: Optional[MenuItemType] = None
    url: Optional[String] = None
    typename__: Optional[Literal["MenuItem"]] = Field("MenuItem", alias="__typename")


class MenuUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    menu: Optional[Menu] = None
    user_errors: list[MenuUpdateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MenuUpdatePayload"]] = Field("MenuUpdatePayload", alias="__typename")


class MenuUpdateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MenuUpdateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["MenuUpdateUserError"]] = Field("MenuUpdateUserError", alias="__typename")


class MerchantApprovalSignals(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    identity_verified: Optional[Boolean] = Field(None, alias="identityVerified")
    verified_by_shopify: Optional[Boolean] = Field(None, alias="verifiedByShopify")
    verified_by_shopify_tier: Optional[String] = Field(None, alias="verifiedByShopifyTier")
    typename__: Optional[Literal["MerchantApprovalSignals"]] = Field("MerchantApprovalSignals", alias="__typename")


class Metafield(HasCompareDigest, LegacyInteroperability, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    compare_digest: Optional[String] = Field(None, alias="compareDigest")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    definition: Optional[MetafieldDefinition] = None
    description: Optional[String] = None
    id: Optional[ID] = None
    json_value: Optional[JSON] = Field(None, alias="jsonValue")
    key: Optional[String] = None
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    namespace: Optional[String] = None
    owner: Optional[HasMetafields] = None
    owner_type: Optional[MetafieldOwnerType] = Field(None, alias="ownerType")
    reference: Optional[MetafieldReference] = None
    references: Optional[MetafieldReferenceConnection] = None
    type: Optional[String] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    value: Optional[String] = None
    typename__: Optional[Literal["Metafield"]] = Field("Metafield", alias="__typename")


class MetafieldAccess(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    admin: Optional[MetafieldAdminAccess] = None
    customer_account: Optional[MetafieldCustomerAccountAccess] = Field(None, alias="customerAccount")
    grants: list[MetafieldAccessGrant] = Field(default_factory=list)
    storefront: Optional[MetafieldStorefrontAccess] = None
    typename__: Optional[Literal["MetafieldAccess"]] = Field("MetafieldAccess", alias="__typename")


class MetafieldAccessGrant(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    access: Optional[MetafieldGrantAccessLevel] = None
    grantee: Optional[String] = None
    typename__: Optional[Literal["MetafieldAccessGrant"]] = Field("MetafieldAccessGrant", alias="__typename")


class MetafieldConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MetafieldEdge] = Field(default_factory=list)
    nodes: list[Metafield] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MetafieldConnection"]] = Field("MetafieldConnection", alias="__typename")


class MetafieldDefinition(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    access: Optional[MetafieldAccess] = None
    constraints: Optional[MetafieldDefinitionConstraints] = None
    description: Optional[String] = None
    id: Optional[ID] = None
    key: Optional[String] = None
    metafields: Optional[MetafieldConnection] = None
    metafields_count: Optional[Int] = Field(None, alias="metafieldsCount")
    name: Optional[String] = None
    namespace: Optional[String] = None
    owner_type: Optional[MetafieldOwnerType] = Field(None, alias="ownerType")
    pinned_position: Optional[Int] = Field(None, alias="pinnedPosition")
    standard_template: Optional[StandardMetafieldDefinitionTemplate] = Field(None, alias="standardTemplate")
    type: Optional[MetafieldDefinitionType] = None
    use_as_collection_condition: Optional[Boolean] = Field(None, alias="useAsCollectionCondition")
    validation_status: Optional[MetafieldDefinitionValidationStatus] = Field(None, alias="validationStatus")
    validations: list[MetafieldDefinitionValidation] = Field(default_factory=list)
    visible_to_storefront_api: Optional[Boolean] = Field(None, alias="visibleToStorefrontApi")
    typename__: Optional[Literal["MetafieldDefinition"]] = Field("MetafieldDefinition", alias="__typename")


class MetafieldDefinitionConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MetafieldDefinitionEdge] = Field(default_factory=list)
    nodes: list[MetafieldDefinition] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MetafieldDefinitionConnection"]] = Field(
        "MetafieldDefinitionConnection", alias="__typename"
    )


class MetafieldDefinitionConstraintValue(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    value: Optional[String] = None
    typename__: Optional[Literal["MetafieldDefinitionConstraintValue"]] = Field(
        "MetafieldDefinitionConstraintValue", alias="__typename"
    )


class MetafieldDefinitionConstraintValueConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MetafieldDefinitionConstraintValueEdge] = Field(default_factory=list)
    nodes: list[MetafieldDefinitionConstraintValue] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MetafieldDefinitionConstraintValueConnection"]] = Field(
        "MetafieldDefinitionConstraintValueConnection", alias="__typename"
    )


class MetafieldDefinitionConstraintValueEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[MetafieldDefinitionConstraintValue] = None
    typename__: Optional[Literal["MetafieldDefinitionConstraintValueEdge"]] = Field(
        "MetafieldDefinitionConstraintValueEdge", alias="__typename"
    )


class MetafieldDefinitionConstraints(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    values: Optional[MetafieldDefinitionConstraintValueConnection] = None
    typename__: Optional[Literal["MetafieldDefinitionConstraints"]] = Field(
        "MetafieldDefinitionConstraints", alias="__typename"
    )


class MetafieldDefinitionCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_definition: Optional[MetafieldDefinition] = Field(None, alias="createdDefinition")
    user_errors: list[MetafieldDefinitionCreateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetafieldDefinitionCreatePayload"]] = Field(
        "MetafieldDefinitionCreatePayload", alias="__typename"
    )


class MetafieldDefinitionCreateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MetafieldDefinitionCreateUserErrorCode] = None
    element_index: Optional[Int] = Field(None, alias="elementIndex")
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["MetafieldDefinitionCreateUserError"]] = Field(
        "MetafieldDefinitionCreateUserError", alias="__typename"
    )


class MetafieldDefinitionDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_definition_id: Optional[ID] = Field(None, alias="deletedDefinitionId")
    user_errors: list[MetafieldDefinitionDeleteUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetafieldDefinitionDeletePayload"]] = Field(
        "MetafieldDefinitionDeletePayload", alias="__typename"
    )


class MetafieldDefinitionDeleteUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MetafieldDefinitionDeleteUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["MetafieldDefinitionDeleteUserError"]] = Field(
        "MetafieldDefinitionDeleteUserError", alias="__typename"
    )


class MetafieldDefinitionEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[MetafieldDefinition] = None
    typename__: Optional[Literal["MetafieldDefinitionEdge"]] = Field("MetafieldDefinitionEdge", alias="__typename")


class MetafieldDefinitionPinPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    pinned_definition: Optional[MetafieldDefinition] = Field(None, alias="pinnedDefinition")
    user_errors: list[MetafieldDefinitionPinUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetafieldDefinitionPinPayload"]] = Field(
        "MetafieldDefinitionPinPayload", alias="__typename"
    )


class MetafieldDefinitionPinUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MetafieldDefinitionPinUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["MetafieldDefinitionPinUserError"]] = Field(
        "MetafieldDefinitionPinUserError", alias="__typename"
    )


class MetafieldDefinitionSupportedValidation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[String] = None
    type: Optional[String] = None
    typename__: Optional[Literal["MetafieldDefinitionSupportedValidation"]] = Field(
        "MetafieldDefinitionSupportedValidation", alias="__typename"
    )


class MetafieldDefinitionType(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    category: Optional[String] = None
    name: Optional[String] = None
    supported_validations: list[MetafieldDefinitionSupportedValidation] = Field(
        default_factory=list, alias="supportedValidations"
    )
    supports_definition_migrations: Optional[Boolean] = Field(None, alias="supportsDefinitionMigrations")
    value_type: Optional[MetafieldValueType] = Field(None, alias="valueType")
    typename__: Optional[Literal["MetafieldDefinitionType"]] = Field("MetafieldDefinitionType", alias="__typename")


class MetafieldDefinitionUnpinPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    unpinned_definition: Optional[MetafieldDefinition] = Field(None, alias="unpinnedDefinition")
    user_errors: list[MetafieldDefinitionUnpinUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetafieldDefinitionUnpinPayload"]] = Field(
        "MetafieldDefinitionUnpinPayload", alias="__typename"
    )


class MetafieldDefinitionUnpinUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MetafieldDefinitionUnpinUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["MetafieldDefinitionUnpinUserError"]] = Field(
        "MetafieldDefinitionUnpinUserError", alias="__typename"
    )


class MetafieldDefinitionUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    updated_definition: Optional[MetafieldDefinition] = Field(None, alias="updatedDefinition")
    user_errors: list[MetafieldDefinitionUpdateUserError] = Field(default_factory=list, alias="userErrors")
    validation_job: Optional[Job] = Field(None, alias="validationJob")
    typename__: Optional[Literal["MetafieldDefinitionUpdatePayload"]] = Field(
        "MetafieldDefinitionUpdatePayload", alias="__typename"
    )


class MetafieldDefinitionUpdateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MetafieldDefinitionUpdateUserErrorCode] = None
    element_index: Optional[Int] = Field(None, alias="elementIndex")
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["MetafieldDefinitionUpdateUserError"]] = Field(
        "MetafieldDefinitionUpdateUserError", alias="__typename"
    )


class MetafieldDefinitionValidation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[String] = None
    type: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["MetafieldDefinitionValidation"]] = Field(
        "MetafieldDefinitionValidation", alias="__typename"
    )


class MetafieldDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetafieldDeletePayload"]] = Field("MetafieldDeletePayload", alias="__typename")


class MetafieldEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Metafield] = None
    typename__: Optional[Literal["MetafieldEdge"]] = Field("MetafieldEdge", alias="__typename")


class MetafieldIdentifier(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    namespace: Optional[String] = None
    owner_id: Optional[ID] = Field(None, alias="ownerId")
    typename__: Optional[Literal["MetafieldIdentifier"]] = Field("MetafieldIdentifier", alias="__typename")


class MetafieldReferenceConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MetafieldReferenceEdge] = Field(default_factory=list)
    nodes: list[Optional[MetafieldReference]] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MetafieldReferenceConnection"]] = Field(
        "MetafieldReferenceConnection", alias="__typename"
    )


class MetafieldReferenceEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[MetafieldReference] = None
    typename__: Optional[Literal["MetafieldReferenceEdge"]] = Field("MetafieldReferenceEdge", alias="__typename")


class MetafieldRelation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    name: Optional[String] = None
    namespace: Optional[String] = None
    referencer: Optional[MetafieldReferencer] = None
    target: Optional[MetafieldReference] = None
    typename__: Optional[Literal["MetafieldRelation"]] = Field("MetafieldRelation", alias="__typename")


class MetafieldRelationConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MetafieldRelationEdge] = Field(default_factory=list)
    nodes: list[MetafieldRelation] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MetafieldRelationConnection"]] = Field(
        "MetafieldRelationConnection", alias="__typename"
    )


class MetafieldRelationEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[MetafieldRelation] = None
    typename__: Optional[Literal["MetafieldRelationEdge"]] = Field("MetafieldRelationEdge", alias="__typename")


class MetafieldStorefrontVisibility(LegacyInteroperability, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    id: Optional[ID] = None
    key: Optional[String] = None
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    namespace: Optional[String] = None
    owner_type: Optional[MetafieldOwnerType] = Field(None, alias="ownerType")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["MetafieldStorefrontVisibility"]] = Field(
        "MetafieldStorefrontVisibility", alias="__typename"
    )


class MetafieldStorefrontVisibilityConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MetafieldStorefrontVisibilityEdge] = Field(default_factory=list)
    nodes: list[MetafieldStorefrontVisibility] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MetafieldStorefrontVisibilityConnection"]] = Field(
        "MetafieldStorefrontVisibilityConnection", alias="__typename"
    )


class MetafieldStorefrontVisibilityCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    metafield_storefront_visibility: Optional[MetafieldStorefrontVisibility] = Field(
        None, alias="metafieldStorefrontVisibility"
    )
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetafieldStorefrontVisibilityCreatePayload"]] = Field(
        "MetafieldStorefrontVisibilityCreatePayload", alias="__typename"
    )


class MetafieldStorefrontVisibilityDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_metafield_storefront_visibility_id: Optional[ID] = Field(
        None, alias="deletedMetafieldStorefrontVisibilityId"
    )
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetafieldStorefrontVisibilityDeletePayload"]] = Field(
        "MetafieldStorefrontVisibilityDeletePayload", alias="__typename"
    )


class MetafieldStorefrontVisibilityEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[MetafieldStorefrontVisibility] = None
    typename__: Optional[Literal["MetafieldStorefrontVisibilityEdge"]] = Field(
        "MetafieldStorefrontVisibilityEdge", alias="__typename"
    )


class MetafieldsDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_metafields: Optional[list[Optional[MetafieldIdentifier]]] = Field(
        default_factory=list, alias="deletedMetafields"
    )
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetafieldsDeletePayload"]] = Field("MetafieldsDeletePayload", alias="__typename")


class MetafieldsSetPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    metafields: Optional[list[Metafield]] = Field(default_factory=list)
    user_errors: list[MetafieldsSetUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetafieldsSetPayload"]] = Field("MetafieldsSetPayload", alias="__typename")


class MetafieldsSetUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MetafieldsSetUserErrorCode] = None
    element_index: Optional[Int] = Field(None, alias="elementIndex")
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["MetafieldsSetUserError"]] = Field("MetafieldsSetUserError", alias="__typename")


class Metaobject(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    capabilities: Optional[MetaobjectCapabilityData] = None
    created_by: Optional[App] = Field(None, alias="createdBy")
    created_by_app: Optional[App] = Field(None, alias="createdByApp")
    created_by_staff: Optional[StaffMember] = Field(None, alias="createdByStaff")
    definition: Optional[MetaobjectDefinition] = None
    display_name: Optional[String] = Field(None, alias="displayName")
    field: Optional[MetaobjectField] = None
    fields: list[MetaobjectField] = Field(default_factory=list)
    handle: Optional[String] = None
    id: Optional[ID] = None
    referenced_by: Optional[MetafieldRelationConnection] = Field(None, alias="referencedBy")
    staff_member: Optional[StaffMember] = Field(None, alias="staffMember")
    thumbnail_field: Optional[MetaobjectField] = Field(None, alias="thumbnailField")
    type: Optional[String] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["Metaobject"]] = Field("Metaobject", alias="__typename")


class MetaobjectAccess(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    admin: Optional[MetaobjectAdminAccess] = None
    storefront: Optional[MetaobjectStorefrontAccess] = None
    typename__: Optional[Literal["MetaobjectAccess"]] = Field("MetaobjectAccess", alias="__typename")


class MetaobjectBulkDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[MetaobjectUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetaobjectBulkDeletePayload"]] = Field(
        "MetaobjectBulkDeletePayload", alias="__typename"
    )


class MetaobjectCapabilities(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    online_store: Optional[MetaobjectCapabilitiesOnlineStore] = Field(None, alias="onlineStore")
    publishable: Optional[MetaobjectCapabilitiesPublishable] = None
    renderable: Optional[MetaobjectCapabilitiesRenderable] = None
    translatable: Optional[MetaobjectCapabilitiesTranslatable] = None
    typename__: Optional[Literal["MetaobjectCapabilities"]] = Field("MetaobjectCapabilities", alias="__typename")


class MetaobjectCapabilitiesOnlineStore(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    data: Optional[MetaobjectCapabilityDefinitionDataOnlineStore] = None
    enabled: Optional[Boolean] = None
    typename__: Optional[Literal["MetaobjectCapabilitiesOnlineStore"]] = Field(
        "MetaobjectCapabilitiesOnlineStore", alias="__typename"
    )


class MetaobjectCapabilitiesPublishable(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    enabled: Optional[Boolean] = None
    typename__: Optional[Literal["MetaobjectCapabilitiesPublishable"]] = Field(
        "MetaobjectCapabilitiesPublishable", alias="__typename"
    )


class MetaobjectCapabilitiesRenderable(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    data: Optional[MetaobjectCapabilityDefinitionDataRenderable] = None
    enabled: Optional[Boolean] = None
    typename__: Optional[Literal["MetaobjectCapabilitiesRenderable"]] = Field(
        "MetaobjectCapabilitiesRenderable", alias="__typename"
    )


class MetaobjectCapabilitiesTranslatable(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    enabled: Optional[Boolean] = None
    typename__: Optional[Literal["MetaobjectCapabilitiesTranslatable"]] = Field(
        "MetaobjectCapabilitiesTranslatable", alias="__typename"
    )


class MetaobjectCapabilityData(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    online_store: Optional[MetaobjectCapabilityDataOnlineStore] = Field(None, alias="onlineStore")
    publishable: Optional[MetaobjectCapabilityDataPublishable] = None
    typename__: Optional[Literal["MetaobjectCapabilityData"]] = Field("MetaobjectCapabilityData", alias="__typename")


class MetaobjectCapabilityDataOnlineStore(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    template_suffix: Optional[String] = Field(None, alias="templateSuffix")
    typename__: Optional[Literal["MetaobjectCapabilityDataOnlineStore"]] = Field(
        "MetaobjectCapabilityDataOnlineStore", alias="__typename"
    )


class MetaobjectCapabilityDataPublishable(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    status: Optional[MetaobjectStatus] = None
    typename__: Optional[Literal["MetaobjectCapabilityDataPublishable"]] = Field(
        "MetaobjectCapabilityDataPublishable", alias="__typename"
    )


class MetaobjectCapabilityDefinitionDataOnlineStore(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    can_create_redirects: Optional[Boolean] = Field(None, alias="canCreateRedirects")
    url_handle: Optional[String] = Field(None, alias="urlHandle")
    typename__: Optional[Literal["MetaobjectCapabilityDefinitionDataOnlineStore"]] = Field(
        "MetaobjectCapabilityDefinitionDataOnlineStore", alias="__typename"
    )


class MetaobjectCapabilityDefinitionDataRenderable(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    meta_description_key: Optional[String] = Field(None, alias="metaDescriptionKey")
    meta_title_key: Optional[String] = Field(None, alias="metaTitleKey")
    typename__: Optional[Literal["MetaobjectCapabilityDefinitionDataRenderable"]] = Field(
        "MetaobjectCapabilityDefinitionDataRenderable", alias="__typename"
    )


class MetaobjectConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MetaobjectEdge] = Field(default_factory=list)
    nodes: list[Metaobject] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MetaobjectConnection"]] = Field("MetaobjectConnection", alias="__typename")


class MetaobjectCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    metaobject: Optional[Metaobject] = None
    user_errors: list[MetaobjectUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetaobjectCreatePayload"]] = Field("MetaobjectCreatePayload", alias="__typename")


class MetaobjectDefinition(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    access: Optional[MetaobjectAccess] = None
    capabilities: Optional[MetaobjectCapabilities] = None
    created_by_app: Optional[App] = Field(None, alias="createdByApp")
    created_by_staff: Optional[StaffMember] = Field(None, alias="createdByStaff")
    description: Optional[String] = None
    display_name_key: Optional[String] = Field(None, alias="displayNameKey")
    field_definitions: list[MetaobjectFieldDefinition] = Field(default_factory=list, alias="fieldDefinitions")
    has_thumbnail_field: Optional[Boolean] = Field(None, alias="hasThumbnailField")
    id: Optional[ID] = None
    metaobjects: Optional[MetaobjectConnection] = None
    metaobjects_count: Optional[Int] = Field(None, alias="metaobjectsCount")
    name: Optional[String] = None
    type: Optional[String] = None
    typename__: Optional[Literal["MetaobjectDefinition"]] = Field("MetaobjectDefinition", alias="__typename")


class MetaobjectDefinitionConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MetaobjectDefinitionEdge] = Field(default_factory=list)
    nodes: list[MetaobjectDefinition] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MetaobjectDefinitionConnection"]] = Field(
        "MetaobjectDefinitionConnection", alias="__typename"
    )


class MetaobjectDefinitionCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    metaobject_definition: Optional[MetaobjectDefinition] = Field(None, alias="metaobjectDefinition")
    user_errors: list[MetaobjectUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetaobjectDefinitionCreatePayload"]] = Field(
        "MetaobjectDefinitionCreatePayload", alias="__typename"
    )


class MetaobjectDefinitionDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[MetaobjectUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetaobjectDefinitionDeletePayload"]] = Field(
        "MetaobjectDefinitionDeletePayload", alias="__typename"
    )


class MetaobjectDefinitionEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[MetaobjectDefinition] = None
    typename__: Optional[Literal["MetaobjectDefinitionEdge"]] = Field("MetaobjectDefinitionEdge", alias="__typename")


class MetaobjectDefinitionUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    metaobject_definition: Optional[MetaobjectDefinition] = Field(None, alias="metaobjectDefinition")
    user_errors: list[MetaobjectUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetaobjectDefinitionUpdatePayload"]] = Field(
        "MetaobjectDefinitionUpdatePayload", alias="__typename"
    )


class MetaobjectDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[MetaobjectUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetaobjectDeletePayload"]] = Field("MetaobjectDeletePayload", alias="__typename")


class MetaobjectEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Metaobject] = None
    typename__: Optional[Literal["MetaobjectEdge"]] = Field("MetaobjectEdge", alias="__typename")


class MetaobjectField(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    definition: Optional[MetaobjectFieldDefinition] = None
    json_value: Optional[JSON] = Field(None, alias="jsonValue")
    key: Optional[String] = None
    reference: Optional[MetafieldReference] = None
    references: Optional[MetafieldReferenceConnection] = None
    thumbnail: Optional[MetaobjectThumbnail] = None
    type: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["MetaobjectField"]] = Field("MetaobjectField", alias="__typename")


class MetaobjectFieldDefinition(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[String] = None
    key: Optional[String] = None
    name: Optional[String] = None
    required: Optional[Boolean] = None
    type: Optional[MetafieldDefinitionType] = None
    validations: list[MetafieldDefinitionValidation] = Field(default_factory=list)
    typename__: Optional[Literal["MetaobjectFieldDefinition"]] = Field("MetaobjectFieldDefinition", alias="__typename")


class MetaobjectThumbnail(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    file: Optional[File] = None
    hex: Optional[String] = None
    typename__: Optional[Literal["MetaobjectThumbnail"]] = Field("MetaobjectThumbnail", alias="__typename")


class MetaobjectUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    metaobject: Optional[Metaobject] = None
    user_errors: list[MetaobjectUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetaobjectUpdatePayload"]] = Field("MetaobjectUpdatePayload", alias="__typename")


class MetaobjectUpsertPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    metaobject: Optional[Metaobject] = None
    user_errors: list[MetaobjectUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MetaobjectUpsertPayload"]] = Field("MetaobjectUpsertPayload", alias="__typename")


class MetaobjectUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MetaobjectUserErrorCode] = None
    element_index: Optional[Int] = Field(None, alias="elementIndex")
    element_key: Optional[String] = Field(None, alias="elementKey")
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["MetaobjectUserError"]] = Field("MetaobjectUserError", alias="__typename")


class MobilePlatformApplicationConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[MobilePlatformApplicationEdge] = Field(default_factory=list)
    nodes: list[MobilePlatformApplication] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["MobilePlatformApplicationConnection"]] = Field(
        "MobilePlatformApplicationConnection", alias="__typename"
    )


class MobilePlatformApplicationCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    mobile_platform_application: Optional[MobilePlatformApplication] = Field(None, alias="mobilePlatformApplication")
    user_errors: list[MobilePlatformApplicationUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MobilePlatformApplicationCreatePayload"]] = Field(
        "MobilePlatformApplicationCreatePayload", alias="__typename"
    )


class MobilePlatformApplicationDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_mobile_platform_application_id: Optional[ID] = Field(None, alias="deletedMobilePlatformApplicationId")
    user_errors: list[MobilePlatformApplicationUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MobilePlatformApplicationDeletePayload"]] = Field(
        "MobilePlatformApplicationDeletePayload", alias="__typename"
    )


class MobilePlatformApplicationEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[MobilePlatformApplication] = None
    typename__: Optional[Literal["MobilePlatformApplicationEdge"]] = Field(
        "MobilePlatformApplicationEdge", alias="__typename"
    )


class MobilePlatformApplicationUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    mobile_platform_application: Optional[MobilePlatformApplication] = Field(None, alias="mobilePlatformApplication")
    user_errors: list[MobilePlatformApplicationUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["MobilePlatformApplicationUpdatePayload"]] = Field(
        "MobilePlatformApplicationUpdatePayload", alias="__typename"
    )


class MobilePlatformApplicationUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[MobilePlatformApplicationUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["MobilePlatformApplicationUserError"]] = Field(
        "MobilePlatformApplicationUserError", alias="__typename"
    )


class Model3d(File, Media, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alt: Optional[String] = None
    bounding_box: Optional[Model3dBoundingBox] = Field(None, alias="boundingBox")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    file_errors: list[FileError] = Field(default_factory=list, alias="fileErrors")
    file_status: Optional[FileStatus] = Field(None, alias="fileStatus")
    filename: Optional[String] = None
    id: Optional[ID] = None
    media_content_type: Optional[MediaContentType] = Field(None, alias="mediaContentType")
    media_errors: list[MediaError] = Field(default_factory=list, alias="mediaErrors")
    media_warnings: list[MediaWarning] = Field(default_factory=list, alias="mediaWarnings")
    original_source: Optional[Model3dSource] = Field(None, alias="originalSource")
    preview: Optional[MediaPreviewImage] = None
    sources: list[Model3dSource] = Field(default_factory=list)
    status: Optional[MediaStatus] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["Model3d"]] = Field("Model3d", alias="__typename")


class Model3dBoundingBox(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    size: Optional[Vector3] = None
    typename__: Optional[Literal["Model3dBoundingBox"]] = Field("Model3dBoundingBox", alias="__typename")


class Model3dSource(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    filesize: Optional[Int] = None
    format: Optional[String] = None
    mime_type: Optional[String] = Field(None, alias="mimeType")
    url: Optional[String] = None
    typename__: Optional[Literal["Model3dSource"]] = Field("Model3dSource", alias="__typename")


class MoneyBag(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    presentment_money: Optional[MoneyV2] = Field(None, alias="presentmentMoney")
    shop_money: Optional[MoneyV2] = Field(None, alias="shopMoney")
    typename__: Optional[Literal["MoneyBag"]] = Field("MoneyBag", alias="__typename")


class MoneyV2(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[Decimal] = None
    currency_code: Optional[CurrencyCode] = Field(None, alias="currencyCode")
    typename__: Optional[Literal["MoneyV2"]] = Field("MoneyV2", alias="__typename")


class MutationsStagedUploadTargetGenerateUploadParameter(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["MutationsStagedUploadTargetGenerateUploadParameter"]] = Field(
        "MutationsStagedUploadTargetGenerateUploadParameter", alias="__typename"
    )


class NavigationItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[String] = None
    title: Optional[String] = None
    url: Optional[URL] = None
    typename__: Optional[Literal["NavigationItem"]] = Field("NavigationItem", alias="__typename")


class OnlineStore(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    password_protection: Optional[OnlineStorePasswordProtection] = Field(None, alias="passwordProtection")
    typename__: Optional[Literal["OnlineStore"]] = Field("OnlineStore", alias="__typename")


class OnlineStoreArticle(HasMetafieldDefinitions, HasMetafields, HasPublishedTranslations, Navigable, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    default_cursor: Optional[String] = Field(None, alias="defaultCursor")
    id: Optional[ID] = None
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    translations: list[Translation] = Field(default_factory=list)
    typename__: Optional[Literal["OnlineStoreArticle"]] = Field("OnlineStoreArticle", alias="__typename")


class OnlineStoreBlog(HasMetafieldDefinitions, HasMetafields, HasPublishedTranslations, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    translations: list[Translation] = Field(default_factory=list)
    typename__: Optional[Literal["OnlineStoreBlog"]] = Field("OnlineStoreBlog", alias="__typename")


class OnlineStorePage(HasMetafieldDefinitions, HasMetafields, HasPublishedTranslations, Navigable, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    default_cursor: Optional[String] = Field(None, alias="defaultCursor")
    id: Optional[ID] = None
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    translations: list[Translation] = Field(default_factory=list)
    typename__: Optional[Literal["OnlineStorePage"]] = Field("OnlineStorePage", alias="__typename")


class OnlineStorePasswordProtection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    enabled: Optional[Boolean] = None
    typename__: Optional[Literal["OnlineStorePasswordProtection"]] = Field(
        "OnlineStorePasswordProtection", alias="__typename"
    )


class Order(
    CommentEventSubject,
    HasEvents,
    HasLocalizationExtensions,
    HasMetafieldDefinitions,
    HasMetafields,
    LegacyInteroperability,
    Node,
):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    additional_fees: list[AdditionalFee] = Field(default_factory=list, alias="additionalFees")
    agreements: Optional[SalesAgreementConnection] = None
    alerts: list[ResourceAlert] = Field(default_factory=list)
    app: Optional[OrderApp] = None
    billing_address: Optional[MailingAddress] = Field(None, alias="billingAddress")
    billing_address_matches_shipping_address: Optional[Boolean] = Field(
        None, alias="billingAddressMatchesShippingAddress"
    )
    can_mark_as_paid: Optional[Boolean] = Field(None, alias="canMarkAsPaid")
    can_notify_customer: Optional[Boolean] = Field(None, alias="canNotifyCustomer")
    cancel_reason: Optional[OrderCancelReason] = Field(None, alias="cancelReason")
    cancellation: Optional[OrderCancellation] = None
    cancelled_at: Optional[DateTime] = Field(None, alias="cancelledAt")
    capturable: Optional[Boolean] = None
    cart_discount_amount: Optional[Money] = Field(None, alias="cartDiscountAmount")
    cart_discount_amount_set: Optional[MoneyBag] = Field(None, alias="cartDiscountAmountSet")
    channel: Optional[Channel] = None
    channel_information: Optional[ChannelInformation] = Field(None, alias="channelInformation")
    client_ip: Optional[String] = Field(None, alias="clientIp")
    closed: Optional[Boolean] = None
    closed_at: Optional[DateTime] = Field(None, alias="closedAt")
    confirmation_number: Optional[String] = Field(None, alias="confirmationNumber")
    confirmed: Optional[Boolean] = None
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    currency_code: Optional[CurrencyCode] = Field(None, alias="currencyCode")
    current_cart_discount_amount_set: Optional[MoneyBag] = Field(None, alias="currentCartDiscountAmountSet")
    current_subtotal_line_items_quantity: Optional[Int] = Field(None, alias="currentSubtotalLineItemsQuantity")
    current_subtotal_price_set: Optional[MoneyBag] = Field(None, alias="currentSubtotalPriceSet")
    current_tax_lines: list[TaxLine] = Field(default_factory=list, alias="currentTaxLines")
    current_total_additional_fees_set: Optional[MoneyBag] = Field(None, alias="currentTotalAdditionalFeesSet")
    current_total_discounts_set: Optional[MoneyBag] = Field(None, alias="currentTotalDiscountsSet")
    current_total_duties_set: Optional[MoneyBag] = Field(None, alias="currentTotalDutiesSet")
    current_total_price_set: Optional[MoneyBag] = Field(None, alias="currentTotalPriceSet")
    current_total_tax_set: Optional[MoneyBag] = Field(None, alias="currentTotalTaxSet")
    current_total_weight: Optional[UnsignedInt64] = Field(None, alias="currentTotalWeight")
    custom_attributes: list[Attribute] = Field(default_factory=list, alias="customAttributes")
    customer: Optional[Customer] = None
    customer_accepts_marketing: Optional[Boolean] = Field(None, alias="customerAcceptsMarketing")
    customer_journey: Optional[CustomerJourney] = Field(None, alias="customerJourney")
    customer_journey_summary: Optional[CustomerJourneySummary] = Field(None, alias="customerJourneySummary")
    customer_locale: Optional[String] = Field(None, alias="customerLocale")
    discount_applications: Optional[DiscountApplicationConnection] = Field(None, alias="discountApplications")
    discount_code: Optional[String] = Field(None, alias="discountCode")
    discount_codes: list[String] = Field(default_factory=list, alias="discountCodes")
    display_address: Optional[MailingAddress] = Field(None, alias="displayAddress")
    display_financial_status: Optional[OrderDisplayFinancialStatus] = Field(None, alias="displayFinancialStatus")
    display_fulfillment_status: Optional[OrderDisplayFulfillmentStatus] = Field(None, alias="displayFulfillmentStatus")
    disputes: list[OrderDisputeSummary] = Field(default_factory=list)
    edited: Optional[Boolean] = None
    email: Optional[String] = None
    estimated_taxes: Optional[Boolean] = Field(None, alias="estimatedTaxes")
    events: Optional[EventConnection] = None
    exchange_v2s: Optional[ExchangeV2Connection] = Field(None, alias="exchangeV2s")
    fulfillable: Optional[Boolean] = None
    fulfillment_orders: Optional[FulfillmentOrderConnection] = Field(None, alias="fulfillmentOrders")
    fulfillments: list[Fulfillment] = Field(default_factory=list)
    fulfillments_count: Optional[Count] = Field(None, alias="fulfillmentsCount")
    fully_paid: Optional[Boolean] = Field(None, alias="fullyPaid")
    has_timeline_comment: Optional[Boolean] = Field(None, alias="hasTimelineComment")
    id: Optional[ID] = None
    landing_page_display_text: Optional[String] = Field(None, alias="landingPageDisplayText")
    landing_page_url: Optional[URL] = Field(None, alias="landingPageUrl")
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    line_items: Optional[LineItemConnection] = Field(None, alias="lineItems")
    line_items_mutable: Optional[LineItemMutableConnection] = Field(None, alias="lineItemsMutable")
    localization_extensions: Optional[LocalizationExtensionConnection] = Field(None, alias="localizationExtensions")
    merchant_editable: Optional[Boolean] = Field(None, alias="merchantEditable")
    merchant_editable_errors: list[String] = Field(default_factory=list, alias="merchantEditableErrors")
    merchant_of_record_app: Optional[OrderApp] = Field(None, alias="merchantOfRecordApp")
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    name: Optional[String] = None
    net_payment: Optional[Money] = Field(None, alias="netPayment")
    net_payment_set: Optional[MoneyBag] = Field(None, alias="netPaymentSet")
    non_fulfillable_line_items: Optional[LineItemConnection] = Field(None, alias="nonFulfillableLineItems")
    note: Optional[String] = None
    original_total_additional_fees_set: Optional[MoneyBag] = Field(None, alias="originalTotalAdditionalFeesSet")
    original_total_duties_set: Optional[MoneyBag] = Field(None, alias="originalTotalDutiesSet")
    original_total_price_set: Optional[MoneyBag] = Field(None, alias="originalTotalPriceSet")
    payment_collection_details: Optional[OrderPaymentCollectionDetails] = Field(None, alias="paymentCollectionDetails")
    payment_gateway_names: list[String] = Field(default_factory=list, alias="paymentGatewayNames")
    payment_terms: Optional[PaymentTerms] = Field(None, alias="paymentTerms")
    phone: Optional[String] = None
    physical_location: Optional[Location] = Field(None, alias="physicalLocation")
    po_number: Optional[String] = Field(None, alias="poNumber")
    presentment_currency_code: Optional[CurrencyCode] = Field(None, alias="presentmentCurrencyCode")
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    processed_at: Optional[DateTime] = Field(None, alias="processedAt")
    publication: Optional[Publication] = None
    purchasing_entity: Optional[PurchasingEntity] = Field(None, alias="purchasingEntity")
    referral_code: Optional[String] = Field(None, alias="referralCode")
    referrer_display_text: Optional[String] = Field(None, alias="referrerDisplayText")
    referrer_url: Optional[URL] = Field(None, alias="referrerUrl")
    refund_discrepancy_set: Optional[MoneyBag] = Field(None, alias="refundDiscrepancySet")
    refundable: Optional[Boolean] = None
    refunds: list[Refund] = Field(default_factory=list)
    registered_source_url: Optional[URL] = Field(None, alias="registeredSourceUrl")
    requires_shipping: Optional[Boolean] = Field(None, alias="requiresShipping")
    restockable: Optional[Boolean] = None
    retail_location: Optional[Location] = Field(None, alias="retailLocation")
    return_status: Optional[OrderReturnStatus] = Field(None, alias="returnStatus")
    returns: Optional[ReturnConnection] = None
    risk: Optional[OrderRiskSummary] = None
    risk_level: Optional[OrderRiskLevel] = Field(None, alias="riskLevel")
    risks: list[OrderRisk] = Field(default_factory=list)
    shipping_address: Optional[MailingAddress] = Field(None, alias="shippingAddress")
    shipping_line: Optional[ShippingLine] = Field(None, alias="shippingLine")
    shipping_lines: Optional[ShippingLineConnection] = Field(None, alias="shippingLines")
    shopify_protect: Optional[ShopifyProtectOrderSummary] = Field(None, alias="shopifyProtect")
    source_identifier: Optional[String] = Field(None, alias="sourceIdentifier")
    source_name: Optional[String] = Field(None, alias="sourceName")
    staff_member: Optional[StaffMember] = Field(None, alias="staffMember")
    subtotal_line_items_quantity: Optional[Int] = Field(None, alias="subtotalLineItemsQuantity")
    subtotal_price: Optional[Money] = Field(None, alias="subtotalPrice")
    subtotal_price_set: Optional[MoneyBag] = Field(None, alias="subtotalPriceSet")
    suggested_refund: Optional[SuggestedRefund] = Field(None, alias="suggestedRefund")
    tags: list[String] = Field(default_factory=list)
    tax_exempt: Optional[Boolean] = Field(None, alias="taxExempt")
    tax_lines: list[TaxLine] = Field(default_factory=list, alias="taxLines")
    taxes_included: Optional[Boolean] = Field(None, alias="taxesIncluded")
    test: Optional[Boolean] = None
    total_capturable: Optional[Money] = Field(None, alias="totalCapturable")
    total_capturable_set: Optional[MoneyBag] = Field(None, alias="totalCapturableSet")
    total_discounts: Optional[Money] = Field(None, alias="totalDiscounts")
    total_discounts_set: Optional[MoneyBag] = Field(None, alias="totalDiscountsSet")
    total_outstanding_set: Optional[MoneyBag] = Field(None, alias="totalOutstandingSet")
    total_price: Optional[Money] = Field(None, alias="totalPrice")
    total_price_set: Optional[MoneyBag] = Field(None, alias="totalPriceSet")
    total_received: Optional[Money] = Field(None, alias="totalReceived")
    total_received_set: Optional[MoneyBag] = Field(None, alias="totalReceivedSet")
    total_refunded: Optional[Money] = Field(None, alias="totalRefunded")
    total_refunded_set: Optional[MoneyBag] = Field(None, alias="totalRefundedSet")
    total_refunded_shipping_set: Optional[MoneyBag] = Field(None, alias="totalRefundedShippingSet")
    total_shipping_price: Optional[Money] = Field(None, alias="totalShippingPrice")
    total_shipping_price_set: Optional[MoneyBag] = Field(None, alias="totalShippingPriceSet")
    total_tax: Optional[Money] = Field(None, alias="totalTax")
    total_tax_set: Optional[MoneyBag] = Field(None, alias="totalTaxSet")
    total_tip_received: Optional[MoneyV2] = Field(None, alias="totalTipReceived")
    total_tip_received_set: Optional[MoneyBag] = Field(None, alias="totalTipReceivedSet")
    total_weight: Optional[UnsignedInt64] = Field(None, alias="totalWeight")
    transactions: list[OrderTransaction] = Field(default_factory=list)
    transactions_count: Optional[Count] = Field(None, alias="transactionsCount")
    unpaid: Optional[Boolean] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["Order"]] = Field("Order", alias="__typename")


class OrderAgreement(SalesAgreement):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    happened_at: Optional[DateTime] = Field(None, alias="happenedAt")
    id: Optional[ID] = None
    order: Optional[Order] = None
    reason: Optional[OrderActionType] = None
    sales: Optional[SaleConnection] = None
    user: Optional[StaffMember] = None
    typename__: Optional[Literal["OrderAgreement"]] = Field("OrderAgreement", alias="__typename")


class OrderApp(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    icon: Optional[Image] = None
    id: Optional[ID] = None
    name: Optional[String] = None
    typename__: Optional[Literal["OrderApp"]] = Field("OrderApp", alias="__typename")


class OrderCancelPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    order_cancel_user_errors: list[OrderCancelUserError] = Field(default_factory=list, alias="orderCancelUserErrors")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderCancelPayload"]] = Field("OrderCancelPayload", alias="__typename")


class OrderCancelUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[OrderCancelUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["OrderCancelUserError"]] = Field("OrderCancelUserError", alias="__typename")


class OrderCancellation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    staff_note: Optional[String] = Field(None, alias="staffNote")
    typename__: Optional[Literal["OrderCancellation"]] = Field("OrderCancellation", alias="__typename")


class OrderCapturePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    transaction: Optional[OrderTransaction] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderCapturePayload"]] = Field("OrderCapturePayload", alias="__typename")


class OrderClosePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    order: Optional[Order] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderClosePayload"]] = Field("OrderClosePayload", alias="__typename")


class OrderConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[OrderEdge] = Field(default_factory=list)
    nodes: list[Order] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["OrderConnection"]] = Field("OrderConnection", alias="__typename")


class OrderCreateMandatePaymentPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    payment_reference_id: Optional[String] = Field(None, alias="paymentReferenceId")
    user_errors: list[OrderCreateMandatePaymentUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderCreateMandatePaymentPayload"]] = Field(
        "OrderCreateMandatePaymentPayload", alias="__typename"
    )


class OrderCreateMandatePaymentUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[OrderCreateMandatePaymentUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["OrderCreateMandatePaymentUserError"]] = Field(
        "OrderCreateMandatePaymentUserError", alias="__typename"
    )


class OrderDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[OrderDeleteUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderDeletePayload"]] = Field("OrderDeletePayload", alias="__typename")


class OrderDeleteUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[OrderDeleteUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["OrderDeleteUserError"]] = Field("OrderDeleteUserError", alias="__typename")


class OrderDisputeSummary(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    initiated_as: Optional[DisputeType] = Field(None, alias="initiatedAs")
    status: Optional[DisputeStatus] = None
    typename__: Optional[Literal["OrderDisputeSummary"]] = Field("OrderDisputeSummary", alias="__typename")


class OrderEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Order] = None
    typename__: Optional[Literal["OrderEdge"]] = Field("OrderEdge", alias="__typename")


class OrderEditAddCustomItemPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    calculated_line_item: Optional[CalculatedLineItem] = Field(None, alias="calculatedLineItem")
    calculated_order: Optional[CalculatedOrder] = Field(None, alias="calculatedOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderEditAddCustomItemPayload"]] = Field(
        "OrderEditAddCustomItemPayload", alias="__typename"
    )


class OrderEditAddLineItemDiscountPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    added_discount_staged_change: Optional[OrderStagedChangeAddLineItemDiscount] = Field(
        None, alias="addedDiscountStagedChange"
    )
    calculated_line_item: Optional[CalculatedLineItem] = Field(None, alias="calculatedLineItem")
    calculated_order: Optional[CalculatedOrder] = Field(None, alias="calculatedOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderEditAddLineItemDiscountPayload"]] = Field(
        "OrderEditAddLineItemDiscountPayload", alias="__typename"
    )


class OrderEditAddShippingLinePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    calculated_order: Optional[CalculatedOrder] = Field(None, alias="calculatedOrder")
    calculated_shipping_line: Optional[CalculatedShippingLine] = Field(None, alias="calculatedShippingLine")
    user_errors: list[OrderEditAddShippingLineUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderEditAddShippingLinePayload"]] = Field(
        "OrderEditAddShippingLinePayload", alias="__typename"
    )


class OrderEditAddShippingLineUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[OrderEditAddShippingLineUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["OrderEditAddShippingLineUserError"]] = Field(
        "OrderEditAddShippingLineUserError", alias="__typename"
    )


class OrderEditAddVariantPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    calculated_line_item: Optional[CalculatedLineItem] = Field(None, alias="calculatedLineItem")
    calculated_order: Optional[CalculatedOrder] = Field(None, alias="calculatedOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderEditAddVariantPayload"]] = Field(
        "OrderEditAddVariantPayload", alias="__typename"
    )


class OrderEditAgreement(SalesAgreement):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    happened_at: Optional[DateTime] = Field(None, alias="happenedAt")
    id: Optional[ID] = None
    reason: Optional[OrderActionType] = None
    sales: Optional[SaleConnection] = None
    user: Optional[StaffMember] = None
    typename__: Optional[Literal["OrderEditAgreement"]] = Field("OrderEditAgreement", alias="__typename")


class OrderEditBeginPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    calculated_order: Optional[CalculatedOrder] = Field(None, alias="calculatedOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderEditBeginPayload"]] = Field("OrderEditBeginPayload", alias="__typename")


class OrderEditCommitPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    order: Optional[Order] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderEditCommitPayload"]] = Field("OrderEditCommitPayload", alias="__typename")


class OrderEditRemoveDiscountPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    calculated_order: Optional[CalculatedOrder] = Field(None, alias="calculatedOrder")
    user_errors: list[OrderEditRemoveDiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderEditRemoveDiscountPayload"]] = Field(
        "OrderEditRemoveDiscountPayload", alias="__typename"
    )


class OrderEditRemoveDiscountUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[OrderEditRemoveDiscountUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["OrderEditRemoveDiscountUserError"]] = Field(
        "OrderEditRemoveDiscountUserError", alias="__typename"
    )


class OrderEditRemoveLineItemDiscountPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    calculated_line_item: Optional[CalculatedLineItem] = Field(None, alias="calculatedLineItem")
    calculated_order: Optional[CalculatedOrder] = Field(None, alias="calculatedOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderEditRemoveLineItemDiscountPayload"]] = Field(
        "OrderEditRemoveLineItemDiscountPayload", alias="__typename"
    )


class OrderEditRemoveShippingLinePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    calculated_order: Optional[CalculatedOrder] = Field(None, alias="calculatedOrder")
    user_errors: list[OrderEditRemoveShippingLineUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderEditRemoveShippingLinePayload"]] = Field(
        "OrderEditRemoveShippingLinePayload", alias="__typename"
    )


class OrderEditRemoveShippingLineUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[OrderEditRemoveShippingLineUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["OrderEditRemoveShippingLineUserError"]] = Field(
        "OrderEditRemoveShippingLineUserError", alias="__typename"
    )


class OrderEditSetQuantityPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    calculated_line_item: Optional[CalculatedLineItem] = Field(None, alias="calculatedLineItem")
    calculated_order: Optional[CalculatedOrder] = Field(None, alias="calculatedOrder")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderEditSetQuantityPayload"]] = Field(
        "OrderEditSetQuantityPayload", alias="__typename"
    )


class OrderEditUpdateDiscountPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    calculated_order: Optional[CalculatedOrder] = Field(None, alias="calculatedOrder")
    user_errors: list[OrderEditUpdateDiscountUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderEditUpdateDiscountPayload"]] = Field(
        "OrderEditUpdateDiscountPayload", alias="__typename"
    )


class OrderEditUpdateDiscountUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[OrderEditUpdateDiscountUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["OrderEditUpdateDiscountUserError"]] = Field(
        "OrderEditUpdateDiscountUserError", alias="__typename"
    )


class OrderEditUpdateShippingLinePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    calculated_order: Optional[CalculatedOrder] = Field(None, alias="calculatedOrder")
    user_errors: list[OrderEditUpdateShippingLineUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderEditUpdateShippingLinePayload"]] = Field(
        "OrderEditUpdateShippingLinePayload", alias="__typename"
    )


class OrderEditUpdateShippingLineUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[OrderEditUpdateShippingLineUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["OrderEditUpdateShippingLineUserError"]] = Field(
        "OrderEditUpdateShippingLineUserError", alias="__typename"
    )


class OrderInvoiceSendPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    order: Optional[Order] = None
    user_errors: list[OrderInvoiceSendUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderInvoiceSendPayload"]] = Field("OrderInvoiceSendPayload", alias="__typename")


class OrderInvoiceSendUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[OrderInvoiceSendUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["OrderInvoiceSendUserError"]] = Field("OrderInvoiceSendUserError", alias="__typename")


class OrderMarkAsPaidPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    order: Optional[Order] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderMarkAsPaidPayload"]] = Field("OrderMarkAsPaidPayload", alias="__typename")


class OrderOpenPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    order: Optional[Order] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderOpenPayload"]] = Field("OrderOpenPayload", alias="__typename")


class OrderPaymentCollectionDetails(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    additional_payment_collection_url: Optional[URL] = Field(None, alias="additionalPaymentCollectionUrl")
    vaulted_payment_methods: Optional[list[PaymentMandate]] = Field(default_factory=list, alias="vaultedPaymentMethods")
    typename__: Optional[Literal["OrderPaymentCollectionDetails"]] = Field(
        "OrderPaymentCollectionDetails", alias="__typename"
    )


class OrderPaymentStatus(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    error_message: Optional[String] = Field(None, alias="errorMessage")
    payment_reference_id: Optional[String] = Field(None, alias="paymentReferenceId")
    status: Optional[OrderPaymentStatusResult] = None
    transactions: list[OrderTransaction] = Field(default_factory=list)
    translated_error_message: Optional[String] = Field(None, alias="translatedErrorMessage")
    typename__: Optional[Literal["OrderPaymentStatus"]] = Field("OrderPaymentStatus", alias="__typename")


class OrderRisk(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    display: Optional[Boolean] = None
    level: Optional[OrderRiskLevel] = None
    message: Optional[String] = None
    typename__: Optional[Literal["OrderRisk"]] = Field("OrderRisk", alias="__typename")


class OrderRiskAssessment(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    facts: list[RiskFact] = Field(default_factory=list)
    provider: Optional[App] = None
    risk_level: Optional[RiskAssessmentResult] = Field(None, alias="riskLevel")
    typename__: Optional[Literal["OrderRiskAssessment"]] = Field("OrderRiskAssessment", alias="__typename")


class OrderRiskAssessmentCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    order_risk_assessment: Optional[OrderRiskAssessment] = Field(None, alias="orderRiskAssessment")
    user_errors: list[OrderRiskAssessmentCreateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderRiskAssessmentCreatePayload"]] = Field(
        "OrderRiskAssessmentCreatePayload", alias="__typename"
    )


class OrderRiskAssessmentCreateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[OrderRiskAssessmentCreateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["OrderRiskAssessmentCreateUserError"]] = Field(
        "OrderRiskAssessmentCreateUserError", alias="__typename"
    )


class OrderRiskSummary(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    assessments: list[OrderRiskAssessment] = Field(default_factory=list)
    recommendation: Optional[OrderRiskRecommendationResult] = None
    typename__: Optional[Literal["OrderRiskSummary"]] = Field("OrderRiskSummary", alias="__typename")


class OrderStagedChangeAddCustomItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    original_unit_price: Optional[MoneyV2] = Field(None, alias="originalUnitPrice")
    quantity: Optional[Int] = None
    title: Optional[String] = None
    typename__: Optional[Literal["OrderStagedChangeAddCustomItem"]] = Field(
        "OrderStagedChangeAddCustomItem", alias="__typename"
    )


class OrderStagedChangeAddLineItemDiscount(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[String] = None
    id: Optional[ID] = None
    value: Optional[PricingValue] = None
    typename__: Optional[Literal["OrderStagedChangeAddLineItemDiscount"]] = Field(
        "OrderStagedChangeAddLineItemDiscount", alias="__typename"
    )


class OrderStagedChangeAddShippingLine(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    phone: Optional[String] = None
    presentment_title: Optional[String] = Field(None, alias="presentmentTitle")
    price: Optional[MoneyV2] = None
    title: Optional[String] = None
    typename__: Optional[Literal["OrderStagedChangeAddShippingLine"]] = Field(
        "OrderStagedChangeAddShippingLine", alias="__typename"
    )


class OrderStagedChangeAddVariant(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    quantity: Optional[Int] = None
    variant: Optional[ProductVariant] = None
    typename__: Optional[Literal["OrderStagedChangeAddVariant"]] = Field(
        "OrderStagedChangeAddVariant", alias="__typename"
    )


class OrderStagedChangeConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[OrderStagedChangeEdge] = Field(default_factory=list)
    nodes: list[OrderStagedChange] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["OrderStagedChangeConnection"]] = Field(
        "OrderStagedChangeConnection", alias="__typename"
    )


class OrderStagedChangeDecrementItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    delta: Optional[Int] = None
    line_item: Optional[LineItem] = Field(None, alias="lineItem")
    restock: Optional[Boolean] = None
    typename__: Optional[Literal["OrderStagedChangeDecrementItem"]] = Field(
        "OrderStagedChangeDecrementItem", alias="__typename"
    )


class OrderStagedChangeEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[OrderStagedChange] = None
    typename__: Optional[Literal["OrderStagedChangeEdge"]] = Field("OrderStagedChangeEdge", alias="__typename")


class OrderStagedChangeIncrementItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    delta: Optional[Int] = None
    line_item: Optional[LineItem] = Field(None, alias="lineItem")
    typename__: Optional[Literal["OrderStagedChangeIncrementItem"]] = Field(
        "OrderStagedChangeIncrementItem", alias="__typename"
    )


class OrderStagedChangeRemoveShippingLine(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    shipping_line: Optional[ShippingLine] = Field(None, alias="shippingLine")
    typename__: Optional[Literal["OrderStagedChangeRemoveShippingLine"]] = Field(
        "OrderStagedChangeRemoveShippingLine", alias="__typename"
    )


class OrderTransaction(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    account_number: Optional[String] = Field(None, alias="accountNumber")
    amount: Optional[Money] = None
    amount_set: Optional[MoneyBag] = Field(None, alias="amountSet")
    amount_v2: Optional[MoneyV2] = Field(None, alias="amountV2")
    authorization_code: Optional[String] = Field(None, alias="authorizationCode")
    authorization_expires_at: Optional[DateTime] = Field(None, alias="authorizationExpiresAt")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    error_code: Optional[OrderTransactionErrorCode] = Field(None, alias="errorCode")
    fees: list[TransactionFee] = Field(default_factory=list)
    formatted_gateway: Optional[String] = Field(None, alias="formattedGateway")
    gateway: Optional[String] = None
    id: Optional[ID] = None
    kind: Optional[OrderTransactionKind] = None
    manually_capturable: Optional[Boolean] = Field(None, alias="manuallyCapturable")
    maximum_refundable: Optional[Money] = Field(None, alias="maximumRefundable")
    maximum_refundable_v2: Optional[MoneyV2] = Field(None, alias="maximumRefundableV2")
    multi_capturable: Optional[Boolean] = Field(None, alias="multiCapturable")
    order: Optional[Order] = None
    parent_transaction: Optional[OrderTransaction] = Field(None, alias="parentTransaction")
    payment_details: Optional[PaymentDetails] = Field(None, alias="paymentDetails")
    payment_icon: Optional[Image] = Field(None, alias="paymentIcon")
    payment_id: Optional[String] = Field(None, alias="paymentId")
    payment_method: Optional[PaymentMethods] = Field(None, alias="paymentMethod")
    processed_at: Optional[DateTime] = Field(None, alias="processedAt")
    receipt_json: Optional[JSON] = Field(None, alias="receiptJson")
    settlement_currency: Optional[CurrencyCode] = Field(None, alias="settlementCurrency")
    settlement_currency_rate: Optional[Decimal] = Field(None, alias="settlementCurrencyRate")
    shopify_payments_set: Optional[ShopifyPaymentsTransactionSet] = Field(None, alias="shopifyPaymentsSet")
    status: Optional[OrderTransactionStatus] = None
    test: Optional[Boolean] = None
    total_unsettled: Optional[Money] = Field(None, alias="totalUnsettled")
    total_unsettled_set: Optional[MoneyBag] = Field(None, alias="totalUnsettledSet")
    total_unsettled_v2: Optional[MoneyV2] = Field(None, alias="totalUnsettledV2")
    user: Optional[StaffMember] = None
    typename__: Optional[Literal["OrderTransaction"]] = Field("OrderTransaction", alias="__typename")


class OrderTransactionConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[OrderTransactionEdge] = Field(default_factory=list)
    nodes: list[OrderTransaction] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["OrderTransactionConnection"]] = Field(
        "OrderTransactionConnection", alias="__typename"
    )


class OrderTransactionEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[OrderTransaction] = None
    typename__: Optional[Literal["OrderTransactionEdge"]] = Field("OrderTransactionEdge", alias="__typename")


class OrderUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    order: Optional[Order] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["OrderUpdatePayload"]] = Field("OrderUpdatePayload", alias="__typename")


class PageInfo(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    end_cursor: Optional[String] = Field(None, alias="endCursor")
    has_next_page: Optional[Boolean] = Field(None, alias="hasNextPage")
    has_previous_page: Optional[Boolean] = Field(None, alias="hasPreviousPage")
    start_cursor: Optional[String] = Field(None, alias="startCursor")
    typename__: Optional[Literal["PageInfo"]] = Field("PageInfo", alias="__typename")


class PaymentCustomization(HasMetafieldDefinitions, HasMetafields, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    enabled: Optional[Boolean] = None
    error_history: Optional[FunctionsErrorHistory] = Field(None, alias="errorHistory")
    function_id: Optional[String] = Field(None, alias="functionId")
    id: Optional[ID] = None
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    shopify_function: Optional[ShopifyFunction] = Field(None, alias="shopifyFunction")
    title: Optional[String] = None
    typename__: Optional[Literal["PaymentCustomization"]] = Field("PaymentCustomization", alias="__typename")


class PaymentCustomizationActivationPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ids: Optional[list[String]] = Field(default_factory=list)
    user_errors: list[PaymentCustomizationError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PaymentCustomizationActivationPayload"]] = Field(
        "PaymentCustomizationActivationPayload", alias="__typename"
    )


class PaymentCustomizationConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[PaymentCustomizationEdge] = Field(default_factory=list)
    nodes: list[PaymentCustomization] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["PaymentCustomizationConnection"]] = Field(
        "PaymentCustomizationConnection", alias="__typename"
    )


class PaymentCustomizationCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    payment_customization: Optional[PaymentCustomization] = Field(None, alias="paymentCustomization")
    user_errors: list[PaymentCustomizationError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PaymentCustomizationCreatePayload"]] = Field(
        "PaymentCustomizationCreatePayload", alias="__typename"
    )


class PaymentCustomizationDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[PaymentCustomizationError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PaymentCustomizationDeletePayload"]] = Field(
        "PaymentCustomizationDeletePayload", alias="__typename"
    )


class PaymentCustomizationEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[PaymentCustomization] = None
    typename__: Optional[Literal["PaymentCustomizationEdge"]] = Field("PaymentCustomizationEdge", alias="__typename")


class PaymentCustomizationError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[PaymentCustomizationErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["PaymentCustomizationError"]] = Field("PaymentCustomizationError", alias="__typename")


class PaymentCustomizationUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    payment_customization: Optional[PaymentCustomization] = Field(None, alias="paymentCustomization")
    user_errors: list[PaymentCustomizationError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PaymentCustomizationUpdatePayload"]] = Field(
        "PaymentCustomizationUpdatePayload", alias="__typename"
    )


class PaymentMandate(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    payment_instrument: Optional[PaymentInstrument] = Field(None, alias="paymentInstrument")
    typename__: Optional[Literal["PaymentMandate"]] = Field("PaymentMandate", alias="__typename")


class PaymentReminderSendPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    success: Optional[Boolean] = None
    user_errors: list[PaymentReminderSendUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PaymentReminderSendPayload"]] = Field(
        "PaymentReminderSendPayload", alias="__typename"
    )


class PaymentReminderSendUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[PaymentReminderSendUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["PaymentReminderSendUserError"]] = Field(
        "PaymentReminderSendUserError", alias="__typename"
    )


class PaymentSchedule(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[MoneyV2] = None
    completed_at: Optional[DateTime] = Field(None, alias="completedAt")
    due_at: Optional[DateTime] = Field(None, alias="dueAt")
    id: Optional[ID] = None
    issued_at: Optional[DateTime] = Field(None, alias="issuedAt")
    payment_terms: Optional[PaymentTerms] = Field(None, alias="paymentTerms")
    typename__: Optional[Literal["PaymentSchedule"]] = Field("PaymentSchedule", alias="__typename")


class PaymentScheduleConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[PaymentScheduleEdge] = Field(default_factory=list)
    nodes: list[PaymentSchedule] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["PaymentScheduleConnection"]] = Field("PaymentScheduleConnection", alias="__typename")


class PaymentScheduleEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[PaymentSchedule] = None
    typename__: Optional[Literal["PaymentScheduleEdge"]] = Field("PaymentScheduleEdge", alias="__typename")


class PaymentSettings(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    supported_digital_wallets: list[DigitalWallet] = Field(default_factory=list, alias="supportedDigitalWallets")
    typename__: Optional[Literal["PaymentSettings"]] = Field("PaymentSettings", alias="__typename")


class PaymentTerms(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    draft_order: Optional[DraftOrder] = Field(None, alias="draftOrder")
    due_in_days: Optional[Int] = Field(None, alias="dueInDays")
    id: Optional[ID] = None
    order: Optional[Order] = None
    overdue: Optional[Boolean] = None
    payment_schedules: Optional[PaymentScheduleConnection] = Field(None, alias="paymentSchedules")
    payment_terms_name: Optional[String] = Field(None, alias="paymentTermsName")
    payment_terms_type: Optional[PaymentTermsType] = Field(None, alias="paymentTermsType")
    translated_name: Optional[String] = Field(None, alias="translatedName")
    typename__: Optional[Literal["PaymentTerms"]] = Field("PaymentTerms", alias="__typename")


class PaymentTermsCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    payment_terms: Optional[PaymentTerms] = Field(None, alias="paymentTerms")
    user_errors: list[PaymentTermsCreateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PaymentTermsCreatePayload"]] = Field("PaymentTermsCreatePayload", alias="__typename")


class PaymentTermsCreateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[PaymentTermsCreateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["PaymentTermsCreateUserError"]] = Field(
        "PaymentTermsCreateUserError", alias="__typename"
    )


class PaymentTermsDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[PaymentTermsDeleteUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PaymentTermsDeletePayload"]] = Field("PaymentTermsDeletePayload", alias="__typename")


class PaymentTermsDeleteUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[PaymentTermsDeleteUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["PaymentTermsDeleteUserError"]] = Field(
        "PaymentTermsDeleteUserError", alias="__typename"
    )


class PaymentTermsTemplate(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[String] = None
    due_in_days: Optional[Int] = Field(None, alias="dueInDays")
    id: Optional[ID] = None
    name: Optional[String] = None
    payment_terms_type: Optional[PaymentTermsType] = Field(None, alias="paymentTermsType")
    translated_name: Optional[String] = Field(None, alias="translatedName")
    typename__: Optional[Literal["PaymentTermsTemplate"]] = Field("PaymentTermsTemplate", alias="__typename")


class PaymentTermsUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    payment_terms: Optional[PaymentTerms] = Field(None, alias="paymentTerms")
    user_errors: list[PaymentTermsUpdateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PaymentTermsUpdatePayload"]] = Field("PaymentTermsUpdatePayload", alias="__typename")


class PaymentTermsUpdateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[PaymentTermsUpdateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["PaymentTermsUpdateUserError"]] = Field(
        "PaymentTermsUpdateUserError", alias="__typename"
    )


class PriceList(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    catalog: Optional[Catalog] = None
    currency: Optional[CurrencyCode] = None
    fixed_prices_count: Optional[Int] = Field(None, alias="fixedPricesCount")
    id: Optional[ID] = None
    name: Optional[String] = None
    parent: Optional[PriceListParent] = None
    prices: Optional[PriceListPriceConnection] = None
    quantity_rules: Optional[QuantityRuleConnection] = Field(None, alias="quantityRules")
    typename__: Optional[Literal["PriceList"]] = Field("PriceList", alias="__typename")


class PriceListAdjustment(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Optional[PriceListAdjustmentType] = None
    value: Optional[Float] = None
    typename__: Optional[Literal["PriceListAdjustment"]] = Field("PriceListAdjustment", alias="__typename")


class PriceListAdjustmentSettings(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    compare_at_mode: Optional[PriceListCompareAtMode] = Field(None, alias="compareAtMode")
    typename__: Optional[Literal["PriceListAdjustmentSettings"]] = Field(
        "PriceListAdjustmentSettings", alias="__typename"
    )


class PriceListConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[PriceListEdge] = Field(default_factory=list)
    nodes: list[PriceList] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["PriceListConnection"]] = Field("PriceListConnection", alias="__typename")


class PriceListCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    price_list: Optional[PriceList] = Field(None, alias="priceList")
    user_errors: list[PriceListUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PriceListCreatePayload"]] = Field("PriceListCreatePayload", alias="__typename")


class PriceListDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[PriceListUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PriceListDeletePayload"]] = Field("PriceListDeletePayload", alias="__typename")


class PriceListEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[PriceList] = None
    typename__: Optional[Literal["PriceListEdge"]] = Field("PriceListEdge", alias="__typename")


class PriceListFixedPricesAddPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    prices: Optional[list[PriceListPrice]] = Field(default_factory=list)
    user_errors: list[PriceListPriceUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PriceListFixedPricesAddPayload"]] = Field(
        "PriceListFixedPricesAddPayload", alias="__typename"
    )


class PriceListFixedPricesByProductBulkUpdateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[PriceListFixedPricesByProductBulkUpdateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["PriceListFixedPricesByProductBulkUpdateUserError"]] = Field(
        "PriceListFixedPricesByProductBulkUpdateUserError", alias="__typename"
    )


class PriceListFixedPricesByProductUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    price_list: Optional[PriceList] = Field(None, alias="priceList")
    prices_to_add_products: Optional[list[Product]] = Field(default_factory=list, alias="pricesToAddProducts")
    prices_to_delete_products: Optional[list[Product]] = Field(default_factory=list, alias="pricesToDeleteProducts")
    user_errors: list[PriceListFixedPricesByProductBulkUpdateUserError] = Field(
        default_factory=list, alias="userErrors"
    )
    typename__: Optional[Literal["PriceListFixedPricesByProductUpdatePayload"]] = Field(
        "PriceListFixedPricesByProductUpdatePayload", alias="__typename"
    )


class PriceListFixedPricesDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_fixed_price_variant_ids: Optional[list[ID]] = Field(
        default_factory=list, alias="deletedFixedPriceVariantIds"
    )
    user_errors: list[PriceListPriceUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PriceListFixedPricesDeletePayload"]] = Field(
        "PriceListFixedPricesDeletePayload", alias="__typename"
    )


class PriceListFixedPricesUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_fixed_price_variant_ids: Optional[list[ID]] = Field(
        default_factory=list, alias="deletedFixedPriceVariantIds"
    )
    price_list: Optional[PriceList] = Field(None, alias="priceList")
    prices_added: Optional[list[PriceListPrice]] = Field(default_factory=list, alias="pricesAdded")
    user_errors: list[PriceListPriceUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PriceListFixedPricesUpdatePayload"]] = Field(
        "PriceListFixedPricesUpdatePayload", alias="__typename"
    )


class PriceListParent(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    adjustment: Optional[PriceListAdjustment] = None
    settings: Optional[PriceListAdjustmentSettings] = None
    typename__: Optional[Literal["PriceListParent"]] = Field("PriceListParent", alias="__typename")


class PriceListPrice(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    compare_at_price: Optional[MoneyV2] = Field(None, alias="compareAtPrice")
    origin_type: Optional[PriceListPriceOriginType] = Field(None, alias="originType")
    price: Optional[MoneyV2] = None
    quantity_price_breaks: Optional[QuantityPriceBreakConnection] = Field(None, alias="quantityPriceBreaks")
    variant: Optional[ProductVariant] = None
    typename__: Optional[Literal["PriceListPrice"]] = Field("PriceListPrice", alias="__typename")


class PriceListPriceConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[PriceListPriceEdge] = Field(default_factory=list)
    nodes: list[PriceListPrice] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["PriceListPriceConnection"]] = Field("PriceListPriceConnection", alias="__typename")


class PriceListPriceEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[PriceListPrice] = None
    typename__: Optional[Literal["PriceListPriceEdge"]] = Field("PriceListPriceEdge", alias="__typename")


class PriceListPriceUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[PriceListPriceUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["PriceListPriceUserError"]] = Field("PriceListPriceUserError", alias="__typename")


class PriceListUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    price_list: Optional[PriceList] = Field(None, alias="priceList")
    user_errors: list[PriceListUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PriceListUpdatePayload"]] = Field("PriceListUpdatePayload", alias="__typename")


class PriceListUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[PriceListUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["PriceListUserError"]] = Field("PriceListUserError", alias="__typename")


class PriceRule(CommentEventSubject, HasEvents, LegacyInteroperability, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocation_limit: Optional[Int] = Field(None, alias="allocationLimit")
    allocation_method: Optional[PriceRuleAllocationMethod] = Field(None, alias="allocationMethod")
    app: Optional[App] = None
    combines_with: Optional[DiscountCombinesWith] = Field(None, alias="combinesWith")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    customer_selection: Optional[PriceRuleCustomerSelection] = Field(None, alias="customerSelection")
    discount_class: Optional[DiscountClass] = Field(None, alias="discountClass")
    discount_codes: Optional[PriceRuleDiscountCodeConnection] = Field(None, alias="discountCodes")
    discount_codes_count: Optional[Count] = Field(None, alias="discountCodesCount")
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    entitlement_to_prerequisite_quantity_ratio: Optional[PriceRuleEntitlementToPrerequisiteQuantityRatio] = Field(
        None, alias="entitlementToPrerequisiteQuantityRatio"
    )
    events: Optional[EventConnection] = None
    features: list[PriceRuleFeature] = Field(default_factory=list)
    has_timeline_comment: Optional[Boolean] = Field(None, alias="hasTimelineComment")
    id: Optional[ID] = None
    item_entitlements: Optional[PriceRuleItemEntitlements] = Field(None, alias="itemEntitlements")
    item_prerequisites: Optional[PriceRuleLineItemPrerequisites] = Field(None, alias="itemPrerequisites")
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    once_per_customer: Optional[Boolean] = Field(None, alias="oncePerCustomer")
    prerequisite_quantity_range: Optional[PriceRuleQuantityRange] = Field(None, alias="prerequisiteQuantityRange")
    prerequisite_shipping_price_range: Optional[PriceRuleMoneyRange] = Field(
        None, alias="prerequisiteShippingPriceRange"
    )
    prerequisite_subtotal_range: Optional[PriceRuleMoneyRange] = Field(None, alias="prerequisiteSubtotalRange")
    prerequisite_to_entitlement_quantity_ratio: Optional[PriceRulePrerequisiteToEntitlementQuantityRatio] = Field(
        None, alias="prerequisiteToEntitlementQuantityRatio"
    )
    shareable_urls: list[PriceRuleShareableUrl] = Field(default_factory=list, alias="shareableUrls")
    shipping_entitlements: Optional[PriceRuleShippingLineEntitlements] = Field(None, alias="shippingEntitlements")
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    status: Optional[PriceRuleStatus] = None
    summary: Optional[String] = None
    target: Optional[PriceRuleTarget] = None
    title: Optional[String] = None
    total_sales: Optional[MoneyV2] = Field(None, alias="totalSales")
    traits: list[PriceRuleTrait] = Field(default_factory=list)
    usage_count: Optional[Int] = Field(None, alias="usageCount")
    usage_limit: Optional[Int] = Field(None, alias="usageLimit")
    validity_period: Optional[PriceRuleValidityPeriod] = Field(None, alias="validityPeriod")
    value: Optional[PriceRuleValue] = None
    value_v2: Optional[PricingValue] = Field(None, alias="valueV2")
    typename__: Optional[Literal["PriceRule"]] = Field("PriceRule", alias="__typename")


class PriceRuleActivatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    price_rule: Optional[PriceRule] = Field(None, alias="priceRule")
    price_rule_user_errors: list[PriceRuleUserError] = Field(default_factory=list, alias="priceRuleUserErrors")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PriceRuleActivatePayload"]] = Field("PriceRuleActivatePayload", alias="__typename")


class PriceRuleConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[PriceRuleEdge] = Field(default_factory=list)
    nodes: list[PriceRule] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["PriceRuleConnection"]] = Field("PriceRuleConnection", alias="__typename")


class PriceRuleCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    price_rule: Optional[PriceRule] = Field(None, alias="priceRule")
    price_rule_discount_code: Optional[PriceRuleDiscountCode] = Field(None, alias="priceRuleDiscountCode")
    price_rule_user_errors: list[PriceRuleUserError] = Field(default_factory=list, alias="priceRuleUserErrors")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PriceRuleCreatePayload"]] = Field("PriceRuleCreatePayload", alias="__typename")


class PriceRuleCustomerSelection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customers: Optional[CustomerConnection] = None
    for_all_customers: Optional[Boolean] = Field(None, alias="forAllCustomers")
    segments: list[Segment] = Field(default_factory=list)
    typename__: Optional[Literal["PriceRuleCustomerSelection"]] = Field(
        "PriceRuleCustomerSelection", alias="__typename"
    )


class PriceRuleDeactivatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    price_rule: Optional[PriceRule] = Field(None, alias="priceRule")
    price_rule_user_errors: list[PriceRuleUserError] = Field(default_factory=list, alias="priceRuleUserErrors")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PriceRuleDeactivatePayload"]] = Field(
        "PriceRuleDeactivatePayload", alias="__typename"
    )


class PriceRuleDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_price_rule_id: Optional[ID] = Field(None, alias="deletedPriceRuleId")
    price_rule_user_errors: list[PriceRuleUserError] = Field(default_factory=list, alias="priceRuleUserErrors")
    shop: Optional[Shop] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PriceRuleDeletePayload"]] = Field("PriceRuleDeletePayload", alias="__typename")


class PriceRuleDiscountCode(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    code: Optional[String] = None
    id: Optional[ID] = None
    usage_count: Optional[Int] = Field(None, alias="usageCount")
    typename__: Optional[Literal["PriceRuleDiscountCode"]] = Field("PriceRuleDiscountCode", alias="__typename")


class PriceRuleDiscountCodeConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[PriceRuleDiscountCodeEdge] = Field(default_factory=list)
    nodes: list[PriceRuleDiscountCode] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["PriceRuleDiscountCodeConnection"]] = Field(
        "PriceRuleDiscountCodeConnection", alias="__typename"
    )


class PriceRuleDiscountCodeCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    price_rule: Optional[PriceRule] = Field(None, alias="priceRule")
    price_rule_discount_code: Optional[PriceRuleDiscountCode] = Field(None, alias="priceRuleDiscountCode")
    price_rule_user_errors: list[PriceRuleUserError] = Field(default_factory=list, alias="priceRuleUserErrors")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PriceRuleDiscountCodeCreatePayload"]] = Field(
        "PriceRuleDiscountCodeCreatePayload", alias="__typename"
    )


class PriceRuleDiscountCodeEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[PriceRuleDiscountCode] = None
    typename__: Optional[Literal["PriceRuleDiscountCodeEdge"]] = Field("PriceRuleDiscountCodeEdge", alias="__typename")


class PriceRuleDiscountCodeUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    price_rule: Optional[PriceRule] = Field(None, alias="priceRule")
    price_rule_discount_code: Optional[PriceRuleDiscountCode] = Field(None, alias="priceRuleDiscountCode")
    price_rule_user_errors: list[PriceRuleUserError] = Field(default_factory=list, alias="priceRuleUserErrors")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PriceRuleDiscountCodeUpdatePayload"]] = Field(
        "PriceRuleDiscountCodeUpdatePayload", alias="__typename"
    )


class PriceRuleEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[PriceRule] = None
    typename__: Optional[Literal["PriceRuleEdge"]] = Field("PriceRuleEdge", alias="__typename")


class PriceRuleEntitlementToPrerequisiteQuantityRatio(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    entitlement_quantity: Optional[Int] = Field(None, alias="entitlementQuantity")
    prerequisite_quantity: Optional[Int] = Field(None, alias="prerequisiteQuantity")
    typename__: Optional[Literal["PriceRuleEntitlementToPrerequisiteQuantityRatio"]] = Field(
        "PriceRuleEntitlementToPrerequisiteQuantityRatio", alias="__typename"
    )


class PriceRuleFixedAmountValue(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[Money] = None
    typename__: Optional[Literal["PriceRuleFixedAmountValue"]] = Field("PriceRuleFixedAmountValue", alias="__typename")


class PriceRuleItemEntitlements(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    collections: Optional[CollectionConnection] = None
    product_variants: Optional[ProductVariantConnection] = Field(None, alias="productVariants")
    products: Optional[ProductConnection] = None
    target_all_line_items: Optional[Boolean] = Field(None, alias="targetAllLineItems")
    typename__: Optional[Literal["PriceRuleItemEntitlements"]] = Field("PriceRuleItemEntitlements", alias="__typename")


class PriceRuleLineItemPrerequisites(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    collections: Optional[CollectionConnection] = None
    product_variants: Optional[ProductVariantConnection] = Field(None, alias="productVariants")
    products: Optional[ProductConnection] = None
    typename__: Optional[Literal["PriceRuleLineItemPrerequisites"]] = Field(
        "PriceRuleLineItemPrerequisites", alias="__typename"
    )


class PriceRuleMoneyRange(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    greater_than: Optional[Money] = Field(None, alias="greaterThan")
    greater_than_or_equal_to: Optional[Money] = Field(None, alias="greaterThanOrEqualTo")
    less_than: Optional[Money] = Field(None, alias="lessThan")
    less_than_or_equal_to: Optional[Money] = Field(None, alias="lessThanOrEqualTo")
    typename__: Optional[Literal["PriceRuleMoneyRange"]] = Field("PriceRuleMoneyRange", alias="__typename")


class PriceRulePercentValue(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    percentage: Optional[Float] = None
    typename__: Optional[Literal["PriceRulePercentValue"]] = Field("PriceRulePercentValue", alias="__typename")


class PriceRulePrerequisiteToEntitlementQuantityRatio(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    entitlement_quantity: Optional[Int] = Field(None, alias="entitlementQuantity")
    prerequisite_quantity: Optional[Int] = Field(None, alias="prerequisiteQuantity")
    typename__: Optional[Literal["PriceRulePrerequisiteToEntitlementQuantityRatio"]] = Field(
        "PriceRulePrerequisiteToEntitlementQuantityRatio", alias="__typename"
    )


class PriceRuleQuantityRange(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    greater_than: Optional[Int] = Field(None, alias="greaterThan")
    greater_than_or_equal_to: Optional[Int] = Field(None, alias="greaterThanOrEqualTo")
    less_than: Optional[Int] = Field(None, alias="lessThan")
    less_than_or_equal_to: Optional[Int] = Field(None, alias="lessThanOrEqualTo")
    typename__: Optional[Literal["PriceRuleQuantityRange"]] = Field("PriceRuleQuantityRange", alias="__typename")


class PriceRuleShareableUrl(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    target_item_image: Optional[Image] = Field(None, alias="targetItemImage")
    target_type: Optional[PriceRuleShareableUrlTargetType] = Field(None, alias="targetType")
    title: Optional[String] = None
    url: Optional[URL] = None
    typename__: Optional[Literal["PriceRuleShareableUrl"]] = Field("PriceRuleShareableUrl", alias="__typename")


class PriceRuleShippingLineEntitlements(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country_codes: list[CountryCode] = Field(default_factory=list, alias="countryCodes")
    include_rest_of_world: Optional[Boolean] = Field(None, alias="includeRestOfWorld")
    target_all_shipping_lines: Optional[Boolean] = Field(None, alias="targetAllShippingLines")
    typename__: Optional[Literal["PriceRuleShippingLineEntitlements"]] = Field(
        "PriceRuleShippingLineEntitlements", alias="__typename"
    )


class PriceRuleUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    price_rule: Optional[PriceRule] = Field(None, alias="priceRule")
    price_rule_discount_code: Optional[PriceRuleDiscountCode] = Field(None, alias="priceRuleDiscountCode")
    price_rule_user_errors: list[PriceRuleUserError] = Field(default_factory=list, alias="priceRuleUserErrors")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PriceRuleUpdatePayload"]] = Field("PriceRuleUpdatePayload", alias="__typename")


class PriceRuleUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[PriceRuleErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["PriceRuleUserError"]] = Field("PriceRuleUserError", alias="__typename")


class PriceRuleValidityPeriod(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    end: Optional[DateTime] = None
    start: Optional[DateTime] = None
    typename__: Optional[Literal["PriceRuleValidityPeriod"]] = Field("PriceRuleValidityPeriod", alias="__typename")


class PricingPercentageValue(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    percentage: Optional[Float] = None
    typename__: Optional[Literal["PricingPercentageValue"]] = Field("PricingPercentageValue", alias="__typename")


class PrivateMetafield(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    id: Optional[ID] = None
    key: Optional[String] = None
    namespace: Optional[String] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    value: Optional[String] = None
    value_type: Optional[PrivateMetafieldValueType] = Field(None, alias="valueType")
    typename__: Optional[Literal["PrivateMetafield"]] = Field("PrivateMetafield", alias="__typename")


class PrivateMetafieldConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[PrivateMetafieldEdge] = Field(default_factory=list)
    nodes: list[PrivateMetafield] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["PrivateMetafieldConnection"]] = Field(
        "PrivateMetafieldConnection", alias="__typename"
    )


class PrivateMetafieldDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_private_metafield_id: Optional[ID] = Field(None, alias="deletedPrivateMetafieldId")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PrivateMetafieldDeletePayload"]] = Field(
        "PrivateMetafieldDeletePayload", alias="__typename"
    )


class PrivateMetafieldEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[PrivateMetafield] = None
    typename__: Optional[Literal["PrivateMetafieldEdge"]] = Field("PrivateMetafieldEdge", alias="__typename")


class PrivateMetafieldUpsertPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PrivateMetafieldUpsertPayload"]] = Field(
        "PrivateMetafieldUpsertPayload", alias="__typename"
    )


class Product(
    HasMetafieldDefinitions,
    HasMetafields,
    HasPublishedTranslations,
    LegacyInteroperability,
    Navigable,
    Node,
    OnlineStorePreviewable,
    Publishable,
):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    available_publications_count: Optional[Count] = Field(None, alias="availablePublicationsCount")
    body_html: Optional[String] = Field(None, alias="bodyHtml")
    bundle_components: Optional[ProductBundleComponentConnection] = Field(None, alias="bundleComponents")
    category: Optional[TaxonomyCategory] = None
    collections: Optional[CollectionConnection] = None
    combined_listing: Optional[CombinedListing] = Field(None, alias="combinedListing")
    combined_listing_role: Optional[CombinedListingsRole] = Field(None, alias="combinedListingRole")
    compare_at_price_range: Optional[ProductCompareAtPriceRange] = Field(None, alias="compareAtPriceRange")
    contextual_pricing: Optional[ProductContextualPricing] = Field(None, alias="contextualPricing")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    custom_product_type: Optional[String] = Field(None, alias="customProductType")
    default_cursor: Optional[String] = Field(None, alias="defaultCursor")
    description: Optional[String] = None
    description_html: Optional[HTML] = Field(None, alias="descriptionHtml")
    description_plain_summary: Optional[String] = Field(None, alias="descriptionPlainSummary")
    featured_image: Optional[Image] = Field(None, alias="featuredImage")
    featured_media: Optional[Media] = Field(None, alias="featuredMedia")
    feedback: Optional[ResourceFeedback] = None
    gift_card_template_suffix: Optional[String] = Field(None, alias="giftCardTemplateSuffix")
    handle: Optional[String] = None
    has_only_default_variant: Optional[Boolean] = Field(None, alias="hasOnlyDefaultVariant")
    has_out_of_stock_variants: Optional[Boolean] = Field(None, alias="hasOutOfStockVariants")
    has_variants_that_requires_components: Optional[Boolean] = Field(None, alias="hasVariantsThatRequiresComponents")
    id: Optional[ID] = None
    images: Optional[ImageConnection] = None
    in_collection: Optional[Boolean] = Field(None, alias="inCollection")
    is_gift_card: Optional[Boolean] = Field(None, alias="isGiftCard")
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    media: Optional[MediaConnection] = None
    media_count: Optional[Count] = Field(None, alias="mediaCount")
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    online_store_preview_url: Optional[URL] = Field(None, alias="onlineStorePreviewUrl")
    online_store_url: Optional[URL] = Field(None, alias="onlineStoreUrl")
    options: list[ProductOption] = Field(default_factory=list)
    price_range: Optional[ProductPriceRange] = Field(None, alias="priceRange")
    price_range_v2: Optional[ProductPriceRangeV2] = Field(None, alias="priceRangeV2")
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    product_category: Optional[ProductCategory] = Field(None, alias="productCategory")
    product_publications: Optional[ProductPublicationConnection] = Field(None, alias="productPublications")
    product_type: Optional[String] = Field(None, alias="productType")
    publication_count: Optional[Int] = Field(None, alias="publicationCount")
    publications: Optional[ProductPublicationConnection] = None
    published_at: Optional[DateTime] = Field(None, alias="publishedAt")
    published_in_context: Optional[Boolean] = Field(None, alias="publishedInContext")
    published_on_channel: Optional[Boolean] = Field(None, alias="publishedOnChannel")
    published_on_current_channel: Optional[Boolean] = Field(None, alias="publishedOnCurrentChannel")
    published_on_current_publication: Optional[Boolean] = Field(None, alias="publishedOnCurrentPublication")
    published_on_publication: Optional[Boolean] = Field(None, alias="publishedOnPublication")
    requires_selling_plan: Optional[Boolean] = Field(None, alias="requiresSellingPlan")
    resource_publication_on_current_publication: Optional[ResourcePublicationV2] = Field(
        None, alias="resourcePublicationOnCurrentPublication"
    )
    resource_publications: Optional[ResourcePublicationConnection] = Field(None, alias="resourcePublications")
    resource_publications_count: Optional[Count] = Field(None, alias="resourcePublicationsCount")
    resource_publications_v2: Optional[ResourcePublicationV2Connection] = Field(None, alias="resourcePublicationsV2")
    restricted_for_resource: Optional[RestrictedForResource] = Field(None, alias="restrictedForResource")
    selling_plan_group_count: Optional[Int] = Field(None, alias="sellingPlanGroupCount")
    selling_plan_groups: Optional[SellingPlanGroupConnection] = Field(None, alias="sellingPlanGroups")
    selling_plan_groups_count: Optional[Count] = Field(None, alias="sellingPlanGroupsCount")
    seo: Optional[SEO] = None
    standardized_product_type: Optional[StandardizedProductType] = Field(None, alias="standardizedProductType")
    status: Optional[ProductStatus] = None
    storefront_id: Optional[StorefrontID] = Field(None, alias="storefrontId")
    tags: list[String] = Field(default_factory=list)
    template_suffix: Optional[String] = Field(None, alias="templateSuffix")
    title: Optional[String] = None
    total_inventory: Optional[Int] = Field(None, alias="totalInventory")
    total_variants: Optional[Int] = Field(None, alias="totalVariants")
    tracks_inventory: Optional[Boolean] = Field(None, alias="tracksInventory")
    translations: list[Translation] = Field(default_factory=list)
    unpublished_channels: Optional[ChannelConnection] = Field(None, alias="unpublishedChannels")
    unpublished_publications: Optional[PublicationConnection] = Field(None, alias="unpublishedPublications")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    variants: Optional[ProductVariantConnection] = None
    variants_count: Optional[Count] = Field(None, alias="variantsCount")
    vendor: Optional[String] = None
    typename__: Optional[Literal["Product"]] = Field("Product", alias="__typename")


class ProductAppendImagesPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    new_images: Optional[list[Image]] = Field(default_factory=list, alias="newImages")
    product: Optional[Product] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductAppendImagesPayload"]] = Field(
        "ProductAppendImagesPayload", alias="__typename"
    )


class ProductBundleComponent(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    component_product: Optional[Product] = Field(None, alias="componentProduct")
    component_variants: Optional[ProductVariantConnection] = Field(None, alias="componentVariants")
    component_variants_count: Optional[Count] = Field(None, alias="componentVariantsCount")
    option_selections: list[ProductBundleComponentOptionSelection] = Field(
        default_factory=list, alias="optionSelections"
    )
    quantity: Optional[Int] = None
    quantity_option: Optional[ProductBundleComponentQuantityOption] = Field(None, alias="quantityOption")
    typename__: Optional[Literal["ProductBundleComponent"]] = Field("ProductBundleComponent", alias="__typename")


class ProductBundleComponentConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ProductBundleComponentEdge] = Field(default_factory=list)
    nodes: list[ProductBundleComponent] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ProductBundleComponentConnection"]] = Field(
        "ProductBundleComponentConnection", alias="__typename"
    )


class ProductBundleComponentEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ProductBundleComponent] = None
    typename__: Optional[Literal["ProductBundleComponentEdge"]] = Field(
        "ProductBundleComponentEdge", alias="__typename"
    )


class ProductBundleComponentOptionSelection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    component_option: Optional[ProductOption] = Field(None, alias="componentOption")
    parent_option: Optional[ProductOption] = Field(None, alias="parentOption")
    values: list[ProductBundleComponentOptionSelectionValue] = Field(default_factory=list)
    typename__: Optional[Literal["ProductBundleComponentOptionSelection"]] = Field(
        "ProductBundleComponentOptionSelection", alias="__typename"
    )


class ProductBundleComponentOptionSelectionValue(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    selection_status: Optional[ProductBundleComponentOptionSelectionStatus] = Field(None, alias="selectionStatus")
    value: Optional[String] = None
    typename__: Optional[Literal["ProductBundleComponentOptionSelectionValue"]] = Field(
        "ProductBundleComponentOptionSelectionValue", alias="__typename"
    )


class ProductBundleComponentQuantityOption(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[String] = None
    parent_option: Optional[ProductOption] = Field(None, alias="parentOption")
    values: list[ProductBundleComponentQuantityOptionValue] = Field(default_factory=list)
    typename__: Optional[Literal["ProductBundleComponentQuantityOption"]] = Field(
        "ProductBundleComponentQuantityOption", alias="__typename"
    )


class ProductBundleComponentQuantityOptionValue(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[String] = None
    quantity: Optional[Int] = None
    typename__: Optional[Literal["ProductBundleComponentQuantityOptionValue"]] = Field(
        "ProductBundleComponentQuantityOptionValue", alias="__typename"
    )


class ProductBundleCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product_bundle_operation: Optional[ProductBundleOperation] = Field(None, alias="productBundleOperation")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductBundleCreatePayload"]] = Field(
        "ProductBundleCreatePayload", alias="__typename"
    )


class ProductBundleMutationUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ProductBundleMutationUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ProductBundleMutationUserError"]] = Field(
        "ProductBundleMutationUserError", alias="__typename"
    )


class ProductBundleOperation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    product: Optional[Product] = None
    status: Optional[ProductOperationStatus] = None
    user_errors: list[ProductBundleMutationUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductBundleOperation"]] = Field("ProductBundleOperation", alias="__typename")


class ProductBundleUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product_bundle_operation: Optional[ProductBundleOperation] = Field(None, alias="productBundleOperation")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductBundleUpdatePayload"]] = Field(
        "ProductBundleUpdatePayload", alias="__typename"
    )


class ProductCategory(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product_taxonomy_node: Optional[ProductTaxonomyNode] = Field(None, alias="productTaxonomyNode")
    typename__: Optional[Literal["ProductCategory"]] = Field("ProductCategory", alias="__typename")


class ProductChangeStatusPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    user_errors: list[ProductChangeStatusUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductChangeStatusPayload"]] = Field(
        "ProductChangeStatusPayload", alias="__typename"
    )


class ProductChangeStatusUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ProductChangeStatusUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ProductChangeStatusUserError"]] = Field(
        "ProductChangeStatusUserError", alias="__typename"
    )


class ProductCompareAtPriceRange(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    max_variant_compare_at_price: Optional[MoneyV2] = Field(None, alias="maxVariantCompareAtPrice")
    min_variant_compare_at_price: Optional[MoneyV2] = Field(None, alias="minVariantCompareAtPrice")
    typename__: Optional[Literal["ProductCompareAtPriceRange"]] = Field(
        "ProductCompareAtPriceRange", alias="__typename"
    )


class ProductConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ProductEdge] = Field(default_factory=list)
    nodes: list[Product] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ProductConnection"]] = Field("ProductConnection", alias="__typename")


class ProductContextualPricing(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fixed_quantity_rules_count: Optional[Int] = Field(None, alias="fixedQuantityRulesCount")
    max_variant_pricing: Optional[ProductVariantContextualPricing] = Field(None, alias="maxVariantPricing")
    min_variant_pricing: Optional[ProductVariantContextualPricing] = Field(None, alias="minVariantPricing")
    price_range: Optional[ProductPriceRangeV2] = Field(None, alias="priceRange")
    typename__: Optional[Literal["ProductContextualPricing"]] = Field("ProductContextualPricing", alias="__typename")


class ProductCreateMediaPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    media: Optional[list[Media]] = Field(default_factory=list)
    media_user_errors: list[MediaUserError] = Field(default_factory=list, alias="mediaUserErrors")
    product: Optional[Product] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductCreateMediaPayload"]] = Field("ProductCreateMediaPayload", alias="__typename")


class ProductCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    shop: Optional[Shop] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductCreatePayload"]] = Field("ProductCreatePayload", alias="__typename")


class ProductDeleteImagesPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_image_ids: list[ID] = Field(default_factory=list, alias="deletedImageIds")
    product: Optional[Product] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductDeleteImagesPayload"]] = Field(
        "ProductDeleteImagesPayload", alias="__typename"
    )


class ProductDeleteMediaPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_media_ids: Optional[list[ID]] = Field(default_factory=list, alias="deletedMediaIds")
    deleted_product_image_ids: Optional[list[ID]] = Field(default_factory=list, alias="deletedProductImageIds")
    media_user_errors: list[MediaUserError] = Field(default_factory=list, alias="mediaUserErrors")
    product: Optional[Product] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductDeleteMediaPayload"]] = Field("ProductDeleteMediaPayload", alias="__typename")


class ProductDeleteOperation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_product_id: Optional[ID] = Field(None, alias="deletedProductId")
    id: Optional[ID] = None
    product: Optional[Product] = None
    status: Optional[ProductOperationStatus] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductDeleteOperation"]] = Field("ProductDeleteOperation", alias="__typename")


class ProductDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_product_id: Optional[ID] = Field(None, alias="deletedProductId")
    product_delete_operation: Optional[ProductDeleteOperation] = Field(None, alias="productDeleteOperation")
    shop: Optional[Shop] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductDeletePayload"]] = Field("ProductDeletePayload", alias="__typename")


class ProductDuplicateJob(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    done: Optional[Boolean] = None
    id: Optional[ID] = None
    typename__: Optional[Literal["ProductDuplicateJob"]] = Field("ProductDuplicateJob", alias="__typename")


class ProductDuplicateOperation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    new_product: Optional[Product] = Field(None, alias="newProduct")
    product: Optional[Product] = None
    status: Optional[ProductOperationStatus] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductDuplicateOperation"]] = Field("ProductDuplicateOperation", alias="__typename")


class ProductDuplicatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    image_job: Optional[Job] = Field(None, alias="imageJob")
    new_product: Optional[Product] = Field(None, alias="newProduct")
    product_duplicate_operation: Optional[ProductDuplicateOperation] = Field(None, alias="productDuplicateOperation")
    shop: Optional[Shop] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductDuplicatePayload"]] = Field("ProductDuplicatePayload", alias="__typename")


class ProductEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Product] = None
    typename__: Optional[Literal["ProductEdge"]] = Field("ProductEdge", alias="__typename")


class ProductFeed(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country: Optional[CountryCode] = None
    id: Optional[ID] = None
    language: Optional[LanguageCode] = None
    status: Optional[ProductFeedStatus] = None
    typename__: Optional[Literal["ProductFeed"]] = Field("ProductFeed", alias="__typename")


class ProductFeedConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ProductFeedEdge] = Field(default_factory=list)
    nodes: list[ProductFeed] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ProductFeedConnection"]] = Field("ProductFeedConnection", alias="__typename")


class ProductFeedCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product_feed: Optional[ProductFeed] = Field(None, alias="productFeed")
    user_errors: list[ProductFeedCreateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductFeedCreatePayload"]] = Field("ProductFeedCreatePayload", alias="__typename")


class ProductFeedCreateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ProductFeedCreateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ProductFeedCreateUserError"]] = Field(
        "ProductFeedCreateUserError", alias="__typename"
    )


class ProductFeedDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[ProductFeedDeleteUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductFeedDeletePayload"]] = Field("ProductFeedDeletePayload", alias="__typename")


class ProductFeedDeleteUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ProductFeedDeleteUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ProductFeedDeleteUserError"]] = Field(
        "ProductFeedDeleteUserError", alias="__typename"
    )


class ProductFeedEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ProductFeed] = None
    typename__: Optional[Literal["ProductFeedEdge"]] = Field("ProductFeedEdge", alias="__typename")


class ProductFullSyncPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[ProductFullSyncUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductFullSyncPayload"]] = Field("ProductFullSyncPayload", alias="__typename")


class ProductFullSyncUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ProductFullSyncUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ProductFullSyncUserError"]] = Field("ProductFullSyncUserError", alias="__typename")


class ProductImageUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    image: Optional[Image] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductImageUpdatePayload"]] = Field("ProductImageUpdatePayload", alias="__typename")


class ProductJoinSellingPlanGroupsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    user_errors: list[SellingPlanGroupUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductJoinSellingPlanGroupsPayload"]] = Field(
        "ProductJoinSellingPlanGroupsPayload", alias="__typename"
    )


class ProductLeaveSellingPlanGroupsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    user_errors: list[SellingPlanGroupUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductLeaveSellingPlanGroupsPayload"]] = Field(
        "ProductLeaveSellingPlanGroupsPayload", alias="__typename"
    )


class ProductOption(HasPublishedTranslations, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    linked_metafield: Optional[LinkedMetafield] = Field(None, alias="linkedMetafield")
    name: Optional[String] = None
    option_values: list[ProductOptionValue] = Field(default_factory=list, alias="optionValues")
    position: Optional[Int] = None
    translations: list[Translation] = Field(default_factory=list)
    values: list[String] = Field(default_factory=list)
    typename__: Optional[Literal["ProductOption"]] = Field("ProductOption", alias="__typename")


class ProductOptionUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    user_errors: list[ProductOptionUpdateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductOptionUpdatePayload"]] = Field(
        "ProductOptionUpdatePayload", alias="__typename"
    )


class ProductOptionUpdateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ProductOptionUpdateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ProductOptionUpdateUserError"]] = Field(
        "ProductOptionUpdateUserError", alias="__typename"
    )


class ProductOptionValue(HasPublishedTranslations, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    has_variants: Optional[Boolean] = Field(None, alias="hasVariants")
    id: Optional[ID] = None
    linked_metafield_value: Optional[String] = Field(None, alias="linkedMetafieldValue")
    name: Optional[String] = None
    swatch: Optional[ProductOptionValueSwatch] = None
    translations: list[Translation] = Field(default_factory=list)
    typename__: Optional[Literal["ProductOptionValue"]] = Field("ProductOptionValue", alias="__typename")


class ProductOptionValueSwatch(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    color: Optional[Color] = None
    image: Optional[MediaImage] = None
    typename__: Optional[Literal["ProductOptionValueSwatch"]] = Field("ProductOptionValueSwatch", alias="__typename")


class ProductOptionsCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    user_errors: list[ProductOptionsCreateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductOptionsCreatePayload"]] = Field(
        "ProductOptionsCreatePayload", alias="__typename"
    )


class ProductOptionsCreateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ProductOptionsCreateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ProductOptionsCreateUserError"]] = Field(
        "ProductOptionsCreateUserError", alias="__typename"
    )


class ProductOptionsDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_options_ids: Optional[list[ID]] = Field(default_factory=list, alias="deletedOptionsIds")
    product: Optional[Product] = None
    user_errors: list[ProductOptionsDeleteUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductOptionsDeletePayload"]] = Field(
        "ProductOptionsDeletePayload", alias="__typename"
    )


class ProductOptionsDeleteUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ProductOptionsDeleteUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ProductOptionsDeleteUserError"]] = Field(
        "ProductOptionsDeleteUserError", alias="__typename"
    )


class ProductOptionsReorderPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    user_errors: list[ProductOptionsReorderUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductOptionsReorderPayload"]] = Field(
        "ProductOptionsReorderPayload", alias="__typename"
    )


class ProductOptionsReorderUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ProductOptionsReorderUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ProductOptionsReorderUserError"]] = Field(
        "ProductOptionsReorderUserError", alias="__typename"
    )


class ProductPriceRange(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    max_variant_price: Optional[MoneyV2] = Field(None, alias="maxVariantPrice")
    min_variant_price: Optional[MoneyV2] = Field(None, alias="minVariantPrice")
    typename__: Optional[Literal["ProductPriceRange"]] = Field("ProductPriceRange", alias="__typename")


class ProductPriceRangeV2(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    max_variant_price: Optional[MoneyV2] = Field(None, alias="maxVariantPrice")
    min_variant_price: Optional[MoneyV2] = Field(None, alias="minVariantPrice")
    typename__: Optional[Literal["ProductPriceRangeV2"]] = Field("ProductPriceRangeV2", alias="__typename")


class ProductPublication(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    channel: Optional[Channel] = None
    is_published: Optional[Boolean] = Field(None, alias="isPublished")
    product: Optional[Product] = None
    publish_date: Optional[DateTime] = Field(None, alias="publishDate")
    typename__: Optional[Literal["ProductPublication"]] = Field("ProductPublication", alias="__typename")


class ProductPublicationConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ProductPublicationEdge] = Field(default_factory=list)
    nodes: list[ProductPublication] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ProductPublicationConnection"]] = Field(
        "ProductPublicationConnection", alias="__typename"
    )


class ProductPublicationEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ProductPublication] = None
    typename__: Optional[Literal["ProductPublicationEdge"]] = Field("ProductPublicationEdge", alias="__typename")


class ProductPublishPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    product_publications: Optional[list[ProductPublication]] = Field(default_factory=list, alias="productPublications")
    shop: Optional[Shop] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductPublishPayload"]] = Field("ProductPublishPayload", alias="__typename")


class ProductReorderImagesPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductReorderImagesPayload"]] = Field(
        "ProductReorderImagesPayload", alias="__typename"
    )


class ProductReorderMediaPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    media_user_errors: list[MediaUserError] = Field(default_factory=list, alias="mediaUserErrors")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductReorderMediaPayload"]] = Field(
        "ProductReorderMediaPayload", alias="__typename"
    )


class ProductResourceFeedback(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    feedback_generated_at: Optional[DateTime] = Field(None, alias="feedbackGeneratedAt")
    messages: list[String] = Field(default_factory=list)
    product_id: Optional[ID] = Field(None, alias="productId")
    product_updated_at: Optional[DateTime] = Field(None, alias="productUpdatedAt")
    state: Optional[ResourceFeedbackState] = None
    typename__: Optional[Literal["ProductResourceFeedback"]] = Field("ProductResourceFeedback", alias="__typename")


class ProductSale(Sale):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    action_type: Optional[SaleActionType] = Field(None, alias="actionType")
    id: Optional[ID] = None
    line_item: Optional[LineItem] = Field(None, alias="lineItem")
    line_type: Optional[SaleLineType] = Field(None, alias="lineType")
    quantity: Optional[Int] = None
    taxes: list[SaleTax] = Field(default_factory=list)
    total_amount: Optional[MoneyBag] = Field(None, alias="totalAmount")
    total_discount_amount_after_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountAfterTaxes")
    total_discount_amount_before_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountBeforeTaxes")
    total_tax_amount: Optional[MoneyBag] = Field(None, alias="totalTaxAmount")
    typename__: Optional[Literal["ProductSale"]] = Field("ProductSale", alias="__typename")


class ProductSetOperation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    product: Optional[Product] = None
    status: Optional[ProductOperationStatus] = None
    user_errors: list[ProductSetUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductSetOperation"]] = Field("ProductSetOperation", alias="__typename")


class ProductSetPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    product_set_operation: Optional[ProductSetOperation] = Field(None, alias="productSetOperation")
    user_errors: list[ProductSetUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductSetPayload"]] = Field("ProductSetPayload", alias="__typename")


class ProductSetUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ProductSetUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ProductSetUserError"]] = Field("ProductSetUserError", alias="__typename")


class ProductTaxonomyNode(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    full_name: Optional[String] = Field(None, alias="fullName")
    id: Optional[ID] = None
    is_leaf: Optional[Boolean] = Field(None, alias="isLeaf")
    is_root: Optional[Boolean] = Field(None, alias="isRoot")
    name: Optional[String] = None
    typename__: Optional[Literal["ProductTaxonomyNode"]] = Field("ProductTaxonomyNode", alias="__typename")


class ProductUnpublishPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    shop: Optional[Shop] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductUnpublishPayload"]] = Field("ProductUnpublishPayload", alias="__typename")


class ProductUpdateMediaPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    media: Optional[list[Media]] = Field(default_factory=list)
    media_user_errors: list[MediaUserError] = Field(default_factory=list, alias="mediaUserErrors")
    product: Optional[Product] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductUpdateMediaPayload"]] = Field("ProductUpdateMediaPayload", alias="__typename")


class ProductUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductUpdatePayload"]] = Field("ProductUpdatePayload", alias="__typename")


class ProductVariant(
    HasMetafieldDefinitions,
    HasMetafields,
    HasPublishedTranslations,
    LegacyInteroperability,
    Navigable,
    Node,
):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    available_for_sale: Optional[Boolean] = Field(None, alias="availableForSale")
    barcode: Optional[String] = None
    compare_at_price: Optional[Money] = Field(None, alias="compareAtPrice")
    contextual_pricing: Optional[ProductVariantContextualPricing] = Field(None, alias="contextualPricing")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    default_cursor: Optional[String] = Field(None, alias="defaultCursor")
    delivery_profile: Optional[DeliveryProfile] = Field(None, alias="deliveryProfile")
    display_name: Optional[String] = Field(None, alias="displayName")
    id: Optional[ID] = None
    image: Optional[Image] = None
    inventory_item: Optional[InventoryItem] = Field(None, alias="inventoryItem")
    inventory_policy: Optional[ProductVariantInventoryPolicy] = Field(None, alias="inventoryPolicy")
    inventory_quantity: Optional[Int] = Field(None, alias="inventoryQuantity")
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    media: Optional[MediaConnection] = None
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    position: Optional[Int] = None
    presentment_prices: Optional[ProductVariantPricePairConnection] = Field(None, alias="presentmentPrices")
    price: Optional[Money] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    product: Optional[Product] = None
    product_variant_components: Optional[ProductVariantComponentConnection] = Field(
        None, alias="productVariantComponents"
    )
    requires_components: Optional[Boolean] = Field(None, alias="requiresComponents")
    selected_options: list[SelectedOption] = Field(default_factory=list, alias="selectedOptions")
    sellable_online_quantity: Optional[Int] = Field(None, alias="sellableOnlineQuantity")
    selling_plan_group_count: Optional[Int] = Field(None, alias="sellingPlanGroupCount")
    selling_plan_groups: Optional[SellingPlanGroupConnection] = Field(None, alias="sellingPlanGroups")
    selling_plan_groups_count: Optional[Count] = Field(None, alias="sellingPlanGroupsCount")
    sku: Optional[String] = None
    storefront_id: Optional[StorefrontID] = Field(None, alias="storefrontId")
    tax_code: Optional[String] = Field(None, alias="taxCode")
    taxable: Optional[Boolean] = None
    title: Optional[String] = None
    translations: list[Translation] = Field(default_factory=list)
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["ProductVariant"]] = Field("ProductVariant", alias="__typename")


class ProductVariantAppendMediaPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    product_variants: Optional[list[ProductVariant]] = Field(default_factory=list, alias="productVariants")
    user_errors: list[MediaUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductVariantAppendMediaPayload"]] = Field(
        "ProductVariantAppendMediaPayload", alias="__typename"
    )


class ProductVariantComponent(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    product_variant: Optional[ProductVariant] = Field(None, alias="productVariant")
    quantity: Optional[Int] = None
    typename__: Optional[Literal["ProductVariantComponent"]] = Field("ProductVariantComponent", alias="__typename")


class ProductVariantComponentConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ProductVariantComponentEdge] = Field(default_factory=list)
    nodes: list[ProductVariantComponent] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ProductVariantComponentConnection"]] = Field(
        "ProductVariantComponentConnection", alias="__typename"
    )


class ProductVariantComponentEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ProductVariantComponent] = None
    typename__: Optional[Literal["ProductVariantComponentEdge"]] = Field(
        "ProductVariantComponentEdge", alias="__typename"
    )


class ProductVariantConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ProductVariantEdge] = Field(default_factory=list)
    nodes: list[ProductVariant] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ProductVariantConnection"]] = Field("ProductVariantConnection", alias="__typename")


class ProductVariantContextualPricing(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    compare_at_price: Optional[MoneyV2] = Field(None, alias="compareAtPrice")
    price: Optional[MoneyV2] = None
    quantity_price_breaks: Optional[QuantityPriceBreakConnection] = Field(None, alias="quantityPriceBreaks")
    quantity_rule: Optional[QuantityRule] = Field(None, alias="quantityRule")
    typename__: Optional[Literal["ProductVariantContextualPricing"]] = Field(
        "ProductVariantContextualPricing", alias="__typename"
    )


class ProductVariantCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    product_variant: Optional[ProductVariant] = Field(None, alias="productVariant")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductVariantCreatePayload"]] = Field(
        "ProductVariantCreatePayload", alias="__typename"
    )


class ProductVariantDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_product_variant_id: Optional[ID] = Field(None, alias="deletedProductVariantId")
    product: Optional[Product] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductVariantDeletePayload"]] = Field(
        "ProductVariantDeletePayload", alias="__typename"
    )


class ProductVariantDetachMediaPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    product_variants: Optional[list[ProductVariant]] = Field(default_factory=list, alias="productVariants")
    user_errors: list[MediaUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductVariantDetachMediaPayload"]] = Field(
        "ProductVariantDetachMediaPayload", alias="__typename"
    )


class ProductVariantEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ProductVariant] = None
    typename__: Optional[Literal["ProductVariantEdge"]] = Field("ProductVariantEdge", alias="__typename")


class ProductVariantJoinSellingPlanGroupsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product_variant: Optional[ProductVariant] = Field(None, alias="productVariant")
    user_errors: list[SellingPlanGroupUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductVariantJoinSellingPlanGroupsPayload"]] = Field(
        "ProductVariantJoinSellingPlanGroupsPayload", alias="__typename"
    )


class ProductVariantLeaveSellingPlanGroupsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product_variant: Optional[ProductVariant] = Field(None, alias="productVariant")
    user_errors: list[SellingPlanGroupUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductVariantLeaveSellingPlanGroupsPayload"]] = Field(
        "ProductVariantLeaveSellingPlanGroupsPayload", alias="__typename"
    )


class ProductVariantPricePair(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    compare_at_price: Optional[MoneyV2] = Field(None, alias="compareAtPrice")
    price: Optional[MoneyV2] = None
    typename__: Optional[Literal["ProductVariantPricePair"]] = Field("ProductVariantPricePair", alias="__typename")


class ProductVariantPricePairConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ProductVariantPricePairEdge] = Field(default_factory=list)
    nodes: list[ProductVariantPricePair] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ProductVariantPricePairConnection"]] = Field(
        "ProductVariantPricePairConnection", alias="__typename"
    )


class ProductVariantPricePairEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ProductVariantPricePair] = None
    typename__: Optional[Literal["ProductVariantPricePairEdge"]] = Field(
        "ProductVariantPricePairEdge", alias="__typename"
    )


class ProductVariantRelationshipBulkUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    parent_product_variants: Optional[list[ProductVariant]] = Field(default_factory=list, alias="parentProductVariants")
    user_errors: list[ProductVariantRelationshipBulkUpdateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductVariantRelationshipBulkUpdatePayload"]] = Field(
        "ProductVariantRelationshipBulkUpdatePayload", alias="__typename"
    )


class ProductVariantRelationshipBulkUpdateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ProductVariantRelationshipBulkUpdateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ProductVariantRelationshipBulkUpdateUserError"]] = Field(
        "ProductVariantRelationshipBulkUpdateUserError", alias="__typename"
    )


class ProductVariantUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    product_variant: Optional[ProductVariant] = Field(None, alias="productVariant")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductVariantUpdatePayload"]] = Field(
        "ProductVariantUpdatePayload", alias="__typename"
    )


class ProductVariantsBulkCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    product_variants: Optional[list[ProductVariant]] = Field(default_factory=list, alias="productVariants")
    user_errors: list[ProductVariantsBulkCreateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductVariantsBulkCreatePayload"]] = Field(
        "ProductVariantsBulkCreatePayload", alias="__typename"
    )


class ProductVariantsBulkCreateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ProductVariantsBulkCreateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ProductVariantsBulkCreateUserError"]] = Field(
        "ProductVariantsBulkCreateUserError", alias="__typename"
    )


class ProductVariantsBulkDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    user_errors: list[ProductVariantsBulkDeleteUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductVariantsBulkDeletePayload"]] = Field(
        "ProductVariantsBulkDeletePayload", alias="__typename"
    )


class ProductVariantsBulkDeleteUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ProductVariantsBulkDeleteUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ProductVariantsBulkDeleteUserError"]] = Field(
        "ProductVariantsBulkDeleteUserError", alias="__typename"
    )


class ProductVariantsBulkReorderPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    user_errors: list[ProductVariantsBulkReorderUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductVariantsBulkReorderPayload"]] = Field(
        "ProductVariantsBulkReorderPayload", alias="__typename"
    )


class ProductVariantsBulkReorderUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ProductVariantsBulkReorderUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ProductVariantsBulkReorderUserError"]] = Field(
        "ProductVariantsBulkReorderUserError", alias="__typename"
    )


class ProductVariantsBulkUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product: Optional[Product] = None
    product_variants: Optional[list[ProductVariant]] = Field(default_factory=list, alias="productVariants")
    user_errors: list[ProductVariantsBulkUpdateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ProductVariantsBulkUpdatePayload"]] = Field(
        "ProductVariantsBulkUpdatePayload", alias="__typename"
    )


class ProductVariantsBulkUpdateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ProductVariantsBulkUpdateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ProductVariantsBulkUpdateUserError"]] = Field(
        "ProductVariantsBulkUpdateUserError", alias="__typename"
    )


class PubSubServerPixelUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    server_pixel: Optional[ServerPixel] = Field(None, alias="serverPixel")
    user_errors: list[ErrorsServerPixelUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PubSubServerPixelUpdatePayload"]] = Field(
        "PubSubServerPixelUpdatePayload", alias="__typename"
    )


class PubSubWebhookSubscriptionCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[PubSubWebhookSubscriptionCreateUserError] = Field(default_factory=list, alias="userErrors")
    webhook_subscription: Optional[WebhookSubscription] = Field(None, alias="webhookSubscription")
    typename__: Optional[Literal["PubSubWebhookSubscriptionCreatePayload"]] = Field(
        "PubSubWebhookSubscriptionCreatePayload", alias="__typename"
    )


class PubSubWebhookSubscriptionCreateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[PubSubWebhookSubscriptionCreateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["PubSubWebhookSubscriptionCreateUserError"]] = Field(
        "PubSubWebhookSubscriptionCreateUserError", alias="__typename"
    )


class PubSubWebhookSubscriptionUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[PubSubWebhookSubscriptionUpdateUserError] = Field(default_factory=list, alias="userErrors")
    webhook_subscription: Optional[WebhookSubscription] = Field(None, alias="webhookSubscription")
    typename__: Optional[Literal["PubSubWebhookSubscriptionUpdatePayload"]] = Field(
        "PubSubWebhookSubscriptionUpdatePayload", alias="__typename"
    )


class PubSubWebhookSubscriptionUpdateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[PubSubWebhookSubscriptionUpdateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["PubSubWebhookSubscriptionUpdateUserError"]] = Field(
        "PubSubWebhookSubscriptionUpdateUserError", alias="__typename"
    )


class Publication(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    auto_publish: Optional[Boolean] = Field(None, alias="autoPublish")
    catalog: Optional[Catalog] = None
    collection_publications_v3: Optional[ResourcePublicationConnection] = Field(None, alias="collectionPublicationsV3")
    collections: Optional[CollectionConnection] = None
    has_collection: Optional[Boolean] = Field(None, alias="hasCollection")
    id: Optional[ID] = None
    name: Optional[String] = None
    operation: Optional[PublicationOperation] = None
    product_publications_v3: Optional[ResourcePublicationConnection] = Field(None, alias="productPublicationsV3")
    products: Optional[ProductConnection] = None
    supports_future_publishing: Optional[Boolean] = Field(None, alias="supportsFuturePublishing")
    typename__: Optional[Literal["Publication"]] = Field("Publication", alias="__typename")


class PublicationConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[PublicationEdge] = Field(default_factory=list)
    nodes: list[Publication] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["PublicationConnection"]] = Field("PublicationConnection", alias="__typename")


class PublicationCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    publication: Optional[Publication] = None
    user_errors: list[PublicationUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PublicationCreatePayload"]] = Field("PublicationCreatePayload", alias="__typename")


class PublicationDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[PublicationUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PublicationDeletePayload"]] = Field("PublicationDeletePayload", alias="__typename")


class PublicationEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Publication] = None
    typename__: Optional[Literal["PublicationEdge"]] = Field("PublicationEdge", alias="__typename")


class PublicationResourceOperation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    processed_row_count: Optional[Int] = Field(None, alias="processedRowCount")
    row_count: Optional[RowCount] = Field(None, alias="rowCount")
    status: Optional[ResourceOperationStatus] = None
    typename__: Optional[Literal["PublicationResourceOperation"]] = Field(
        "PublicationResourceOperation", alias="__typename"
    )


class PublicationUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    publication: Optional[Publication] = None
    user_errors: list[PublicationUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PublicationUpdatePayload"]] = Field("PublicationUpdatePayload", alias="__typename")


class PublicationUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[PublicationUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["PublicationUserError"]] = Field("PublicationUserError", alias="__typename")


class PublishablePublishPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    publishable: Optional[Publishable] = None
    shop: Optional[Shop] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PublishablePublishPayload"]] = Field("PublishablePublishPayload", alias="__typename")


class PublishablePublishToCurrentChannelPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    publishable: Optional[Publishable] = None
    shop: Optional[Shop] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PublishablePublishToCurrentChannelPayload"]] = Field(
        "PublishablePublishToCurrentChannelPayload", alias="__typename"
    )


class PublishableUnpublishPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    publishable: Optional[Publishable] = None
    shop: Optional[Shop] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PublishableUnpublishPayload"]] = Field(
        "PublishableUnpublishPayload", alias="__typename"
    )


class PublishableUnpublishToCurrentChannelPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    publishable: Optional[Publishable] = None
    shop: Optional[Shop] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["PublishableUnpublishToCurrentChannelPayload"]] = Field(
        "PublishableUnpublishToCurrentChannelPayload", alias="__typename"
    )


class PurchasingCompany(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company: Optional[Company] = None
    contact: Optional[CompanyContact] = None
    location: Optional[CompanyLocation] = None
    typename__: Optional[Literal["PurchasingCompany"]] = Field("PurchasingCompany", alias="__typename")


class QuantityPriceBreak(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    minimum_quantity: Optional[Int] = Field(None, alias="minimumQuantity")
    price: Optional[MoneyV2] = None
    price_list: Optional[PriceList] = Field(None, alias="priceList")
    variant: Optional[ProductVariant] = None
    typename__: Optional[Literal["QuantityPriceBreak"]] = Field("QuantityPriceBreak", alias="__typename")


class QuantityPriceBreakConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[QuantityPriceBreakEdge] = Field(default_factory=list)
    nodes: list[QuantityPriceBreak] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["QuantityPriceBreakConnection"]] = Field(
        "QuantityPriceBreakConnection", alias="__typename"
    )


class QuantityPriceBreakEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[QuantityPriceBreak] = None
    typename__: Optional[Literal["QuantityPriceBreakEdge"]] = Field("QuantityPriceBreakEdge", alias="__typename")


class QuantityPricingByVariantUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product_variants: Optional[list[ProductVariant]] = Field(default_factory=list, alias="productVariants")
    user_errors: list[QuantityPricingByVariantUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["QuantityPricingByVariantUpdatePayload"]] = Field(
        "QuantityPricingByVariantUpdatePayload", alias="__typename"
    )


class QuantityPricingByVariantUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[QuantityPricingByVariantUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["QuantityPricingByVariantUserError"]] = Field(
        "QuantityPricingByVariantUserError", alias="__typename"
    )


class QuantityRule(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    increment: Optional[Int] = None
    is_default: Optional[Boolean] = Field(None, alias="isDefault")
    maximum: Optional[Int] = None
    minimum: Optional[Int] = None
    origin_type: Optional[QuantityRuleOriginType] = Field(None, alias="originType")
    product_variant: Optional[ProductVariant] = Field(None, alias="productVariant")
    typename__: Optional[Literal["QuantityRule"]] = Field("QuantityRule", alias="__typename")


class QuantityRuleConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[QuantityRuleEdge] = Field(default_factory=list)
    nodes: list[QuantityRule] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["QuantityRuleConnection"]] = Field("QuantityRuleConnection", alias="__typename")


class QuantityRuleEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[QuantityRule] = None
    typename__: Optional[Literal["QuantityRuleEdge"]] = Field("QuantityRuleEdge", alias="__typename")


class QuantityRuleUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[QuantityRuleUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["QuantityRuleUserError"]] = Field("QuantityRuleUserError", alias="__typename")


class QuantityRulesAddPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    quantity_rules: Optional[list[QuantityRule]] = Field(default_factory=list, alias="quantityRules")
    user_errors: list[QuantityRuleUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["QuantityRulesAddPayload"]] = Field("QuantityRulesAddPayload", alias="__typename")


class QuantityRulesDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_quantity_rules_variant_ids: Optional[list[ID]] = Field(
        default_factory=list, alias="deletedQuantityRulesVariantIds"
    )
    user_errors: list[QuantityRuleUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["QuantityRulesDeletePayload"]] = Field(
        "QuantityRulesDeletePayload", alias="__typename"
    )


class QueryRoot(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    abandonment: Optional[Abandonment] = None
    abandonment_by_abandoned_checkout_id: Optional[Abandonment] = Field(None, alias="abandonmentByAbandonedCheckoutId")
    app: Optional[App] = None
    app_by_handle: Optional[App] = Field(None, alias="appByHandle")
    app_by_key: Optional[App] = Field(None, alias="appByKey")
    app_discount_type: Optional[AppDiscountType] = Field(None, alias="appDiscountType")
    app_discount_types: list[AppDiscountType] = Field(default_factory=list, alias="appDiscountTypes")
    app_installation: Optional[AppInstallation] = Field(None, alias="appInstallation")
    app_installations: Optional[AppInstallationConnection] = Field(None, alias="appInstallations")
    assigned_fulfillment_orders: Optional[FulfillmentOrderConnection] = Field(None, alias="assignedFulfillmentOrders")
    automatic_discount: Optional[DiscountAutomatic] = Field(None, alias="automaticDiscount")
    automatic_discount_node: Optional[DiscountAutomaticNode] = Field(None, alias="automaticDiscountNode")
    automatic_discount_nodes: Optional[DiscountAutomaticNodeConnection] = Field(None, alias="automaticDiscountNodes")
    automatic_discount_saved_searches: Optional[SavedSearchConnection] = Field(
        None, alias="automaticDiscountSavedSearches"
    )
    automatic_discounts: Optional[DiscountAutomaticConnection] = Field(None, alias="automaticDiscounts")
    available_carrier_services: list[DeliveryCarrierServiceAndLocations] = Field(
        default_factory=list, alias="availableCarrierServices"
    )
    available_locales: list[Locale] = Field(default_factory=list, alias="availableLocales")
    carrier_service: Optional[DeliveryCarrierService] = Field(None, alias="carrierService")
    carrier_services: Optional[DeliveryCarrierServiceConnection] = Field(None, alias="carrierServices")
    cart_transforms: Optional[CartTransformConnection] = Field(None, alias="cartTransforms")
    cash_tracking_session: Optional[CashTrackingSession] = Field(None, alias="cashTrackingSession")
    cash_tracking_sessions: Optional[CashTrackingSessionConnection] = Field(None, alias="cashTrackingSessions")
    catalog: Optional[Catalog] = None
    catalog_operations: list[ResourceOperation] = Field(default_factory=list, alias="catalogOperations")
    catalogs: Optional[CatalogConnection] = None
    catalogs_count: Optional[Count] = Field(None, alias="catalogsCount")
    channel: Optional[Channel] = None
    channels: Optional[ChannelConnection] = None
    checkout_branding: Optional[CheckoutBranding] = Field(None, alias="checkoutBranding")
    checkout_profile: Optional[CheckoutProfile] = Field(None, alias="checkoutProfile")
    checkout_profiles: Optional[CheckoutProfileConnection] = Field(None, alias="checkoutProfiles")
    code_discount_node: Optional[DiscountCodeNode] = Field(None, alias="codeDiscountNode")
    code_discount_node_by_code: Optional[DiscountCodeNode] = Field(None, alias="codeDiscountNodeByCode")
    code_discount_nodes: Optional[DiscountCodeNodeConnection] = Field(None, alias="codeDiscountNodes")
    code_discount_saved_searches: Optional[SavedSearchConnection] = Field(None, alias="codeDiscountSavedSearches")
    collection: Optional[Collection] = None
    collection_by_handle: Optional[Collection] = Field(None, alias="collectionByHandle")
    collection_rules_conditions: list[CollectionRuleConditions] = Field(
        default_factory=list, alias="collectionRulesConditions"
    )
    collection_saved_searches: Optional[SavedSearchConnection] = Field(None, alias="collectionSavedSearches")
    collections: Optional[CollectionConnection] = None
    companies: Optional[CompanyConnection] = None
    companies_count: Optional[Count] = Field(None, alias="companiesCount")
    company: Optional[Company] = None
    company_contact: Optional[CompanyContact] = Field(None, alias="companyContact")
    company_contact_role: Optional[CompanyContactRole] = Field(None, alias="companyContactRole")
    company_location: Optional[CompanyLocation] = Field(None, alias="companyLocation")
    company_locations: Optional[CompanyLocationConnection] = Field(None, alias="companyLocations")
    current_app_installation: Optional[AppInstallation] = Field(None, alias="currentAppInstallation")
    current_bulk_operation: Optional[BulkOperation] = Field(None, alias="currentBulkOperation")
    customer: Optional[Customer] = None
    customer_merge_job_status: Optional[CustomerMergeRequest] = Field(None, alias="customerMergeJobStatus")
    customer_merge_preview: Optional[CustomerMergePreview] = Field(None, alias="customerMergePreview")
    customer_payment_method: Optional[CustomerPaymentMethod] = Field(None, alias="customerPaymentMethod")
    customer_segment_members: Optional[CustomerSegmentMemberConnection] = Field(None, alias="customerSegmentMembers")
    customer_segment_members_query: Optional[CustomerSegmentMembersQuery] = Field(
        None, alias="customerSegmentMembersQuery"
    )
    customer_segment_membership: Optional[SegmentMembershipResponse] = Field(None, alias="customerSegmentMembership")
    customers: Optional[CustomerConnection] = None
    customers_count: Optional[Count] = Field(None, alias="customersCount")
    deletion_events: Optional[DeletionEventConnection] = Field(None, alias="deletionEvents")
    delivery_customization: Optional[DeliveryCustomization] = Field(None, alias="deliveryCustomization")
    delivery_customizations: Optional[DeliveryCustomizationConnection] = Field(None, alias="deliveryCustomizations")
    delivery_profile: Optional[DeliveryProfile] = Field(None, alias="deliveryProfile")
    delivery_profiles: Optional[DeliveryProfileConnection] = Field(None, alias="deliveryProfiles")
    delivery_promise_provider: Optional[DeliveryPromiseProvider] = Field(None, alias="deliveryPromiseProvider")
    delivery_settings: Optional[DeliverySetting] = Field(None, alias="deliverySettings")
    discount_codes_count: Optional[Count] = Field(None, alias="discountCodesCount")
    discount_node: Optional[DiscountNode] = Field(None, alias="discountNode")
    discount_nodes: Optional[DiscountNodeConnection] = Field(None, alias="discountNodes")
    discount_redeem_code_bulk_creation: Optional[DiscountRedeemCodeBulkCreation] = Field(
        None, alias="discountRedeemCodeBulkCreation"
    )
    discount_redeem_code_saved_searches: Optional[SavedSearchConnection] = Field(
        None, alias="discountRedeemCodeSavedSearches"
    )
    dispute: Optional[ShopifyPaymentsDispute] = None
    dispute_evidence: Optional[ShopifyPaymentsDisputeEvidence] = Field(None, alias="disputeEvidence")
    domain: Optional[Domain] = None
    draft_order: Optional[DraftOrder] = Field(None, alias="draftOrder")
    draft_order_saved_searches: Optional[SavedSearchConnection] = Field(None, alias="draftOrderSavedSearches")
    draft_order_tag: Optional[DraftOrderTag] = Field(None, alias="draftOrderTag")
    draft_orders: Optional[DraftOrderConnection] = Field(None, alias="draftOrders")
    file_saved_searches: Optional[SavedSearchConnection] = Field(None, alias="fileSavedSearches")
    files: Optional[FileConnection] = None
    fulfillment: Optional[Fulfillment] = None
    fulfillment_constraint_rules: list[FulfillmentConstraintRule] = Field(
        default_factory=list, alias="fulfillmentConstraintRules"
    )
    fulfillment_order: Optional[FulfillmentOrder] = Field(None, alias="fulfillmentOrder")
    fulfillment_orders: Optional[FulfillmentOrderConnection] = Field(None, alias="fulfillmentOrders")
    fulfillment_service: Optional[FulfillmentService] = Field(None, alias="fulfillmentService")
    gift_card: Optional[GiftCard] = Field(None, alias="giftCard")
    gift_cards: Optional[GiftCardConnection] = Field(None, alias="giftCards")
    gift_cards_count: Optional[Count] = Field(None, alias="giftCardsCount")
    inventory_item: Optional[InventoryItem] = Field(None, alias="inventoryItem")
    inventory_items: Optional[InventoryItemConnection] = Field(None, alias="inventoryItems")
    inventory_level: Optional[InventoryLevel] = Field(None, alias="inventoryLevel")
    inventory_properties: Optional[InventoryProperties] = Field(None, alias="inventoryProperties")
    job: Optional[Job] = None
    location: Optional[Location] = None
    locations: Optional[LocationConnection] = None
    locations_available_for_delivery_profiles: Optional[list[Location]] = Field(
        default_factory=list, alias="locationsAvailableForDeliveryProfiles"
    )
    locations_available_for_delivery_profiles_connection: Optional[LocationConnection] = Field(
        None, alias="locationsAvailableForDeliveryProfilesConnection"
    )
    locations_count: Optional[Count] = Field(None, alias="locationsCount")
    manual_holds_fulfillment_orders: Optional[FulfillmentOrderConnection] = Field(
        None, alias="manualHoldsFulfillmentOrders"
    )
    market: Optional[Market] = None
    market_by_geography: Optional[Market] = Field(None, alias="marketByGeography")
    market_localizable_resource: Optional[MarketLocalizableResource] = Field(None, alias="marketLocalizableResource")
    market_localizable_resources: Optional[MarketLocalizableResourceConnection] = Field(
        None, alias="marketLocalizableResources"
    )
    market_localizable_resources_by_ids: Optional[MarketLocalizableResourceConnection] = Field(
        None, alias="marketLocalizableResourcesByIds"
    )
    marketing_activities: Optional[MarketingActivityConnection] = Field(None, alias="marketingActivities")
    marketing_activity: Optional[MarketingActivity] = Field(None, alias="marketingActivity")
    marketing_event: Optional[MarketingEvent] = Field(None, alias="marketingEvent")
    marketing_events: Optional[MarketingEventConnection] = Field(None, alias="marketingEvents")
    markets: Optional[MarketConnection] = None
    menu: Optional[Menu] = None
    menus: Optional[MenuConnection] = None
    metafield_definition: Optional[MetafieldDefinition] = Field(None, alias="metafieldDefinition")
    metafield_definition_types: list[MetafieldDefinitionType] = Field(
        default_factory=list, alias="metafieldDefinitionTypes"
    )
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafield_storefront_visibilities: Optional[MetafieldStorefrontVisibilityConnection] = Field(
        None, alias="metafieldStorefrontVisibilities"
    )
    metafield_storefront_visibility: Optional[MetafieldStorefrontVisibility] = Field(
        None, alias="metafieldStorefrontVisibility"
    )
    metaobject: Optional[Metaobject] = None
    metaobject_by_handle: Optional[Metaobject] = Field(None, alias="metaobjectByHandle")
    metaobject_definition: Optional[MetaobjectDefinition] = Field(None, alias="metaobjectDefinition")
    metaobject_definition_by_type: Optional[MetaobjectDefinition] = Field(None, alias="metaobjectDefinitionByType")
    metaobject_definitions: Optional[MetaobjectDefinitionConnection] = Field(None, alias="metaobjectDefinitions")
    metaobjects: Optional[MetaobjectConnection] = None
    mobile_platform_application: Optional[MobilePlatformApplication] = Field(None, alias="mobilePlatformApplication")
    mobile_platform_applications: Optional[MobilePlatformApplicationConnection] = Field(
        None, alias="mobilePlatformApplications"
    )
    node: Optional[Node] = None
    nodes: list[Optional[Node]] = Field(default_factory=list)
    online_store: Optional[OnlineStore] = Field(None, alias="onlineStore")
    order: Optional[Order] = None
    order_payment_status: Optional[OrderPaymentStatus] = Field(None, alias="orderPaymentStatus")
    order_saved_searches: Optional[SavedSearchConnection] = Field(None, alias="orderSavedSearches")
    orders: Optional[OrderConnection] = None
    orders_count: Optional[Count] = Field(None, alias="ordersCount")
    payment_customization: Optional[PaymentCustomization] = Field(None, alias="paymentCustomization")
    payment_customizations: Optional[PaymentCustomizationConnection] = Field(None, alias="paymentCustomizations")
    payment_terms_templates: list[PaymentTermsTemplate] = Field(default_factory=list, alias="paymentTermsTemplates")
    pending_orders_count: Optional[Count] = Field(None, alias="pendingOrdersCount")
    price_list: Optional[PriceList] = Field(None, alias="priceList")
    price_lists: Optional[PriceListConnection] = Field(None, alias="priceLists")
    price_rule: Optional[PriceRule] = Field(None, alias="priceRule")
    price_rule_saved_searches: Optional[SavedSearchConnection] = Field(None, alias="priceRuleSavedSearches")
    price_rules: Optional[PriceRuleConnection] = Field(None, alias="priceRules")
    primary_market: Optional[Market] = Field(None, alias="primaryMarket")
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    product: Optional[Product] = None
    product_by_handle: Optional[Product] = Field(None, alias="productByHandle")
    product_duplicate_job: Optional[ProductDuplicateJob] = Field(None, alias="productDuplicateJob")
    product_feed: Optional[ProductFeed] = Field(None, alias="productFeed")
    product_feeds: Optional[ProductFeedConnection] = Field(None, alias="productFeeds")
    product_operation: Optional[ProductOperation] = Field(None, alias="productOperation")
    product_resource_feedback: Optional[ProductResourceFeedback] = Field(None, alias="productResourceFeedback")
    product_saved_searches: Optional[SavedSearchConnection] = Field(None, alias="productSavedSearches")
    product_variant: Optional[ProductVariant] = Field(None, alias="productVariant")
    product_variants: Optional[ProductVariantConnection] = Field(None, alias="productVariants")
    products: Optional[ProductConnection] = None
    products_count: Optional[Count] = Field(None, alias="productsCount")
    public_api_versions: list[ApiVersion] = Field(default_factory=list, alias="publicApiVersions")
    publication: Optional[Publication] = None
    publications: Optional[PublicationConnection] = None
    publications_count: Optional[Count] = Field(None, alias="publicationsCount")
    published_products_count: Optional[Count] = Field(None, alias="publishedProductsCount")
    refund: Optional[Refund] = None
    return_: Optional[Return] = Field(None, alias="return")
    return_calculate: Optional[CalculatedReturn] = Field(None, alias="returnCalculate")
    returnable_fulfillment: Optional[ReturnableFulfillment] = Field(None, alias="returnableFulfillment")
    returnable_fulfillments: Optional[ReturnableFulfillmentConnection] = Field(None, alias="returnableFulfillments")
    reverse_delivery: Optional[ReverseDelivery] = Field(None, alias="reverseDelivery")
    reverse_fulfillment_order: Optional[ReverseFulfillmentOrder] = Field(None, alias="reverseFulfillmentOrder")
    script_tag: Optional[ScriptTag] = Field(None, alias="scriptTag")
    script_tags: Optional[ScriptTagConnection] = Field(None, alias="scriptTags")
    segment: Optional[Segment] = None
    segment_filter_suggestions: Optional[SegmentFilterConnection] = Field(None, alias="segmentFilterSuggestions")
    segment_filters: Optional[SegmentFilterConnection] = Field(None, alias="segmentFilters")
    segment_migrations: Optional[SegmentMigrationConnection] = Field(None, alias="segmentMigrations")
    segment_value_suggestions: Optional[SegmentValueConnection] = Field(None, alias="segmentValueSuggestions")
    segments: Optional[SegmentConnection] = None
    segments_count: Optional[Count] = Field(None, alias="segmentsCount")
    selling_plan_group: Optional[SellingPlanGroup] = Field(None, alias="sellingPlanGroup")
    selling_plan_groups: Optional[SellingPlanGroupConnection] = Field(None, alias="sellingPlanGroups")
    server_pixel: Optional[ServerPixel] = Field(None, alias="serverPixel")
    shop: Optional[Shop] = None
    shop_billing_preferences: Optional[ShopBillingPreferences] = Field(None, alias="shopBillingPreferences")
    shop_locales: list[ShopLocale] = Field(default_factory=list, alias="shopLocales")
    shopify_function: Optional[ShopifyFunction] = Field(None, alias="shopifyFunction")
    shopify_functions: Optional[ShopifyFunctionConnection] = Field(None, alias="shopifyFunctions")
    shopify_payments_account: Optional[ShopifyPaymentsAccount] = Field(None, alias="shopifyPaymentsAccount")
    staff_member: Optional[StaffMember] = Field(None, alias="staffMember")
    standard_metafield_definition_templates: Optional[StandardMetafieldDefinitionTemplateConnection] = Field(
        None, alias="standardMetafieldDefinitionTemplates"
    )
    store_credit_account: Optional[StoreCreditAccount] = Field(None, alias="storeCreditAccount")
    subscription_billing_attempt: Optional[SubscriptionBillingAttempt] = Field(None, alias="subscriptionBillingAttempt")
    subscription_billing_attempts: Optional[SubscriptionBillingAttemptConnection] = Field(
        None, alias="subscriptionBillingAttempts"
    )
    subscription_billing_cycle: Optional[SubscriptionBillingCycle] = Field(None, alias="subscriptionBillingCycle")
    subscription_billing_cycle_bulk_results: Optional[SubscriptionBillingCycleConnection] = Field(
        None, alias="subscriptionBillingCycleBulkResults"
    )
    subscription_billing_cycles: Optional[SubscriptionBillingCycleConnection] = Field(
        None, alias="subscriptionBillingCycles"
    )
    subscription_contract: Optional[SubscriptionContract] = Field(None, alias="subscriptionContract")
    subscription_contracts: Optional[SubscriptionContractConnection] = Field(None, alias="subscriptionContracts")
    subscription_draft: Optional[SubscriptionDraft] = Field(None, alias="subscriptionDraft")
    taxonomy: Optional[Taxonomy] = None
    tender_transactions: Optional[TenderTransactionConnection] = Field(None, alias="tenderTransactions")
    translatable_resource: Optional[TranslatableResource] = Field(None, alias="translatableResource")
    translatable_resources: Optional[TranslatableResourceConnection] = Field(None, alias="translatableResources")
    translatable_resources_by_ids: Optional[TranslatableResourceConnection] = Field(
        None, alias="translatableResourcesByIds"
    )
    url_redirect: Optional[UrlRedirect] = Field(None, alias="urlRedirect")
    url_redirect_import: Optional[UrlRedirectImport] = Field(None, alias="urlRedirectImport")
    url_redirect_saved_searches: Optional[SavedSearchConnection] = Field(None, alias="urlRedirectSavedSearches")
    url_redirects: Optional[UrlRedirectConnection] = Field(None, alias="urlRedirects")
    validation: Optional[Validation] = None
    validations: Optional[ValidationConnection] = None
    web_pixel: Optional[WebPixel] = Field(None, alias="webPixel")
    webhook_subscription: Optional[WebhookSubscription] = Field(None, alias="webhookSubscription")
    webhook_subscriptions: Optional[WebhookSubscriptionConnection] = Field(None, alias="webhookSubscriptions")
    webhook_subscriptions_count: Optional[Count] = Field(None, alias="webhookSubscriptionsCount")
    typename__: Optional[Literal["QueryRoot"]] = Field("QueryRoot", alias="__typename")


class Refund(LegacyInteroperability, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    duties: Optional[list[RefundDuty]] = Field(default_factory=list)
    id: Optional[ID] = None
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    note: Optional[String] = None
    order: Optional[Order] = None
    refund_line_items: Optional[RefundLineItemConnection] = Field(None, alias="refundLineItems")
    refund_shipping_lines: Optional[RefundShippingLineConnection] = Field(None, alias="refundShippingLines")
    return_: Optional[Return] = Field(None, alias="return")
    staff_member: Optional[StaffMember] = Field(None, alias="staffMember")
    total_refunded: Optional[MoneyV2] = Field(None, alias="totalRefunded")
    total_refunded_set: Optional[MoneyBag] = Field(None, alias="totalRefundedSet")
    transactions: Optional[OrderTransactionConnection] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["Refund"]] = Field("Refund", alias="__typename")


class RefundAgreement(SalesAgreement):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    happened_at: Optional[DateTime] = Field(None, alias="happenedAt")
    id: Optional[ID] = None
    reason: Optional[OrderActionType] = None
    refund: Optional[Refund] = None
    sales: Optional[SaleConnection] = None
    user: Optional[StaffMember] = None
    typename__: Optional[Literal["RefundAgreement"]] = Field("RefundAgreement", alias="__typename")


class RefundConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[RefundEdge] = Field(default_factory=list)
    nodes: list[Refund] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["RefundConnection"]] = Field("RefundConnection", alias="__typename")


class RefundCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    order: Optional[Order] = None
    refund: Optional[Refund] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["RefundCreatePayload"]] = Field("RefundCreatePayload", alias="__typename")


class RefundDuty(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount_set: Optional[MoneyBag] = Field(None, alias="amountSet")
    original_duty: Optional[Duty] = Field(None, alias="originalDuty")
    typename__: Optional[Literal["RefundDuty"]] = Field("RefundDuty", alias="__typename")


class RefundEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Refund] = None
    typename__: Optional[Literal["RefundEdge"]] = Field("RefundEdge", alias="__typename")


class RefundLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    line_item: Optional[LineItem] = Field(None, alias="lineItem")
    location: Optional[Location] = None
    price: Optional[Money] = None
    price_set: Optional[MoneyBag] = Field(None, alias="priceSet")
    quantity: Optional[Int] = None
    restock_type: Optional[RefundLineItemRestockType] = Field(None, alias="restockType")
    restocked: Optional[Boolean] = None
    subtotal: Optional[Money] = None
    subtotal_set: Optional[MoneyBag] = Field(None, alias="subtotalSet")
    total_tax: Optional[Money] = Field(None, alias="totalTax")
    total_tax_set: Optional[MoneyBag] = Field(None, alias="totalTaxSet")
    typename__: Optional[Literal["RefundLineItem"]] = Field("RefundLineItem", alias="__typename")


class RefundLineItemConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[RefundLineItemEdge] = Field(default_factory=list)
    nodes: list[RefundLineItem] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["RefundLineItemConnection"]] = Field("RefundLineItemConnection", alias="__typename")


class RefundLineItemEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[RefundLineItem] = None
    typename__: Optional[Literal["RefundLineItemEdge"]] = Field("RefundLineItemEdge", alias="__typename")


class RefundShippingLine(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    shipping_line: Optional[ShippingLine] = Field(None, alias="shippingLine")
    typename__: Optional[Literal["RefundShippingLine"]] = Field("RefundShippingLine", alias="__typename")


class RefundShippingLineConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[RefundShippingLineEdge] = Field(default_factory=list)
    nodes: list[RefundShippingLine] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["RefundShippingLineConnection"]] = Field(
        "RefundShippingLineConnection", alias="__typename"
    )


class RefundShippingLineEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[RefundShippingLine] = None
    typename__: Optional[Literal["RefundShippingLineEdge"]] = Field("RefundShippingLineEdge", alias="__typename")


class ResourceAlert(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    actions: list[ResourceAlertAction] = Field(default_factory=list)
    content: Optional[HTML] = None
    dismissible_handle: Optional[String] = Field(None, alias="dismissibleHandle")
    icon: Optional[ResourceAlertIcon] = None
    severity: Optional[ResourceAlertSeverity] = None
    title: Optional[String] = None
    typename__: Optional[Literal["ResourceAlert"]] = Field("ResourceAlert", alias="__typename")


class ResourceAlertAction(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    primary: Optional[Boolean] = None
    show: Optional[String] = None
    title: Optional[String] = None
    url: Optional[URL] = None
    typename__: Optional[Literal["ResourceAlertAction"]] = Field("ResourceAlertAction", alias="__typename")


class ResourceFeedback(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_feedback: list[AppFeedback] = Field(default_factory=list, alias="appFeedback")
    details: list[AppFeedback] = Field(default_factory=list)
    summary: Optional[String] = None
    typename__: Optional[Literal["ResourceFeedback"]] = Field("ResourceFeedback", alias="__typename")


class ResourcePublication(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    channel: Optional[Channel] = None
    is_published: Optional[Boolean] = Field(None, alias="isPublished")
    publication: Optional[Publication] = None
    publish_date: Optional[DateTime] = Field(None, alias="publishDate")
    publishable: Optional[Publishable] = None
    typename__: Optional[Literal["ResourcePublication"]] = Field("ResourcePublication", alias="__typename")


class ResourcePublicationConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ResourcePublicationEdge] = Field(default_factory=list)
    nodes: list[ResourcePublication] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ResourcePublicationConnection"]] = Field(
        "ResourcePublicationConnection", alias="__typename"
    )


class ResourcePublicationEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ResourcePublication] = None
    typename__: Optional[Literal["ResourcePublicationEdge"]] = Field("ResourcePublicationEdge", alias="__typename")


class ResourcePublicationV2(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    is_published: Optional[Boolean] = Field(None, alias="isPublished")
    publication: Optional[Publication] = None
    publish_date: Optional[DateTime] = Field(None, alias="publishDate")
    publishable: Optional[Publishable] = None
    typename__: Optional[Literal["ResourcePublicationV2"]] = Field("ResourcePublicationV2", alias="__typename")


class ResourcePublicationV2Connection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ResourcePublicationV2Edge] = Field(default_factory=list)
    nodes: list[ResourcePublicationV2] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ResourcePublicationV2Connection"]] = Field(
        "ResourcePublicationV2Connection", alias="__typename"
    )


class ResourcePublicationV2Edge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ResourcePublicationV2] = None
    typename__: Optional[Literal["ResourcePublicationV2Edge"]] = Field("ResourcePublicationV2Edge", alias="__typename")


class RestockingFee(Fee):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount_set: Optional[MoneyBag] = Field(None, alias="amountSet")
    id: Optional[ID] = None
    percentage: Optional[Float] = None
    typename__: Optional[Literal["RestockingFee"]] = Field("RestockingFee", alias="__typename")


class RestrictedForResource(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    restricted: Optional[Boolean] = None
    restricted_reason: Optional[String] = Field(None, alias="restrictedReason")
    typename__: Optional[Literal["RestrictedForResource"]] = Field("RestrictedForResource", alias="__typename")


class Return(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    decline: Optional[ReturnDecline] = None
    exchange_line_items: Optional[ExchangeLineItemConnection] = Field(None, alias="exchangeLineItems")
    id: Optional[ID] = None
    name: Optional[String] = None
    order: Optional[Order] = None
    refunds: Optional[RefundConnection] = None
    return_line_items: Optional[ReturnLineItemTypeConnection] = Field(None, alias="returnLineItems")
    return_shipping_fees: list[ReturnShippingFee] = Field(default_factory=list, alias="returnShippingFees")
    reverse_fulfillment_orders: Optional[ReverseFulfillmentOrderConnection] = Field(
        None, alias="reverseFulfillmentOrders"
    )
    status: Optional[ReturnStatus] = None
    suggested_refund: Optional[SuggestedReturnRefund] = Field(None, alias="suggestedRefund")
    total_quantity: Optional[Int] = Field(None, alias="totalQuantity")
    typename__: Optional[Literal["Return"]] = Field("Return", alias="__typename")


class ReturnAgreement(SalesAgreement):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    happened_at: Optional[DateTime] = Field(None, alias="happenedAt")
    id: Optional[ID] = None
    reason: Optional[OrderActionType] = None
    return_: Optional[Return] = Field(None, alias="return")
    sales: Optional[SaleConnection] = None
    user: Optional[StaffMember] = None
    typename__: Optional[Literal["ReturnAgreement"]] = Field("ReturnAgreement", alias="__typename")


class ReturnApproveRequestPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    return_: Optional[Return] = Field(None, alias="return")
    user_errors: list[ReturnUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ReturnApproveRequestPayload"]] = Field(
        "ReturnApproveRequestPayload", alias="__typename"
    )


class ReturnCancelPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    return_: Optional[Return] = Field(None, alias="return")
    user_errors: list[ReturnUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ReturnCancelPayload"]] = Field("ReturnCancelPayload", alias="__typename")


class ReturnClosePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    return_: Optional[Return] = Field(None, alias="return")
    user_errors: list[ReturnUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ReturnClosePayload"]] = Field("ReturnClosePayload", alias="__typename")


class ReturnConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ReturnEdge] = Field(default_factory=list)
    nodes: list[Return] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ReturnConnection"]] = Field("ReturnConnection", alias="__typename")


class ReturnCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    return_: Optional[Return] = Field(None, alias="return")
    user_errors: list[ReturnUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ReturnCreatePayload"]] = Field("ReturnCreatePayload", alias="__typename")


class ReturnDecline(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    note: Optional[String] = None
    reason: Optional[ReturnDeclineReason] = None
    typename__: Optional[Literal["ReturnDecline"]] = Field("ReturnDecline", alias="__typename")


class ReturnDeclineRequestPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    return_: Optional[Return] = Field(None, alias="return")
    user_errors: list[ReturnUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ReturnDeclineRequestPayload"]] = Field(
        "ReturnDeclineRequestPayload", alias="__typename"
    )


class ReturnEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Return] = None
    typename__: Optional[Literal["ReturnEdge"]] = Field("ReturnEdge", alias="__typename")


class ReturnLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_note: Optional[String] = Field(None, alias="customerNote")
    fulfillment_line_item: Optional[FulfillmentLineItem] = Field(None, alias="fulfillmentLineItem")
    id: Optional[ID] = None
    quantity: Optional[Int] = None
    refundable_quantity: Optional[Int] = Field(None, alias="refundableQuantity")
    refunded_quantity: Optional[Int] = Field(None, alias="refundedQuantity")
    restocking_fee: Optional[RestockingFee] = Field(None, alias="restockingFee")
    return_reason: Optional[ReturnReason] = Field(None, alias="returnReason")
    return_reason_note: Optional[String] = Field(None, alias="returnReasonNote")
    total_weight: Optional[Weight] = Field(None, alias="totalWeight")
    with_code_discounted_total_price_set: Optional[MoneyBag] = Field(None, alias="withCodeDiscountedTotalPriceSet")
    typename__: Optional[Literal["ReturnLineItem"]] = Field("ReturnLineItem", alias="__typename")


class ReturnLineItemRemoveFromReturnPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    return_: Optional[Return] = Field(None, alias="return")
    user_errors: list[ReturnUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ReturnLineItemRemoveFromReturnPayload"]] = Field(
        "ReturnLineItemRemoveFromReturnPayload", alias="__typename"
    )


class ReturnLineItemTypeConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ReturnLineItemTypeEdge] = Field(default_factory=list)
    nodes: list[ReturnLineItemType] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ReturnLineItemTypeConnection"]] = Field(
        "ReturnLineItemTypeConnection", alias="__typename"
    )


class ReturnLineItemTypeEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ReturnLineItemType] = None
    typename__: Optional[Literal["ReturnLineItemTypeEdge"]] = Field("ReturnLineItemTypeEdge", alias="__typename")


class ReturnRefundPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    refund: Optional[Refund] = None
    user_errors: list[ReturnUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ReturnRefundPayload"]] = Field("ReturnRefundPayload", alias="__typename")


class ReturnReopenPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    return_: Optional[Return] = Field(None, alias="return")
    user_errors: list[ReturnUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ReturnReopenPayload"]] = Field("ReturnReopenPayload", alias="__typename")


class ReturnRequestPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    return_: Optional[Return] = Field(None, alias="return")
    user_errors: list[ReturnUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ReturnRequestPayload"]] = Field("ReturnRequestPayload", alias="__typename")


class ReturnShippingFee(Fee):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount_set: Optional[MoneyBag] = Field(None, alias="amountSet")
    id: Optional[ID] = None
    typename__: Optional[Literal["ReturnShippingFee"]] = Field("ReturnShippingFee", alias="__typename")


class ReturnUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ReturnErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ReturnUserError"]] = Field("ReturnUserError", alias="__typename")


class ReturnableFulfillment(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment: Optional[Fulfillment] = None
    id: Optional[ID] = None
    returnable_fulfillment_line_items: Optional[ReturnableFulfillmentLineItemConnection] = Field(
        None, alias="returnableFulfillmentLineItems"
    )
    typename__: Optional[Literal["ReturnableFulfillment"]] = Field("ReturnableFulfillment", alias="__typename")


class ReturnableFulfillmentConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ReturnableFulfillmentEdge] = Field(default_factory=list)
    nodes: list[ReturnableFulfillment] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ReturnableFulfillmentConnection"]] = Field(
        "ReturnableFulfillmentConnection", alias="__typename"
    )


class ReturnableFulfillmentEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ReturnableFulfillment] = None
    typename__: Optional[Literal["ReturnableFulfillmentEdge"]] = Field("ReturnableFulfillmentEdge", alias="__typename")


class ReturnableFulfillmentLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_line_item: Optional[FulfillmentLineItem] = Field(None, alias="fulfillmentLineItem")
    quantity: Optional[Int] = None
    typename__: Optional[Literal["ReturnableFulfillmentLineItem"]] = Field(
        "ReturnableFulfillmentLineItem", alias="__typename"
    )


class ReturnableFulfillmentLineItemConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ReturnableFulfillmentLineItemEdge] = Field(default_factory=list)
    nodes: list[ReturnableFulfillmentLineItem] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ReturnableFulfillmentLineItemConnection"]] = Field(
        "ReturnableFulfillmentLineItemConnection", alias="__typename"
    )


class ReturnableFulfillmentLineItemEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ReturnableFulfillmentLineItem] = None
    typename__: Optional[Literal["ReturnableFulfillmentLineItemEdge"]] = Field(
        "ReturnableFulfillmentLineItemEdge", alias="__typename"
    )


class ReverseDelivery(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deliverable: Optional[ReverseDeliveryDeliverable] = None
    id: Optional[ID] = None
    reverse_delivery_line_items: Optional[ReverseDeliveryLineItemConnection] = Field(
        None, alias="reverseDeliveryLineItems"
    )
    reverse_fulfillment_order: Optional[ReverseFulfillmentOrder] = Field(None, alias="reverseFulfillmentOrder")
    typename__: Optional[Literal["ReverseDelivery"]] = Field("ReverseDelivery", alias="__typename")


class ReverseDeliveryConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ReverseDeliveryEdge] = Field(default_factory=list)
    nodes: list[ReverseDelivery] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ReverseDeliveryConnection"]] = Field("ReverseDeliveryConnection", alias="__typename")


class ReverseDeliveryCreateWithShippingPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    reverse_delivery: Optional[ReverseDelivery] = Field(None, alias="reverseDelivery")
    user_errors: list[ReturnUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ReverseDeliveryCreateWithShippingPayload"]] = Field(
        "ReverseDeliveryCreateWithShippingPayload", alias="__typename"
    )


class ReverseDeliveryDisposePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    reverse_delivery_line_items: Optional[list[ReverseDeliveryLineItem]] = Field(
        default_factory=list, alias="reverseDeliveryLineItems"
    )
    user_errors: list[ReturnUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ReverseDeliveryDisposePayload"]] = Field(
        "ReverseDeliveryDisposePayload", alias="__typename"
    )


class ReverseDeliveryEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ReverseDelivery] = None
    typename__: Optional[Literal["ReverseDeliveryEdge"]] = Field("ReverseDeliveryEdge", alias="__typename")


class ReverseDeliveryLabelV2(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    public_file_url: Optional[URL] = Field(None, alias="publicFileUrl")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["ReverseDeliveryLabelV2"]] = Field("ReverseDeliveryLabelV2", alias="__typename")


class ReverseDeliveryLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    dispositions: list[ReverseFulfillmentOrderDisposition] = Field(default_factory=list)
    id: Optional[ID] = None
    quantity: Optional[Int] = None
    reverse_fulfillment_order_line_item: Optional[ReverseFulfillmentOrderLineItem] = Field(
        None, alias="reverseFulfillmentOrderLineItem"
    )
    typename__: Optional[Literal["ReverseDeliveryLineItem"]] = Field("ReverseDeliveryLineItem", alias="__typename")


class ReverseDeliveryLineItemConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ReverseDeliveryLineItemEdge] = Field(default_factory=list)
    nodes: list[ReverseDeliveryLineItem] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ReverseDeliveryLineItemConnection"]] = Field(
        "ReverseDeliveryLineItemConnection", alias="__typename"
    )


class ReverseDeliveryLineItemEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ReverseDeliveryLineItem] = None
    typename__: Optional[Literal["ReverseDeliveryLineItemEdge"]] = Field(
        "ReverseDeliveryLineItemEdge", alias="__typename"
    )


class ReverseDeliveryShippingDeliverable(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    label: Optional[ReverseDeliveryLabelV2] = None
    tracking: Optional[ReverseDeliveryTrackingV2] = None
    typename__: Optional[Literal["ReverseDeliveryShippingDeliverable"]] = Field(
        "ReverseDeliveryShippingDeliverable", alias="__typename"
    )


class ReverseDeliveryShippingUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    reverse_delivery: Optional[ReverseDelivery] = Field(None, alias="reverseDelivery")
    user_errors: list[ReturnUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ReverseDeliveryShippingUpdatePayload"]] = Field(
        "ReverseDeliveryShippingUpdatePayload", alias="__typename"
    )


class ReverseDeliveryTrackingV2(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    carrier_name: Optional[String] = Field(None, alias="carrierName")
    number: Optional[String] = None
    url: Optional[URL] = None
    typename__: Optional[Literal["ReverseDeliveryTrackingV2"]] = Field("ReverseDeliveryTrackingV2", alias="__typename")


class ReverseFulfillmentOrder(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    line_items: Optional[ReverseFulfillmentOrderLineItemConnection] = Field(None, alias="lineItems")
    order: Optional[Order] = None
    reverse_deliveries: Optional[ReverseDeliveryConnection] = Field(None, alias="reverseDeliveries")
    status: Optional[ReverseFulfillmentOrderStatus] = None
    third_party_confirmation: Optional[ReverseFulfillmentOrderThirdPartyConfirmation] = Field(
        None, alias="thirdPartyConfirmation"
    )
    typename__: Optional[Literal["ReverseFulfillmentOrder"]] = Field("ReverseFulfillmentOrder", alias="__typename")


class ReverseFulfillmentOrderConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ReverseFulfillmentOrderEdge] = Field(default_factory=list)
    nodes: list[ReverseFulfillmentOrder] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ReverseFulfillmentOrderConnection"]] = Field(
        "ReverseFulfillmentOrderConnection", alias="__typename"
    )


class ReverseFulfillmentOrderDisposePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    reverse_fulfillment_order_line_items: Optional[list[ReverseFulfillmentOrderLineItem]] = Field(
        default_factory=list, alias="reverseFulfillmentOrderLineItems"
    )
    user_errors: list[ReturnUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ReverseFulfillmentOrderDisposePayload"]] = Field(
        "ReverseFulfillmentOrderDisposePayload", alias="__typename"
    )


class ReverseFulfillmentOrderDisposition(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    location: Optional[Location] = None
    quantity: Optional[Int] = None
    type: Optional[ReverseFulfillmentOrderDispositionType] = None
    typename__: Optional[Literal["ReverseFulfillmentOrderDisposition"]] = Field(
        "ReverseFulfillmentOrderDisposition", alias="__typename"
    )


class ReverseFulfillmentOrderEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ReverseFulfillmentOrder] = None
    typename__: Optional[Literal["ReverseFulfillmentOrderEdge"]] = Field(
        "ReverseFulfillmentOrderEdge", alias="__typename"
    )


class ReverseFulfillmentOrderLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    dispositions: list[ReverseFulfillmentOrderDisposition] = Field(default_factory=list)
    fulfillment_line_item: Optional[FulfillmentLineItem] = Field(None, alias="fulfillmentLineItem")
    id: Optional[ID] = None
    total_quantity: Optional[Int] = Field(None, alias="totalQuantity")
    typename__: Optional[Literal["ReverseFulfillmentOrderLineItem"]] = Field(
        "ReverseFulfillmentOrderLineItem", alias="__typename"
    )


class ReverseFulfillmentOrderLineItemConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ReverseFulfillmentOrderLineItemEdge] = Field(default_factory=list)
    nodes: list[ReverseFulfillmentOrderLineItem] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ReverseFulfillmentOrderLineItemConnection"]] = Field(
        "ReverseFulfillmentOrderLineItemConnection", alias="__typename"
    )


class ReverseFulfillmentOrderLineItemEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ReverseFulfillmentOrderLineItem] = None
    typename__: Optional[Literal["ReverseFulfillmentOrderLineItemEdge"]] = Field(
        "ReverseFulfillmentOrderLineItemEdge", alias="__typename"
    )


class ReverseFulfillmentOrderThirdPartyConfirmation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    status: Optional[ReverseFulfillmentOrderThirdPartyConfirmationStatus] = None
    typename__: Optional[Literal["ReverseFulfillmentOrderThirdPartyConfirmation"]] = Field(
        "ReverseFulfillmentOrderThirdPartyConfirmation", alias="__typename"
    )


class RiskFact(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[String] = None
    sentiment: Optional[RiskFactSentiment] = None
    typename__: Optional[Literal["RiskFact"]] = Field("RiskFact", alias="__typename")


class RowCount(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    count: Optional[Int] = None
    exceeds_max: Optional[Boolean] = Field(None, alias="exceedsMax")
    typename__: Optional[Literal["RowCount"]] = Field("RowCount", alias="__typename")


class SEO(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[String] = None
    title: Optional[String] = None
    typename__: Optional[Literal["SEO"]] = Field("SEO", alias="__typename")


class SaleAdditionalFee(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    name: Optional[String] = None
    price: Optional[MoneyBag] = None
    tax_lines: list[TaxLine] = Field(default_factory=list, alias="taxLines")
    typename__: Optional[Literal["SaleAdditionalFee"]] = Field("SaleAdditionalFee", alias="__typename")


class SaleConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SaleEdge] = Field(default_factory=list)
    nodes: list[Sale] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["SaleConnection"]] = Field("SaleConnection", alias="__typename")


class SaleEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Sale] = None
    typename__: Optional[Literal["SaleEdge"]] = Field("SaleEdge", alias="__typename")


class SaleTax(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[MoneyBag] = None
    id: Optional[ID] = None
    tax_line: Optional[TaxLine] = Field(None, alias="taxLine")
    typename__: Optional[Literal["SaleTax"]] = Field("SaleTax", alias="__typename")


class SalesAgreementConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SalesAgreementEdge] = Field(default_factory=list)
    nodes: list[SalesAgreement] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["SalesAgreementConnection"]] = Field("SalesAgreementConnection", alias="__typename")


class SalesAgreementEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[SalesAgreement] = None
    typename__: Optional[Literal["SalesAgreementEdge"]] = Field("SalesAgreementEdge", alias="__typename")


class SavedSearch(LegacyInteroperability, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    filters: list[SearchFilter] = Field(default_factory=list)
    id: Optional[ID] = None
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    name: Optional[String] = None
    query: Optional[String] = None
    resource_type: Optional[SearchResultType] = Field(None, alias="resourceType")
    search_terms: Optional[String] = Field(None, alias="searchTerms")
    typename__: Optional[Literal["SavedSearch"]] = Field("SavedSearch", alias="__typename")


class SavedSearchConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SavedSearchEdge] = Field(default_factory=list)
    nodes: list[SavedSearch] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["SavedSearchConnection"]] = Field("SavedSearchConnection", alias="__typename")


class SavedSearchCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    saved_search: Optional[SavedSearch] = Field(None, alias="savedSearch")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SavedSearchCreatePayload"]] = Field("SavedSearchCreatePayload", alias="__typename")


class SavedSearchDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_saved_search_id: Optional[ID] = Field(None, alias="deletedSavedSearchId")
    shop: Optional[Shop] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SavedSearchDeletePayload"]] = Field("SavedSearchDeletePayload", alias="__typename")


class SavedSearchEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[SavedSearch] = None
    typename__: Optional[Literal["SavedSearchEdge"]] = Field("SavedSearchEdge", alias="__typename")


class SavedSearchUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    saved_search: Optional[SavedSearch] = Field(None, alias="savedSearch")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SavedSearchUpdatePayload"]] = Field("SavedSearchUpdatePayload", alias="__typename")


class ScriptDiscountApplication(DiscountApplication):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocation_method: Optional[DiscountApplicationAllocationMethod] = Field(None, alias="allocationMethod")
    description: Optional[String] = None
    index: Optional[Int] = None
    target_selection: Optional[DiscountApplicationTargetSelection] = Field(None, alias="targetSelection")
    target_type: Optional[DiscountApplicationTargetType] = Field(None, alias="targetType")
    title: Optional[String] = None
    value: Optional[PricingValue] = None
    typename__: Optional[Literal["ScriptDiscountApplication"]] = Field("ScriptDiscountApplication", alias="__typename")


class ScriptTag(LegacyInteroperability, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cache: Optional[Boolean] = None
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    display_scope: Optional[ScriptTagDisplayScope] = Field(None, alias="displayScope")
    id: Optional[ID] = None
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    src: Optional[URL] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["ScriptTag"]] = Field("ScriptTag", alias="__typename")


class ScriptTagConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ScriptTagEdge] = Field(default_factory=list)
    nodes: list[ScriptTag] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ScriptTagConnection"]] = Field("ScriptTagConnection", alias="__typename")


class ScriptTagCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    script_tag: Optional[ScriptTag] = Field(None, alias="scriptTag")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ScriptTagCreatePayload"]] = Field("ScriptTagCreatePayload", alias="__typename")


class ScriptTagDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_script_tag_id: Optional[ID] = Field(None, alias="deletedScriptTagId")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ScriptTagDeletePayload"]] = Field("ScriptTagDeletePayload", alias="__typename")


class ScriptTagEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ScriptTag] = None
    typename__: Optional[Literal["ScriptTagEdge"]] = Field("ScriptTagEdge", alias="__typename")


class ScriptTagUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    script_tag: Optional[ScriptTag] = Field(None, alias="scriptTag")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ScriptTagUpdatePayload"]] = Field("ScriptTagUpdatePayload", alias="__typename")


class SearchFilter(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["SearchFilter"]] = Field("SearchFilter", alias="__typename")


class SearchFilterOptions(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product_availability: list[FilterOption] = Field(default_factory=list, alias="productAvailability")
    typename__: Optional[Literal["SearchFilterOptions"]] = Field("SearchFilterOptions", alias="__typename")


class SearchResult(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[String] = None
    image: Optional[Image] = None
    reference: Optional[Node] = None
    title: Optional[String] = None
    url: Optional[URL] = None
    typename__: Optional[Literal["SearchResult"]] = Field("SearchResult", alias="__typename")


class SearchResultConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SearchResultEdge] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    results_after_count: Optional[Int] = Field(None, alias="resultsAfterCount")
    typename__: Optional[Literal["SearchResultConnection"]] = Field("SearchResultConnection", alias="__typename")


class SearchResultEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[SearchResult] = None
    typename__: Optional[Literal["SearchResultEdge"]] = Field("SearchResultEdge", alias="__typename")


class Segment(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    creation_date: Optional[DateTime] = Field(None, alias="creationDate")
    id: Optional[ID] = None
    last_edit_date: Optional[DateTime] = Field(None, alias="lastEditDate")
    name: Optional[String] = None
    query: Optional[String] = None
    typename__: Optional[Literal["Segment"]] = Field("Segment", alias="__typename")


class SegmentAssociationFilter(SegmentFilter):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    localized_name: Optional[String] = Field(None, alias="localizedName")
    multi_value: Optional[Boolean] = Field(None, alias="multiValue")
    query_name: Optional[String] = Field(None, alias="queryName")
    typename__: Optional[Literal["SegmentAssociationFilter"]] = Field("SegmentAssociationFilter", alias="__typename")


class SegmentAttributeStatistics(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    average: Optional[Float] = None
    sum: Optional[Float] = None
    typename__: Optional[Literal["SegmentAttributeStatistics"]] = Field(
        "SegmentAttributeStatistics", alias="__typename"
    )


class SegmentBooleanFilter(SegmentFilter):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    localized_name: Optional[String] = Field(None, alias="localizedName")
    multi_value: Optional[Boolean] = Field(None, alias="multiValue")
    query_name: Optional[String] = Field(None, alias="queryName")
    typename__: Optional[Literal["SegmentBooleanFilter"]] = Field("SegmentBooleanFilter", alias="__typename")


class SegmentConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SegmentEdge] = Field(default_factory=list)
    nodes: list[Segment] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["SegmentConnection"]] = Field("SegmentConnection", alias="__typename")


class SegmentCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    segment: Optional[Segment] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SegmentCreatePayload"]] = Field("SegmentCreatePayload", alias="__typename")


class SegmentDateFilter(SegmentFilter):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    localized_name: Optional[String] = Field(None, alias="localizedName")
    multi_value: Optional[Boolean] = Field(None, alias="multiValue")
    query_name: Optional[String] = Field(None, alias="queryName")
    typename__: Optional[Literal["SegmentDateFilter"]] = Field("SegmentDateFilter", alias="__typename")


class SegmentDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_segment_id: Optional[ID] = Field(None, alias="deletedSegmentId")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SegmentDeletePayload"]] = Field("SegmentDeletePayload", alias="__typename")


class SegmentEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Segment] = None
    typename__: Optional[Literal["SegmentEdge"]] = Field("SegmentEdge", alias="__typename")


class SegmentEnumFilter(SegmentFilter):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    localized_name: Optional[String] = Field(None, alias="localizedName")
    multi_value: Optional[Boolean] = Field(None, alias="multiValue")
    query_name: Optional[String] = Field(None, alias="queryName")
    typename__: Optional[Literal["SegmentEnumFilter"]] = Field("SegmentEnumFilter", alias="__typename")


class SegmentEventFilter(SegmentFilter):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    localized_name: Optional[String] = Field(None, alias="localizedName")
    multi_value: Optional[Boolean] = Field(None, alias="multiValue")
    parameters: list[SegmentEventFilterParameter] = Field(default_factory=list)
    query_name: Optional[String] = Field(None, alias="queryName")
    return_value_type: Optional[String] = Field(None, alias="returnValueType")
    typename__: Optional[Literal["SegmentEventFilter"]] = Field("SegmentEventFilter", alias="__typename")


class SegmentEventFilterParameter(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accepts_multiple_values: Optional[Boolean] = Field(None, alias="acceptsMultipleValues")
    localized_description: Optional[String] = Field(None, alias="localizedDescription")
    localized_name: Optional[String] = Field(None, alias="localizedName")
    optional: Optional[Boolean] = None
    parameter_type: Optional[String] = Field(None, alias="parameterType")
    query_name: Optional[String] = Field(None, alias="queryName")
    typename__: Optional[Literal["SegmentEventFilterParameter"]] = Field(
        "SegmentEventFilterParameter", alias="__typename"
    )


class SegmentFilterConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SegmentFilterEdge] = Field(default_factory=list)
    nodes: list[SegmentFilter] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["SegmentFilterConnection"]] = Field("SegmentFilterConnection", alias="__typename")


class SegmentFilterEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[SegmentFilter] = None
    typename__: Optional[Literal["SegmentFilterEdge"]] = Field("SegmentFilterEdge", alias="__typename")


class SegmentFloatFilter(SegmentFilter):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    localized_name: Optional[String] = Field(None, alias="localizedName")
    multi_value: Optional[Boolean] = Field(None, alias="multiValue")
    query_name: Optional[String] = Field(None, alias="queryName")
    typename__: Optional[Literal["SegmentFloatFilter"]] = Field("SegmentFloatFilter", alias="__typename")


class SegmentIntegerFilter(SegmentFilter):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    localized_name: Optional[String] = Field(None, alias="localizedName")
    multi_value: Optional[Boolean] = Field(None, alias="multiValue")
    query_name: Optional[String] = Field(None, alias="queryName")
    typename__: Optional[Literal["SegmentIntegerFilter"]] = Field("SegmentIntegerFilter", alias="__typename")


class SegmentMembership(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    is_member: Optional[Boolean] = Field(None, alias="isMember")
    segment_id: Optional[ID] = Field(None, alias="segmentId")
    typename__: Optional[Literal["SegmentMembership"]] = Field("SegmentMembership", alias="__typename")


class SegmentMembershipResponse(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    memberships: list[SegmentMembership] = Field(default_factory=list)
    typename__: Optional[Literal["SegmentMembershipResponse"]] = Field("SegmentMembershipResponse", alias="__typename")


class SegmentMigration(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    saved_search_id: Optional[ID] = Field(None, alias="savedSearchId")
    segment_id: Optional[ID] = Field(None, alias="segmentId")
    typename__: Optional[Literal["SegmentMigration"]] = Field("SegmentMigration", alias="__typename")


class SegmentMigrationConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SegmentMigrationEdge] = Field(default_factory=list)
    nodes: list[SegmentMigration] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["SegmentMigrationConnection"]] = Field(
        "SegmentMigrationConnection", alias="__typename"
    )


class SegmentMigrationEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[SegmentMigration] = None
    typename__: Optional[Literal["SegmentMigrationEdge"]] = Field("SegmentMigrationEdge", alias="__typename")


class SegmentStatistics(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    attribute_statistics: Optional[SegmentAttributeStatistics] = Field(None, alias="attributeStatistics")
    typename__: Optional[Literal["SegmentStatistics"]] = Field("SegmentStatistics", alias="__typename")


class SegmentStringFilter(SegmentFilter):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    localized_name: Optional[String] = Field(None, alias="localizedName")
    multi_value: Optional[Boolean] = Field(None, alias="multiValue")
    query_name: Optional[String] = Field(None, alias="queryName")
    typename__: Optional[Literal["SegmentStringFilter"]] = Field("SegmentStringFilter", alias="__typename")


class SegmentUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    segment: Optional[Segment] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SegmentUpdatePayload"]] = Field("SegmentUpdatePayload", alias="__typename")


class SegmentValue(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    localized_value: Optional[String] = Field(None, alias="localizedValue")
    query_name: Optional[String] = Field(None, alias="queryName")
    typename__: Optional[Literal["SegmentValue"]] = Field("SegmentValue", alias="__typename")


class SegmentValueConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SegmentValueEdge] = Field(default_factory=list)
    nodes: list[SegmentValue] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["SegmentValueConnection"]] = Field("SegmentValueConnection", alias="__typename")


class SegmentValueEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[SegmentValue] = None
    typename__: Optional[Literal["SegmentValueEdge"]] = Field("SegmentValueEdge", alias="__typename")


class SelectedOption(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[String] = None
    option_value: Optional[ProductOptionValue] = Field(None, alias="optionValue")
    value: Optional[String] = None
    typename__: Optional[Literal["SelectedOption"]] = Field("SelectedOption", alias="__typename")


class SellingPlan(HasMetafieldDefinitions, HasMetafields, HasPublishedTranslations, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_policy: Optional[SellingPlanBillingPolicy] = Field(None, alias="billingPolicy")
    category: Optional[SellingPlanCategory] = None
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    delivery_policy: Optional[SellingPlanDeliveryPolicy] = Field(None, alias="deliveryPolicy")
    description: Optional[String] = None
    id: Optional[ID] = None
    inventory_policy: Optional[SellingPlanInventoryPolicy] = Field(None, alias="inventoryPolicy")
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    name: Optional[String] = None
    options: list[String] = Field(default_factory=list)
    position: Optional[Int] = None
    pricing_policies: list[SellingPlanPricingPolicy] = Field(default_factory=list, alias="pricingPolicies")
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    translations: list[Translation] = Field(default_factory=list)
    typename__: Optional[Literal["SellingPlan"]] = Field("SellingPlan", alias="__typename")


class SellingPlanAnchor(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cutoff_day: Optional[Int] = Field(None, alias="cutoffDay")
    day: Optional[Int] = None
    month: Optional[Int] = None
    type: Optional[SellingPlanAnchorType] = None
    typename__: Optional[Literal["SellingPlanAnchor"]] = Field("SellingPlanAnchor", alias="__typename")


class SellingPlanCheckoutCharge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Optional[SellingPlanCheckoutChargeType] = None
    value: Optional[SellingPlanCheckoutChargeValue] = None
    typename__: Optional[Literal["SellingPlanCheckoutCharge"]] = Field("SellingPlanCheckoutCharge", alias="__typename")


class SellingPlanCheckoutChargePercentageValue(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    percentage: Optional[Float] = None
    typename__: Optional[Literal["SellingPlanCheckoutChargePercentageValue"]] = Field(
        "SellingPlanCheckoutChargePercentageValue", alias="__typename"
    )


class SellingPlanConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SellingPlanEdge] = Field(default_factory=list)
    nodes: list[SellingPlan] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["SellingPlanConnection"]] = Field("SellingPlanConnection", alias="__typename")


class SellingPlanEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[SellingPlan] = None
    typename__: Optional[Literal["SellingPlanEdge"]] = Field("SellingPlanEdge", alias="__typename")


class SellingPlanFixedBillingPolicy(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    checkout_charge: Optional[SellingPlanCheckoutCharge] = Field(None, alias="checkoutCharge")
    remaining_balance_charge_exact_time: Optional[DateTime] = Field(None, alias="remainingBalanceChargeExactTime")
    remaining_balance_charge_time_after_checkout: Optional[String] = Field(
        None, alias="remainingBalanceChargeTimeAfterCheckout"
    )
    remaining_balance_charge_trigger: Optional[SellingPlanRemainingBalanceChargeTrigger] = Field(
        None, alias="remainingBalanceChargeTrigger"
    )
    typename__: Optional[Literal["SellingPlanFixedBillingPolicy"]] = Field(
        "SellingPlanFixedBillingPolicy", alias="__typename"
    )


class SellingPlanFixedDeliveryPolicy(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    anchors: list[SellingPlanAnchor] = Field(default_factory=list)
    cutoff: Optional[Int] = None
    fulfillment_exact_time: Optional[DateTime] = Field(None, alias="fulfillmentExactTime")
    fulfillment_trigger: Optional[SellingPlanFulfillmentTrigger] = Field(None, alias="fulfillmentTrigger")
    intent: Optional[SellingPlanFixedDeliveryPolicyIntent] = None
    pre_anchor_behavior: Optional[SellingPlanFixedDeliveryPolicyPreAnchorBehavior] = Field(
        None, alias="preAnchorBehavior"
    )
    typename__: Optional[Literal["SellingPlanFixedDeliveryPolicy"]] = Field(
        "SellingPlanFixedDeliveryPolicy", alias="__typename"
    )


class SellingPlanFixedPricingPolicy(SellingPlanPricingPolicyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    adjustment_type: Optional[SellingPlanPricingPolicyAdjustmentType] = Field(None, alias="adjustmentType")
    adjustment_value: Optional[SellingPlanPricingPolicyAdjustmentValue] = Field(None, alias="adjustmentValue")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    typename__: Optional[Literal["SellingPlanFixedPricingPolicy"]] = Field(
        "SellingPlanFixedPricingPolicy", alias="__typename"
    )


class SellingPlanGroup(HasPublishedTranslations, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_id: Optional[String] = Field(None, alias="appId")
    applies_to_product: Optional[Boolean] = Field(None, alias="appliesToProduct")
    applies_to_product_variant: Optional[Boolean] = Field(None, alias="appliesToProductVariant")
    applies_to_product_variants: Optional[Boolean] = Field(None, alias="appliesToProductVariants")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    description: Optional[String] = None
    id: Optional[ID] = None
    merchant_code: Optional[String] = Field(None, alias="merchantCode")
    name: Optional[String] = None
    options: list[String] = Field(default_factory=list)
    position: Optional[Int] = None
    product_variants: Optional[ProductVariantConnection] = Field(None, alias="productVariants")
    product_variants_count: Optional[Count] = Field(None, alias="productVariantsCount")
    products: Optional[ProductConnection] = None
    products_count: Optional[Count] = Field(None, alias="productsCount")
    selling_plans: Optional[SellingPlanConnection] = Field(None, alias="sellingPlans")
    summary: Optional[String] = None
    translations: list[Translation] = Field(default_factory=list)
    typename__: Optional[Literal["SellingPlanGroup"]] = Field("SellingPlanGroup", alias="__typename")


class SellingPlanGroupAddProductVariantsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    selling_plan_group: Optional[SellingPlanGroup] = Field(None, alias="sellingPlanGroup")
    user_errors: list[SellingPlanGroupUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SellingPlanGroupAddProductVariantsPayload"]] = Field(
        "SellingPlanGroupAddProductVariantsPayload", alias="__typename"
    )


class SellingPlanGroupAddProductsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    selling_plan_group: Optional[SellingPlanGroup] = Field(None, alias="sellingPlanGroup")
    user_errors: list[SellingPlanGroupUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SellingPlanGroupAddProductsPayload"]] = Field(
        "SellingPlanGroupAddProductsPayload", alias="__typename"
    )


class SellingPlanGroupConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SellingPlanGroupEdge] = Field(default_factory=list)
    nodes: list[SellingPlanGroup] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["SellingPlanGroupConnection"]] = Field(
        "SellingPlanGroupConnection", alias="__typename"
    )


class SellingPlanGroupCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    selling_plan_group: Optional[SellingPlanGroup] = Field(None, alias="sellingPlanGroup")
    user_errors: list[SellingPlanGroupUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SellingPlanGroupCreatePayload"]] = Field(
        "SellingPlanGroupCreatePayload", alias="__typename"
    )


class SellingPlanGroupDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_selling_plan_group_id: Optional[ID] = Field(None, alias="deletedSellingPlanGroupId")
    user_errors: list[SellingPlanGroupUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SellingPlanGroupDeletePayload"]] = Field(
        "SellingPlanGroupDeletePayload", alias="__typename"
    )


class SellingPlanGroupEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[SellingPlanGroup] = None
    typename__: Optional[Literal["SellingPlanGroupEdge"]] = Field("SellingPlanGroupEdge", alias="__typename")


class SellingPlanGroupRemoveProductVariantsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    removed_product_variant_ids: Optional[list[ID]] = Field(default_factory=list, alias="removedProductVariantIds")
    user_errors: list[SellingPlanGroupUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SellingPlanGroupRemoveProductVariantsPayload"]] = Field(
        "SellingPlanGroupRemoveProductVariantsPayload", alias="__typename"
    )


class SellingPlanGroupRemoveProductsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    removed_product_ids: Optional[list[ID]] = Field(default_factory=list, alias="removedProductIds")
    user_errors: list[SellingPlanGroupUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SellingPlanGroupRemoveProductsPayload"]] = Field(
        "SellingPlanGroupRemoveProductsPayload", alias="__typename"
    )


class SellingPlanGroupUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_selling_plan_ids: Optional[list[ID]] = Field(default_factory=list, alias="deletedSellingPlanIds")
    selling_plan_group: Optional[SellingPlanGroup] = Field(None, alias="sellingPlanGroup")
    user_errors: list[SellingPlanGroupUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SellingPlanGroupUpdatePayload"]] = Field(
        "SellingPlanGroupUpdatePayload", alias="__typename"
    )


class SellingPlanGroupUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[SellingPlanGroupUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["SellingPlanGroupUserError"]] = Field("SellingPlanGroupUserError", alias="__typename")


class SellingPlanInventoryPolicy(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    reserve: Optional[SellingPlanReserve] = None
    typename__: Optional[Literal["SellingPlanInventoryPolicy"]] = Field(
        "SellingPlanInventoryPolicy", alias="__typename"
    )


class SellingPlanPricingPolicyPercentageValue(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    percentage: Optional[Float] = None
    typename__: Optional[Literal["SellingPlanPricingPolicyPercentageValue"]] = Field(
        "SellingPlanPricingPolicyPercentageValue", alias="__typename"
    )


class SellingPlanRecurringBillingPolicy(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    anchors: list[SellingPlanAnchor] = Field(default_factory=list)
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    interval: Optional[SellingPlanInterval] = None
    interval_count: Optional[Int] = Field(None, alias="intervalCount")
    max_cycles: Optional[Int] = Field(None, alias="maxCycles")
    min_cycles: Optional[Int] = Field(None, alias="minCycles")
    typename__: Optional[Literal["SellingPlanRecurringBillingPolicy"]] = Field(
        "SellingPlanRecurringBillingPolicy", alias="__typename"
    )


class SellingPlanRecurringDeliveryPolicy(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    anchors: list[SellingPlanAnchor] = Field(default_factory=list)
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    cutoff: Optional[Int] = None
    intent: Optional[SellingPlanRecurringDeliveryPolicyIntent] = None
    interval: Optional[SellingPlanInterval] = None
    interval_count: Optional[Int] = Field(None, alias="intervalCount")
    pre_anchor_behavior: Optional[SellingPlanRecurringDeliveryPolicyPreAnchorBehavior] = Field(
        None, alias="preAnchorBehavior"
    )
    typename__: Optional[Literal["SellingPlanRecurringDeliveryPolicy"]] = Field(
        "SellingPlanRecurringDeliveryPolicy", alias="__typename"
    )


class SellingPlanRecurringPricingPolicy(SellingPlanPricingPolicyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    adjustment_type: Optional[SellingPlanPricingPolicyAdjustmentType] = Field(None, alias="adjustmentType")
    adjustment_value: Optional[SellingPlanPricingPolicyAdjustmentValue] = Field(None, alias="adjustmentValue")
    after_cycle: Optional[Int] = Field(None, alias="afterCycle")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    typename__: Optional[Literal["SellingPlanRecurringPricingPolicy"]] = Field(
        "SellingPlanRecurringPricingPolicy", alias="__typename"
    )


class ServerPixel(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    status: Optional[ServerPixelStatus] = None
    webhook_endpoint_address: Optional[String] = Field(None, alias="webhookEndpointAddress")
    typename__: Optional[Literal["ServerPixel"]] = Field("ServerPixel", alias="__typename")


class ServerPixelCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    server_pixel: Optional[ServerPixel] = Field(None, alias="serverPixel")
    user_errors: list[ErrorsServerPixelUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ServerPixelCreatePayload"]] = Field("ServerPixelCreatePayload", alias="__typename")


class ServerPixelDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_server_pixel_id: Optional[ID] = Field(None, alias="deletedServerPixelId")
    user_errors: list[ErrorsServerPixelUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ServerPixelDeletePayload"]] = Field("ServerPixelDeletePayload", alias="__typename")


class ShippingLine(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    carrier_identifier: Optional[String] = Field(None, alias="carrierIdentifier")
    code: Optional[String] = None
    custom: Optional[Boolean] = None
    delivery_category: Optional[String] = Field(None, alias="deliveryCategory")
    discount_allocations: list[DiscountAllocation] = Field(default_factory=list, alias="discountAllocations")
    discounted_price: Optional[MoneyV2] = Field(None, alias="discountedPrice")
    discounted_price_set: Optional[MoneyBag] = Field(None, alias="discountedPriceSet")
    id: Optional[ID] = None
    is_removed: Optional[Boolean] = Field(None, alias="isRemoved")
    original_price: Optional[MoneyV2] = Field(None, alias="originalPrice")
    original_price_set: Optional[MoneyBag] = Field(None, alias="originalPriceSet")
    phone: Optional[String] = None
    price: Optional[Money] = None
    requested_fulfillment_service: Optional[FulfillmentService] = Field(None, alias="requestedFulfillmentService")
    shipping_rate_handle: Optional[String] = Field(None, alias="shippingRateHandle")
    source: Optional[String] = None
    tax_lines: list[TaxLine] = Field(default_factory=list, alias="taxLines")
    title: Optional[String] = None
    typename__: Optional[Literal["ShippingLine"]] = Field("ShippingLine", alias="__typename")


class ShippingLineConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ShippingLineEdge] = Field(default_factory=list)
    nodes: list[ShippingLine] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ShippingLineConnection"]] = Field("ShippingLineConnection", alias="__typename")


class ShippingLineEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ShippingLine] = None
    typename__: Optional[Literal["ShippingLineEdge"]] = Field("ShippingLineEdge", alias="__typename")


class ShippingLineSale(Sale):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    action_type: Optional[SaleActionType] = Field(None, alias="actionType")
    id: Optional[ID] = None
    line_type: Optional[SaleLineType] = Field(None, alias="lineType")
    quantity: Optional[Int] = None
    shipping_line: Optional[ShippingLine] = Field(None, alias="shippingLine")
    taxes: list[SaleTax] = Field(default_factory=list)
    total_amount: Optional[MoneyBag] = Field(None, alias="totalAmount")
    total_discount_amount_after_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountAfterTaxes")
    total_discount_amount_before_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountBeforeTaxes")
    total_tax_amount: Optional[MoneyBag] = Field(None, alias="totalTaxAmount")
    typename__: Optional[Literal["ShippingLineSale"]] = Field("ShippingLineSale", alias="__typename")


class ShippingMethod(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[String] = None
    label: Optional[String] = None
    typename__: Optional[Literal["ShippingMethod"]] = Field("ShippingMethod", alias="__typename")


class ShippingPackageDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ShippingPackageDeletePayload"]] = Field(
        "ShippingPackageDeletePayload", alias="__typename"
    )


class ShippingPackageMakeDefaultPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ShippingPackageMakeDefaultPayload"]] = Field(
        "ShippingPackageMakeDefaultPayload", alias="__typename"
    )


class ShippingPackageUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ShippingPackageUpdatePayload"]] = Field(
        "ShippingPackageUpdatePayload", alias="__typename"
    )


class ShippingRate(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    handle: Optional[String] = None
    price: Optional[MoneyV2] = None
    title: Optional[String] = None
    typename__: Optional[Literal["ShippingRate"]] = Field("ShippingRate", alias="__typename")


class ShippingRefund(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[Money] = None
    amount_set: Optional[MoneyBag] = Field(None, alias="amountSet")
    maximum_refundable: Optional[Money] = Field(None, alias="maximumRefundable")
    maximum_refundable_set: Optional[MoneyBag] = Field(None, alias="maximumRefundableSet")
    tax: Optional[Money] = None
    tax_set: Optional[MoneyBag] = Field(None, alias="taxSet")
    typename__: Optional[Literal["ShippingRefund"]] = Field("ShippingRefund", alias="__typename")


class Shop(HasMetafields, HasPublishedTranslations, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alerts: list[ShopAlert] = Field(default_factory=list)
    all_product_categories: list[ProductCategory] = Field(default_factory=list, alias="allProductCategories")
    all_product_categories_list: list[TaxonomyCategory] = Field(default_factory=list, alias="allProductCategoriesList")
    analytics_token: Optional[String] = Field(None, alias="analyticsToken")
    assigned_fulfillment_orders: Optional[FulfillmentOrderConnection] = Field(None, alias="assignedFulfillmentOrders")
    available_channel_apps: Optional[AppConnection] = Field(None, alias="availableChannelApps")
    billing_address: Optional[ShopAddress] = Field(None, alias="billingAddress")
    channel_definitions_for_installed_channels: list[AvailableChannelDefinitionsByChannel] = Field(
        default_factory=list, alias="channelDefinitionsForInstalledChannels"
    )
    channels: Optional[ChannelConnection] = None
    checkout_api_supported: Optional[Boolean] = Field(None, alias="checkoutApiSupported")
    collection_by_handle: Optional[Collection] = Field(None, alias="collectionByHandle")
    collection_saved_searches: Optional[SavedSearchConnection] = Field(None, alias="collectionSavedSearches")
    collections: Optional[CollectionConnection] = None
    contact_email: Optional[String] = Field(None, alias="contactEmail")
    countries_in_shipping_zones: Optional[CountriesInShippingZones] = Field(None, alias="countriesInShippingZones")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    currency_code: Optional[CurrencyCode] = Field(None, alias="currencyCode")
    currency_formats: Optional[CurrencyFormats] = Field(None, alias="currencyFormats")
    currency_settings: Optional[CurrencySettingConnection] = Field(None, alias="currencySettings")
    customer_accounts: Optional[ShopCustomerAccountsSetting] = Field(None, alias="customerAccounts")
    customer_accounts_v2: Optional[CustomerAccountsV2] = Field(None, alias="customerAccountsV2")
    customer_saved_searches: Optional[SavedSearchConnection] = Field(None, alias="customerSavedSearches")
    customer_tags: Optional[StringConnection] = Field(None, alias="customerTags")
    customers: Optional[CustomerConnection] = None
    description: Optional[String] = None
    domains: list[Domain] = Field(default_factory=list)
    draft_order_saved_searches: Optional[SavedSearchConnection] = Field(None, alias="draftOrderSavedSearches")
    draft_order_tags: Optional[StringConnection] = Field(None, alias="draftOrderTags")
    draft_orders: Optional[DraftOrderConnection] = Field(None, alias="draftOrders")
    email: Optional[String] = None
    enabled_presentment_currencies: list[CurrencyCode] = Field(
        default_factory=list, alias="enabledPresentmentCurrencies"
    )
    features: Optional[ShopFeatures] = None
    fulfillment_orders: Optional[FulfillmentOrderConnection] = Field(None, alias="fulfillmentOrders")
    fulfillment_services: list[FulfillmentService] = Field(default_factory=list, alias="fulfillmentServices")
    iana_timezone: Optional[String] = Field(None, alias="ianaTimezone")
    id: Optional[ID] = None
    inventory_items: Optional[InventoryItemConnection] = Field(None, alias="inventoryItems")
    limited_pending_order_count: Optional[LimitedPendingOrderCount] = Field(None, alias="limitedPendingOrderCount")
    locations: Optional[LocationConnection] = None
    marketing_events: Optional[MarketingEventConnection] = Field(None, alias="marketingEvents")
    marketing_sms_consent_enabled_at_checkout: Optional[Boolean] = Field(
        None, alias="marketingSmsConsentEnabledAtCheckout"
    )
    merchant_approval_signals: Optional[MerchantApprovalSignals] = Field(None, alias="merchantApprovalSignals")
    metafield: Optional[Metafield] = None
    metafields: Optional[MetafieldConnection] = None
    myshopify_domain: Optional[String] = Field(None, alias="myshopifyDomain")
    name: Optional[String] = None
    navigation_settings: list[NavigationItem] = Field(default_factory=list, alias="navigationSettings")
    order_number_format_prefix: Optional[String] = Field(None, alias="orderNumberFormatPrefix")
    order_number_format_suffix: Optional[String] = Field(None, alias="orderNumberFormatSuffix")
    order_saved_searches: Optional[SavedSearchConnection] = Field(None, alias="orderSavedSearches")
    order_tags: Optional[StringConnection] = Field(None, alias="orderTags")
    orders: Optional[OrderConnection] = None
    payment_settings: Optional[PaymentSettings] = Field(None, alias="paymentSettings")
    plan: Optional[ShopPlan] = None
    price_rule_saved_searches: Optional[SavedSearchConnection] = Field(None, alias="priceRuleSavedSearches")
    price_rules: Optional[PriceRuleConnection] = Field(None, alias="priceRules")
    primary_domain: Optional[Domain] = Field(None, alias="primaryDomain")
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    product_by_handle: Optional[Product] = Field(None, alias="productByHandle")
    product_images: Optional[ImageConnection] = Field(None, alias="productImages")
    product_saved_searches: Optional[SavedSearchConnection] = Field(None, alias="productSavedSearches")
    product_tags: Optional[StringConnection] = Field(None, alias="productTags")
    product_types: Optional[StringConnection] = Field(None, alias="productTypes")
    product_variants: Optional[ProductVariantConnection] = Field(None, alias="productVariants")
    product_vendors: Optional[StringConnection] = Field(None, alias="productVendors")
    products: Optional[ProductConnection] = None
    publication_count: Optional[Int] = Field(None, alias="publicationCount")
    resource_limits: Optional[ShopResourceLimits] = Field(None, alias="resourceLimits")
    rich_text_editor_url: Optional[URL] = Field(None, alias="richTextEditorUrl")
    search: Optional[SearchResultConnection] = None
    search_filters: Optional[SearchFilterOptions] = Field(None, alias="searchFilters")
    setup_required: Optional[Boolean] = Field(None, alias="setupRequired")
    ships_to_countries: list[CountryCode] = Field(default_factory=list, alias="shipsToCountries")
    shop_policies: list[ShopPolicy] = Field(default_factory=list, alias="shopPolicies")
    staff_members: Optional[StaffMemberConnection] = Field(None, alias="staffMembers")
    storefront_access_tokens: Optional[StorefrontAccessTokenConnection] = Field(None, alias="storefrontAccessTokens")
    storefront_url: Optional[URL] = Field(None, alias="storefrontUrl")
    tax_shipping: Optional[Boolean] = Field(None, alias="taxShipping")
    taxes_included: Optional[Boolean] = Field(None, alias="taxesIncluded")
    timezone_abbreviation: Optional[String] = Field(None, alias="timezoneAbbreviation")
    timezone_offset: Optional[String] = Field(None, alias="timezoneOffset")
    timezone_offset_minutes: Optional[Int] = Field(None, alias="timezoneOffsetMinutes")
    transactional_sms_disabled: Optional[Boolean] = Field(None, alias="transactionalSmsDisabled")
    translations: list[Translation] = Field(default_factory=list)
    unit_system: Optional[UnitSystem] = Field(None, alias="unitSystem")
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    uploaded_images_by_ids: list[Image] = Field(default_factory=list, alias="uploadedImagesByIds")
    url: Optional[URL] = None
    weight_unit: Optional[WeightUnit] = Field(None, alias="weightUnit")
    typename__: Optional[Literal["Shop"]] = Field("Shop", alias="__typename")


class ShopAddress(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    address2: Optional[String] = None
    city: Optional[String] = None
    company: Optional[String] = None
    coordinates_validated: Optional[Boolean] = Field(None, alias="coordinatesValidated")
    country: Optional[String] = None
    country_code: Optional[String] = Field(None, alias="countryCode")
    country_code_v2: Optional[CountryCode] = Field(None, alias="countryCodeV2")
    first_name: Optional[String] = Field(None, alias="firstName")
    formatted: list[String] = Field(default_factory=list)
    formatted_area: Optional[String] = Field(None, alias="formattedArea")
    id: Optional[ID] = None
    last_name: Optional[String] = Field(None, alias="lastName")
    latitude: Optional[Float] = None
    longitude: Optional[Float] = None
    name: Optional[String] = None
    phone: Optional[String] = None
    province: Optional[String] = None
    province_code: Optional[String] = Field(None, alias="provinceCode")
    zip: Optional[String] = None
    typename__: Optional[Literal["ShopAddress"]] = Field("ShopAddress", alias="__typename")


class ShopAlert(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    action: Optional[ShopAlertAction] = None
    description: Optional[String] = None
    typename__: Optional[Literal["ShopAlert"]] = Field("ShopAlert", alias="__typename")


class ShopAlertAction(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    title: Optional[String] = None
    url: Optional[URL] = None
    typename__: Optional[Literal["ShopAlertAction"]] = Field("ShopAlertAction", alias="__typename")


class ShopBillingPreferences(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    currency: Optional[CurrencyCode] = None
    typename__: Optional[Literal["ShopBillingPreferences"]] = Field("ShopBillingPreferences", alias="__typename")


class ShopFeatures(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    avalara_avatax: Optional[Boolean] = Field(None, alias="avalaraAvatax")
    branding: Optional[ShopBranding] = None
    bundles: Optional[BundlesFeature] = None
    captcha: Optional[Boolean] = None
    captcha_external_domains: Optional[Boolean] = Field(None, alias="captchaExternalDomains")
    cart_transform: Optional[CartTransformFeature] = Field(None, alias="cartTransform")
    delivery_profiles: Optional[Boolean] = Field(None, alias="deliveryProfiles")
    dynamic_remarketing: Optional[Boolean] = Field(None, alias="dynamicRemarketing")
    eligible_for_subscription_migration: Optional[Boolean] = Field(None, alias="eligibleForSubscriptionMigration")
    eligible_for_subscriptions: Optional[Boolean] = Field(None, alias="eligibleForSubscriptions")
    gift_cards: Optional[Boolean] = Field(None, alias="giftCards")
    harmonized_system_code: Optional[Boolean] = Field(None, alias="harmonizedSystemCode")
    international_domains: Optional[Boolean] = Field(None, alias="internationalDomains")
    international_price_overrides: Optional[Boolean] = Field(None, alias="internationalPriceOverrides")
    international_price_rules: Optional[Boolean] = Field(None, alias="internationalPriceRules")
    legacy_subscription_gateway_enabled: Optional[Boolean] = Field(None, alias="legacySubscriptionGatewayEnabled")
    live_view: Optional[Boolean] = Field(None, alias="liveView")
    multi_location: Optional[Boolean] = Field(None, alias="multiLocation")
    onboarding_visual: Optional[Boolean] = Field(None, alias="onboardingVisual")
    paypal_express_subscription_gateway_status: Optional[PaypalExpressSubscriptionsGatewayStatus] = Field(
        None, alias="paypalExpressSubscriptionGatewayStatus"
    )
    reports: Optional[Boolean] = None
    sells_subscriptions: Optional[Boolean] = Field(None, alias="sellsSubscriptions")
    shopify_plus: Optional[Boolean] = Field(None, alias="shopifyPlus")
    show_metrics: Optional[Boolean] = Field(None, alias="showMetrics")
    storefront: Optional[Boolean] = None
    using_shopify_balance: Optional[Boolean] = Field(None, alias="usingShopifyBalance")
    typename__: Optional[Literal["ShopFeatures"]] = Field("ShopFeatures", alias="__typename")


class ShopLocale(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    locale: Optional[String] = None
    market_web_presences: list[MarketWebPresence] = Field(default_factory=list, alias="marketWebPresences")
    name: Optional[String] = None
    primary: Optional[Boolean] = None
    published: Optional[Boolean] = None
    typename__: Optional[Literal["ShopLocale"]] = Field("ShopLocale", alias="__typename")


class ShopLocaleDisablePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    locale: Optional[String] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ShopLocaleDisablePayload"]] = Field("ShopLocaleDisablePayload", alias="__typename")


class ShopLocaleEnablePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    shop_locale: Optional[ShopLocale] = Field(None, alias="shopLocale")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ShopLocaleEnablePayload"]] = Field("ShopLocaleEnablePayload", alias="__typename")


class ShopLocaleUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    shop_locale: Optional[ShopLocale] = Field(None, alias="shopLocale")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ShopLocaleUpdatePayload"]] = Field("ShopLocaleUpdatePayload", alias="__typename")


class ShopPayInstallmentsPaymentDetails(BasePaymentDetails):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    payment_method_name: Optional[String] = Field(None, alias="paymentMethodName")
    typename__: Optional[Literal["ShopPayInstallmentsPaymentDetails"]] = Field(
        "ShopPayInstallmentsPaymentDetails", alias="__typename"
    )


class ShopPlan(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    display_name: Optional[String] = Field(None, alias="displayName")
    partner_development: Optional[Boolean] = Field(None, alias="partnerDevelopment")
    shopify_plus: Optional[Boolean] = Field(None, alias="shopifyPlus")
    typename__: Optional[Literal["ShopPlan"]] = Field("ShopPlan", alias="__typename")


class ShopPolicy(HasPublishedTranslations, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    body: Optional[HTML] = None
    created_at: Optional[Date] = Field(None, alias="createdAt")
    id: Optional[ID] = None
    title: Optional[String] = None
    translations: list[Translation] = Field(default_factory=list)
    type: Optional[ShopPolicyType] = None
    updated_at: Optional[Date] = Field(None, alias="updatedAt")
    url: Optional[URL] = None
    typename__: Optional[Literal["ShopPolicy"]] = Field("ShopPolicy", alias="__typename")


class ShopPolicyUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    shop_policy: Optional[ShopPolicy] = Field(None, alias="shopPolicy")
    user_errors: list[ShopPolicyUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ShopPolicyUpdatePayload"]] = Field("ShopPolicyUpdatePayload", alias="__typename")


class ShopPolicyUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ShopPolicyErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ShopPolicyUserError"]] = Field("ShopPolicyUserError", alias="__typename")


class ShopResourceFeedbackCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    feedback: Optional[AppFeedback] = None
    user_errors: list[ShopResourceFeedbackCreateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ShopResourceFeedbackCreatePayload"]] = Field(
        "ShopResourceFeedbackCreatePayload", alias="__typename"
    )


class ShopResourceFeedbackCreateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ShopResourceFeedbackCreateUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ShopResourceFeedbackCreateUserError"]] = Field(
        "ShopResourceFeedbackCreateUserError", alias="__typename"
    )


class ShopResourceLimits(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    location_limit: Optional[Int] = Field(None, alias="locationLimit")
    max_product_options: Optional[Int] = Field(None, alias="maxProductOptions")
    max_product_variants: Optional[Int] = Field(None, alias="maxProductVariants")
    redirect_limit_reached: Optional[Boolean] = Field(None, alias="redirectLimitReached")
    typename__: Optional[Literal["ShopResourceLimits"]] = Field("ShopResourceLimits", alias="__typename")


class ShopifyFunction(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    api_type: Optional[String] = Field(None, alias="apiType")
    api_version: Optional[String] = Field(None, alias="apiVersion")
    app: Optional[App] = None
    app_bridge: Optional[FunctionsAppBridge] = Field(None, alias="appBridge")
    app_key: Optional[String] = Field(None, alias="appKey")
    description: Optional[String] = None
    id: Optional[String] = None
    input_query: Optional[String] = Field(None, alias="inputQuery")
    title: Optional[String] = None
    use_creation_ui: Optional[Boolean] = Field(None, alias="useCreationUi")
    typename__: Optional[Literal["ShopifyFunction"]] = Field("ShopifyFunction", alias="__typename")


class ShopifyFunctionConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ShopifyFunctionEdge] = Field(default_factory=list)
    nodes: list[ShopifyFunction] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ShopifyFunctionConnection"]] = Field("ShopifyFunctionConnection", alias="__typename")


class ShopifyFunctionEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ShopifyFunction] = None
    typename__: Optional[Literal["ShopifyFunctionEdge"]] = Field("ShopifyFunctionEdge", alias="__typename")


class ShopifyPaymentsAccount(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    activated: Optional[Boolean] = None
    balance: list[MoneyV2] = Field(default_factory=list)
    balance_transactions: Optional[ShopifyPaymentsBalanceTransactionConnection] = Field(
        None, alias="balanceTransactions"
    )
    bank_accounts: Optional[ShopifyPaymentsBankAccountConnection] = Field(None, alias="bankAccounts")
    charge_statement_descriptor: Optional[String] = Field(None, alias="chargeStatementDescriptor")
    charge_statement_descriptors: Optional[ShopifyPaymentsChargeStatementDescriptor] = Field(
        None, alias="chargeStatementDescriptors"
    )
    country: Optional[String] = None
    default_currency: Optional[CurrencyCode] = Field(None, alias="defaultCurrency")
    disputes: Optional[ShopifyPaymentsDisputeConnection] = None
    fraud_settings: Optional[ShopifyPaymentsFraudSettings] = Field(None, alias="fraudSettings")
    id: Optional[ID] = None
    notification_settings: Optional[ShopifyPaymentsNotificationSettings] = Field(None, alias="notificationSettings")
    onboardable: Optional[Boolean] = None
    payout_schedule: Optional[ShopifyPaymentsPayoutSchedule] = Field(None, alias="payoutSchedule")
    payout_statement_descriptor: Optional[String] = Field(None, alias="payoutStatementDescriptor")
    payouts: Optional[ShopifyPaymentsPayoutConnection] = None
    permitted_verification_documents: list[ShopifyPaymentsVerificationDocument] = Field(
        default_factory=list, alias="permittedVerificationDocuments"
    )
    verifications: list[ShopifyPaymentsVerification] = Field(default_factory=list)
    typename__: Optional[Literal["ShopifyPaymentsAccount"]] = Field("ShopifyPaymentsAccount", alias="__typename")


class ShopifyPaymentsAdjustmentOrder(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[MoneyV2] = None
    link: Optional[URL] = None
    name: Optional[String] = None
    order_transaction_id: Optional[BigInt] = Field(None, alias="orderTransactionId")
    typename__: Optional[Literal["ShopifyPaymentsAdjustmentOrder"]] = Field(
        "ShopifyPaymentsAdjustmentOrder", alias="__typename"
    )


class ShopifyPaymentsAssociatedOrder(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    name: Optional[String] = None
    typename__: Optional[Literal["ShopifyPaymentsAssociatedOrder"]] = Field(
        "ShopifyPaymentsAssociatedOrder", alias="__typename"
    )


class ShopifyPaymentsBalanceTransaction(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    adjustment_reason: Optional[String] = Field(None, alias="adjustmentReason")
    adjustments_orders: list[ShopifyPaymentsAdjustmentOrder] = Field(default_factory=list, alias="adjustmentsOrders")
    amount: Optional[MoneyV2] = None
    associated_order: Optional[ShopifyPaymentsAssociatedOrder] = Field(None, alias="associatedOrder")
    associated_payout: Optional[ShopifyPaymentsBalanceTransactionAssociatedPayout] = Field(
        None, alias="associatedPayout"
    )
    fee: Optional[MoneyV2] = None
    id: Optional[ID] = None
    net: Optional[MoneyV2] = None
    source_id: Optional[BigInt] = Field(None, alias="sourceId")
    source_order_transaction_id: Optional[BigInt] = Field(None, alias="sourceOrderTransactionId")
    source_type: Optional[ShopifyPaymentsSourceType] = Field(None, alias="sourceType")
    test: Optional[Boolean] = None
    transaction_date: Optional[DateTime] = Field(None, alias="transactionDate")
    type: Optional[ShopifyPaymentsTransactionType] = None
    typename__: Optional[Literal["ShopifyPaymentsBalanceTransaction"]] = Field(
        "ShopifyPaymentsBalanceTransaction", alias="__typename"
    )


class ShopifyPaymentsBalanceTransactionAssociatedPayout(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    status: Optional[ShopifyPaymentsBalanceTransactionPayoutStatus] = None
    typename__: Optional[Literal["ShopifyPaymentsBalanceTransactionAssociatedPayout"]] = Field(
        "ShopifyPaymentsBalanceTransactionAssociatedPayout", alias="__typename"
    )


class ShopifyPaymentsBalanceTransactionConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ShopifyPaymentsBalanceTransactionEdge] = Field(default_factory=list)
    nodes: list[ShopifyPaymentsBalanceTransaction] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ShopifyPaymentsBalanceTransactionConnection"]] = Field(
        "ShopifyPaymentsBalanceTransactionConnection", alias="__typename"
    )


class ShopifyPaymentsBalanceTransactionEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ShopifyPaymentsBalanceTransaction] = None
    typename__: Optional[Literal["ShopifyPaymentsBalanceTransactionEdge"]] = Field(
        "ShopifyPaymentsBalanceTransactionEdge", alias="__typename"
    )


class ShopifyPaymentsBankAccount(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    account_number: Optional[String] = Field(None, alias="accountNumber")
    account_number_last_digits: Optional[String] = Field(None, alias="accountNumberLastDigits")
    bank_name: Optional[String] = Field(None, alias="bankName")
    country: Optional[CountryCode] = None
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    currency: Optional[CurrencyCode] = None
    id: Optional[ID] = None
    payouts: Optional[ShopifyPaymentsPayoutConnection] = None
    routing_number: Optional[String] = Field(None, alias="routingNumber")
    status: Optional[ShopifyPaymentsBankAccountStatus] = None
    typename__: Optional[Literal["ShopifyPaymentsBankAccount"]] = Field(
        "ShopifyPaymentsBankAccount", alias="__typename"
    )


class ShopifyPaymentsBankAccountConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ShopifyPaymentsBankAccountEdge] = Field(default_factory=list)
    nodes: list[ShopifyPaymentsBankAccount] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ShopifyPaymentsBankAccountConnection"]] = Field(
        "ShopifyPaymentsBankAccountConnection", alias="__typename"
    )


class ShopifyPaymentsBankAccountEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ShopifyPaymentsBankAccount] = None
    typename__: Optional[Literal["ShopifyPaymentsBankAccountEdge"]] = Field(
        "ShopifyPaymentsBankAccountEdge", alias="__typename"
    )


class ShopifyPaymentsDefaultChargeStatementDescriptor(ShopifyPaymentsChargeStatementDescriptor):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    default: Optional[String] = None
    prefix: Optional[String] = None
    typename__: Optional[Literal["ShopifyPaymentsDefaultChargeStatementDescriptor"]] = Field(
        "ShopifyPaymentsDefaultChargeStatementDescriptor", alias="__typename"
    )


class ShopifyPaymentsDispute(LegacyInteroperability, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[MoneyV2] = None
    evidence_due_by: Optional[Date] = Field(None, alias="evidenceDueBy")
    evidence_sent_on: Optional[Date] = Field(None, alias="evidenceSentOn")
    finalized_on: Optional[Date] = Field(None, alias="finalizedOn")
    id: Optional[ID] = None
    initiated_at: Optional[DateTime] = Field(None, alias="initiatedAt")
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    order: Optional[Order] = None
    reason_details: Optional[ShopifyPaymentsDisputeReasonDetails] = Field(None, alias="reasonDetails")
    status: Optional[DisputeStatus] = None
    type: Optional[DisputeType] = None
    typename__: Optional[Literal["ShopifyPaymentsDispute"]] = Field("ShopifyPaymentsDispute", alias="__typename")


class ShopifyPaymentsDisputeConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ShopifyPaymentsDisputeEdge] = Field(default_factory=list)
    nodes: list[ShopifyPaymentsDispute] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ShopifyPaymentsDisputeConnection"]] = Field(
        "ShopifyPaymentsDisputeConnection", alias="__typename"
    )


class ShopifyPaymentsDisputeEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ShopifyPaymentsDispute] = None
    typename__: Optional[Literal["ShopifyPaymentsDisputeEdge"]] = Field(
        "ShopifyPaymentsDisputeEdge", alias="__typename"
    )


class ShopifyPaymentsDisputeEvidence(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    access_activity_log: Optional[String] = Field(None, alias="accessActivityLog")
    billing_address: Optional[MailingAddress] = Field(None, alias="billingAddress")
    cancellation_policy_disclosure: Optional[String] = Field(None, alias="cancellationPolicyDisclosure")
    cancellation_policy_file: Optional[ShopifyPaymentsDisputeFileUpload] = Field(None, alias="cancellationPolicyFile")
    cancellation_rebuttal: Optional[String] = Field(None, alias="cancellationRebuttal")
    customer_communication_file: Optional[ShopifyPaymentsDisputeFileUpload] = Field(
        None, alias="customerCommunicationFile"
    )
    customer_email_address: Optional[String] = Field(None, alias="customerEmailAddress")
    customer_first_name: Optional[String] = Field(None, alias="customerFirstName")
    customer_last_name: Optional[String] = Field(None, alias="customerLastName")
    customer_purchase_ip: Optional[String] = Field(None, alias="customerPurchaseIp")
    dispute: Optional[ShopifyPaymentsDispute] = None
    dispute_file_uploads: list[ShopifyPaymentsDisputeFileUpload] = Field(
        default_factory=list, alias="disputeFileUploads"
    )
    fulfillments: list[ShopifyPaymentsDisputeFulfillment] = Field(default_factory=list)
    id: Optional[ID] = None
    product_description: Optional[String] = Field(None, alias="productDescription")
    refund_policy_disclosure: Optional[String] = Field(None, alias="refundPolicyDisclosure")
    refund_policy_file: Optional[ShopifyPaymentsDisputeFileUpload] = Field(None, alias="refundPolicyFile")
    refund_refusal_explanation: Optional[String] = Field(None, alias="refundRefusalExplanation")
    service_documentation_file: Optional[ShopifyPaymentsDisputeFileUpload] = Field(
        None, alias="serviceDocumentationFile"
    )
    shipping_address: Optional[MailingAddress] = Field(None, alias="shippingAddress")
    shipping_documentation_file: Optional[ShopifyPaymentsDisputeFileUpload] = Field(
        None, alias="shippingDocumentationFile"
    )
    submitted: Optional[Boolean] = None
    uncategorized_file: Optional[ShopifyPaymentsDisputeFileUpload] = Field(None, alias="uncategorizedFile")
    uncategorized_text: Optional[String] = Field(None, alias="uncategorizedText")
    typename__: Optional[Literal["ShopifyPaymentsDisputeEvidence"]] = Field(
        "ShopifyPaymentsDisputeEvidence", alias="__typename"
    )


class ShopifyPaymentsDisputeFileUpload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    dispute_evidence_type: Optional[ShopifyPaymentsDisputeEvidenceFileType] = Field(None, alias="disputeEvidenceType")
    file_size: Optional[Int] = Field(None, alias="fileSize")
    file_type: Optional[String] = Field(None, alias="fileType")
    id: Optional[ID] = None
    original_file_name: Optional[String] = Field(None, alias="originalFileName")
    url: Optional[URL] = None
    typename__: Optional[Literal["ShopifyPaymentsDisputeFileUpload"]] = Field(
        "ShopifyPaymentsDisputeFileUpload", alias="__typename"
    )


class ShopifyPaymentsDisputeFulfillment(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    shipping_carrier: Optional[String] = Field(None, alias="shippingCarrier")
    shipping_date: Optional[Date] = Field(None, alias="shippingDate")
    shipping_tracking_number: Optional[String] = Field(None, alias="shippingTrackingNumber")
    typename__: Optional[Literal["ShopifyPaymentsDisputeFulfillment"]] = Field(
        "ShopifyPaymentsDisputeFulfillment", alias="__typename"
    )


class ShopifyPaymentsDisputeReasonDetails(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    network_reason_code: Optional[String] = Field(None, alias="networkReasonCode")
    reason: Optional[ShopifyPaymentsDisputeReason] = None
    typename__: Optional[Literal["ShopifyPaymentsDisputeReasonDetails"]] = Field(
        "ShopifyPaymentsDisputeReasonDetails", alias="__typename"
    )


class ShopifyPaymentsExtendedAuthorization(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    extended_authorization_expires_at: Optional[DateTime] = Field(None, alias="extendedAuthorizationExpiresAt")
    standard_authorization_expires_at: Optional[DateTime] = Field(None, alias="standardAuthorizationExpiresAt")
    typename__: Optional[Literal["ShopifyPaymentsExtendedAuthorization"]] = Field(
        "ShopifyPaymentsExtendedAuthorization", alias="__typename"
    )


class ShopifyPaymentsFraudSettings(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    decline_charge_on_avs_failure: Optional[Boolean] = Field(None, alias="declineChargeOnAvsFailure")
    decline_charge_on_cvc_failure: Optional[Boolean] = Field(None, alias="declineChargeOnCvcFailure")
    typename__: Optional[Literal["ShopifyPaymentsFraudSettings"]] = Field(
        "ShopifyPaymentsFraudSettings", alias="__typename"
    )


class ShopifyPaymentsJpChargeStatementDescriptor(ShopifyPaymentsChargeStatementDescriptor):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    default: Optional[String] = None
    kana: Optional[String] = None
    kanji: Optional[String] = None
    prefix: Optional[String] = None
    typename__: Optional[Literal["ShopifyPaymentsJpChargeStatementDescriptor"]] = Field(
        "ShopifyPaymentsJpChargeStatementDescriptor", alias="__typename"
    )


class ShopifyPaymentsNotificationSettings(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    payouts: Optional[Boolean] = None
    typename__: Optional[Literal["ShopifyPaymentsNotificationSettings"]] = Field(
        "ShopifyPaymentsNotificationSettings", alias="__typename"
    )


class ShopifyPaymentsPayout(LegacyInteroperability, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    bank_account: Optional[ShopifyPaymentsBankAccount] = Field(None, alias="bankAccount")
    gross: Optional[MoneyV2] = None
    id: Optional[ID] = None
    issued_at: Optional[DateTime] = Field(None, alias="issuedAt")
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    net: Optional[MoneyV2] = None
    status: Optional[ShopifyPaymentsPayoutStatus] = None
    summary: Optional[ShopifyPaymentsPayoutSummary] = None
    transaction_type: Optional[ShopifyPaymentsPayoutTransactionType] = Field(None, alias="transactionType")
    typename__: Optional[Literal["ShopifyPaymentsPayout"]] = Field("ShopifyPaymentsPayout", alias="__typename")


class ShopifyPaymentsPayoutConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ShopifyPaymentsPayoutEdge] = Field(default_factory=list)
    nodes: list[ShopifyPaymentsPayout] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ShopifyPaymentsPayoutConnection"]] = Field(
        "ShopifyPaymentsPayoutConnection", alias="__typename"
    )


class ShopifyPaymentsPayoutEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[ShopifyPaymentsPayout] = None
    typename__: Optional[Literal["ShopifyPaymentsPayoutEdge"]] = Field("ShopifyPaymentsPayoutEdge", alias="__typename")


class ShopifyPaymentsPayoutSchedule(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    interval: Optional[ShopifyPaymentsPayoutInterval] = None
    monthly_anchor: Optional[Int] = Field(None, alias="monthlyAnchor")
    weekly_anchor: Optional[DayOfTheWeek] = Field(None, alias="weeklyAnchor")
    typename__: Optional[Literal["ShopifyPaymentsPayoutSchedule"]] = Field(
        "ShopifyPaymentsPayoutSchedule", alias="__typename"
    )


class ShopifyPaymentsPayoutSummary(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    adjustments_fee: Optional[MoneyV2] = Field(None, alias="adjustmentsFee")
    adjustments_gross: Optional[MoneyV2] = Field(None, alias="adjustmentsGross")
    charges_fee: Optional[MoneyV2] = Field(None, alias="chargesFee")
    charges_gross: Optional[MoneyV2] = Field(None, alias="chargesGross")
    refunds_fee: Optional[MoneyV2] = Field(None, alias="refundsFee")
    refunds_fee_gross: Optional[MoneyV2] = Field(None, alias="refundsFeeGross")
    reserved_funds_fee: Optional[MoneyV2] = Field(None, alias="reservedFundsFee")
    reserved_funds_gross: Optional[MoneyV2] = Field(None, alias="reservedFundsGross")
    retried_payouts_fee: Optional[MoneyV2] = Field(None, alias="retriedPayoutsFee")
    retried_payouts_gross: Optional[MoneyV2] = Field(None, alias="retriedPayoutsGross")
    typename__: Optional[Literal["ShopifyPaymentsPayoutSummary"]] = Field(
        "ShopifyPaymentsPayoutSummary", alias="__typename"
    )


class ShopifyPaymentsRefundSet(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    acquirer_reference_number: Optional[String] = Field(None, alias="acquirerReferenceNumber")
    typename__: Optional[Literal["ShopifyPaymentsRefundSet"]] = Field("ShopifyPaymentsRefundSet", alias="__typename")


class ShopifyPaymentsTransactionSet(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    extended_authorization_set: Optional[ShopifyPaymentsExtendedAuthorization] = Field(
        None, alias="extendedAuthorizationSet"
    )
    refund_set: Optional[ShopifyPaymentsRefundSet] = Field(None, alias="refundSet")
    typename__: Optional[Literal["ShopifyPaymentsTransactionSet"]] = Field(
        "ShopifyPaymentsTransactionSet", alias="__typename"
    )


class ShopifyPaymentsVerification(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    status: Optional[ShopifyPaymentsVerificationStatus] = None
    subject: Optional[ShopifyPaymentsVerificationSubject] = None
    typename__: Optional[Literal["ShopifyPaymentsVerification"]] = Field(
        "ShopifyPaymentsVerification", alias="__typename"
    )


class ShopifyPaymentsVerificationDocument(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    back_required: Optional[Boolean] = Field(None, alias="backRequired")
    front_required: Optional[Boolean] = Field(None, alias="frontRequired")
    type: Optional[ShopifyPaymentsVerificationDocumentType] = None
    typename__: Optional[Literal["ShopifyPaymentsVerificationDocument"]] = Field(
        "ShopifyPaymentsVerificationDocument", alias="__typename"
    )


class ShopifyPaymentsVerificationSubject(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    family_name: Optional[String] = Field(None, alias="familyName")
    given_name: Optional[String] = Field(None, alias="givenName")
    typename__: Optional[Literal["ShopifyPaymentsVerificationSubject"]] = Field(
        "ShopifyPaymentsVerificationSubject", alias="__typename"
    )


class ShopifyProtectOrderEligibility(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    status: Optional[ShopifyProtectEligibilityStatus] = None
    typename__: Optional[Literal["ShopifyProtectOrderEligibility"]] = Field(
        "ShopifyProtectOrderEligibility", alias="__typename"
    )


class ShopifyProtectOrderSummary(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    eligibility: Optional[ShopifyProtectOrderEligibility] = None
    status: Optional[ShopifyProtectStatus] = None
    typename__: Optional[Literal["ShopifyProtectOrderSummary"]] = Field(
        "ShopifyProtectOrderSummary", alias="__typename"
    )


class StaffMember(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    active: Optional[Boolean] = None
    avatar: Optional[Image] = None
    email: Optional[String] = None
    exists: Optional[Boolean] = None
    first_name: Optional[String] = Field(None, alias="firstName")
    id: Optional[ID] = None
    initials: Optional[list[String]] = Field(default_factory=list)
    is_shop_owner: Optional[Boolean] = Field(None, alias="isShopOwner")
    last_name: Optional[String] = Field(None, alias="lastName")
    locale: Optional[String] = None
    name: Optional[String] = None
    phone: Optional[String] = None
    private_data: Optional[StaffMemberPrivateData] = Field(None, alias="privateData")
    typename__: Optional[Literal["StaffMember"]] = Field("StaffMember", alias="__typename")


class StaffMemberConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[StaffMemberEdge] = Field(default_factory=list)
    nodes: list[StaffMember] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["StaffMemberConnection"]] = Field("StaffMemberConnection", alias="__typename")


class StaffMemberEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[StaffMember] = None
    typename__: Optional[Literal["StaffMemberEdge"]] = Field("StaffMemberEdge", alias="__typename")


class StaffMemberPrivateData(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    account_settings_url: Optional[URL] = Field(None, alias="accountSettingsUrl")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    permissions: list[StaffMemberPermission] = Field(default_factory=list)
    typename__: Optional[Literal["StaffMemberPrivateData"]] = Field("StaffMemberPrivateData", alias="__typename")


class StagedMediaUploadTarget(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    parameters: list[StagedUploadParameter] = Field(default_factory=list)
    resource_url: Optional[URL] = Field(None, alias="resourceUrl")
    url: Optional[URL] = None
    typename__: Optional[Literal["StagedMediaUploadTarget"]] = Field("StagedMediaUploadTarget", alias="__typename")


class StagedUploadParameter(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["StagedUploadParameter"]] = Field("StagedUploadParameter", alias="__typename")


class StagedUploadTarget(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    parameters: list[ImageUploadParameter] = Field(default_factory=list)
    url: Optional[String] = None
    typename__: Optional[Literal["StagedUploadTarget"]] = Field("StagedUploadTarget", alias="__typename")


class StagedUploadTargetGeneratePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    parameters: list[MutationsStagedUploadTargetGenerateUploadParameter] = Field(default_factory=list)
    url: Optional[String] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["StagedUploadTargetGeneratePayload"]] = Field(
        "StagedUploadTargetGeneratePayload", alias="__typename"
    )


class StagedUploadTargetsGeneratePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    urls: Optional[list[StagedUploadTarget]] = Field(default_factory=list)
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["StagedUploadTargetsGeneratePayload"]] = Field(
        "StagedUploadTargetsGeneratePayload", alias="__typename"
    )


class StagedUploadsCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    staged_targets: Optional[list[StagedMediaUploadTarget]] = Field(default_factory=list, alias="stagedTargets")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["StagedUploadsCreatePayload"]] = Field(
        "StagedUploadsCreatePayload", alias="__typename"
    )


class StandardMetafieldDefinitionEnablePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    created_definition: Optional[MetafieldDefinition] = Field(None, alias="createdDefinition")
    user_errors: list[StandardMetafieldDefinitionEnableUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["StandardMetafieldDefinitionEnablePayload"]] = Field(
        "StandardMetafieldDefinitionEnablePayload", alias="__typename"
    )


class StandardMetafieldDefinitionEnableUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[StandardMetafieldDefinitionEnableUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["StandardMetafieldDefinitionEnableUserError"]] = Field(
        "StandardMetafieldDefinitionEnableUserError", alias="__typename"
    )


class StandardMetafieldDefinitionTemplate(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[String] = None
    id: Optional[ID] = None
    key: Optional[String] = None
    name: Optional[String] = None
    namespace: Optional[String] = None
    owner_types: list[MetafieldOwnerType] = Field(default_factory=list, alias="ownerTypes")
    type: Optional[MetafieldDefinitionType] = None
    validations: list[MetafieldDefinitionValidation] = Field(default_factory=list)
    visible_to_storefront_api: Optional[Boolean] = Field(None, alias="visibleToStorefrontApi")
    typename__: Optional[Literal["StandardMetafieldDefinitionTemplate"]] = Field(
        "StandardMetafieldDefinitionTemplate", alias="__typename"
    )


class StandardMetafieldDefinitionTemplateConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[StandardMetafieldDefinitionTemplateEdge] = Field(default_factory=list)
    nodes: list[StandardMetafieldDefinitionTemplate] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["StandardMetafieldDefinitionTemplateConnection"]] = Field(
        "StandardMetafieldDefinitionTemplateConnection", alias="__typename"
    )


class StandardMetafieldDefinitionTemplateEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[StandardMetafieldDefinitionTemplate] = None
    typename__: Optional[Literal["StandardMetafieldDefinitionTemplateEdge"]] = Field(
        "StandardMetafieldDefinitionTemplateEdge", alias="__typename"
    )


class StandardMetaobjectDefinitionEnablePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    metaobject_definition: Optional[MetaobjectDefinition] = Field(None, alias="metaobjectDefinition")
    user_errors: list[MetaobjectUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["StandardMetaobjectDefinitionEnablePayload"]] = Field(
        "StandardMetaobjectDefinitionEnablePayload", alias="__typename"
    )


class StandardizedProductType(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product_taxonomy_node: Optional[ProductTaxonomyNode] = Field(None, alias="productTaxonomyNode")
    typename__: Optional[Literal["StandardizedProductType"]] = Field("StandardizedProductType", alias="__typename")


class StoreCreditAccount(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    balance: Optional[MoneyV2] = None
    id: Optional[ID] = None
    owner: Optional[HasStoreCreditAccounts] = None
    transactions: Optional[StoreCreditAccountTransactionConnection] = None
    typename__: Optional[Literal["StoreCreditAccount"]] = Field("StoreCreditAccount", alias="__typename")


class StoreCreditAccountConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[StoreCreditAccountEdge] = Field(default_factory=list)
    nodes: list[StoreCreditAccount] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["StoreCreditAccountConnection"]] = Field(
        "StoreCreditAccountConnection", alias="__typename"
    )


class StoreCreditAccountCreditPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    store_credit_account_transaction: Optional[StoreCreditAccountCreditTransaction] = Field(
        None, alias="storeCreditAccountTransaction"
    )
    user_errors: list[StoreCreditAccountCreditUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["StoreCreditAccountCreditPayload"]] = Field(
        "StoreCreditAccountCreditPayload", alias="__typename"
    )


class StoreCreditAccountCreditTransaction(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    account: Optional[StoreCreditAccount] = None
    amount: Optional[MoneyV2] = None
    balance_after_transaction: Optional[MoneyV2] = Field(None, alias="balanceAfterTransaction")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    expires_at: Optional[DateTime] = Field(None, alias="expiresAt")
    id: Optional[ID] = None
    remaining_amount: Optional[MoneyV2] = Field(None, alias="remainingAmount")
    typename__: Optional[Literal["StoreCreditAccountCreditTransaction"]] = Field(
        "StoreCreditAccountCreditTransaction", alias="__typename"
    )


class StoreCreditAccountCreditUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[StoreCreditAccountCreditUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["StoreCreditAccountCreditUserError"]] = Field(
        "StoreCreditAccountCreditUserError", alias="__typename"
    )


class StoreCreditAccountDebitPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    store_credit_account_transaction: Optional[StoreCreditAccountDebitTransaction] = Field(
        None, alias="storeCreditAccountTransaction"
    )
    user_errors: list[StoreCreditAccountDebitUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["StoreCreditAccountDebitPayload"]] = Field(
        "StoreCreditAccountDebitPayload", alias="__typename"
    )


class StoreCreditAccountDebitRevertTransaction(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    account: Optional[StoreCreditAccount] = None
    amount: Optional[MoneyV2] = None
    balance_after_transaction: Optional[MoneyV2] = Field(None, alias="balanceAfterTransaction")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    debit_transaction: Optional[StoreCreditAccountDebitTransaction] = Field(None, alias="debitTransaction")
    id: Optional[ID] = None
    typename__: Optional[Literal["StoreCreditAccountDebitRevertTransaction"]] = Field(
        "StoreCreditAccountDebitRevertTransaction", alias="__typename"
    )


class StoreCreditAccountDebitTransaction(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    account: Optional[StoreCreditAccount] = None
    amount: Optional[MoneyV2] = None
    balance_after_transaction: Optional[MoneyV2] = Field(None, alias="balanceAfterTransaction")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    id: Optional[ID] = None
    typename__: Optional[Literal["StoreCreditAccountDebitTransaction"]] = Field(
        "StoreCreditAccountDebitTransaction", alias="__typename"
    )


class StoreCreditAccountDebitUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[StoreCreditAccountDebitUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["StoreCreditAccountDebitUserError"]] = Field(
        "StoreCreditAccountDebitUserError", alias="__typename"
    )


class StoreCreditAccountEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[StoreCreditAccount] = None
    typename__: Optional[Literal["StoreCreditAccountEdge"]] = Field("StoreCreditAccountEdge", alias="__typename")


class StoreCreditAccountExpirationTransaction(StoreCreditAccountTransaction):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    account: Optional[StoreCreditAccount] = None
    amount: Optional[MoneyV2] = None
    balance_after_transaction: Optional[MoneyV2] = Field(None, alias="balanceAfterTransaction")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    credit_transaction: Optional[StoreCreditAccountCreditTransaction] = Field(None, alias="creditTransaction")
    typename__: Optional[Literal["StoreCreditAccountExpirationTransaction"]] = Field(
        "StoreCreditAccountExpirationTransaction", alias="__typename"
    )


class StoreCreditAccountTransactionConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[StoreCreditAccountTransactionEdge] = Field(default_factory=list)
    nodes: list[StoreCreditAccountTransaction] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["StoreCreditAccountTransactionConnection"]] = Field(
        "StoreCreditAccountTransactionConnection", alias="__typename"
    )


class StoreCreditAccountTransactionEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[StoreCreditAccountTransaction] = None
    typename__: Optional[Literal["StoreCreditAccountTransactionEdge"]] = Field(
        "StoreCreditAccountTransactionEdge", alias="__typename"
    )


class StorefrontAccessToken(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    access_scopes: list[AccessScope] = Field(default_factory=list, alias="accessScopes")
    access_token: Optional[String] = Field(None, alias="accessToken")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    id: Optional[ID] = None
    title: Optional[String] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["StorefrontAccessToken"]] = Field("StorefrontAccessToken", alias="__typename")


class StorefrontAccessTokenConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[StorefrontAccessTokenEdge] = Field(default_factory=list)
    nodes: list[StorefrontAccessToken] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["StorefrontAccessTokenConnection"]] = Field(
        "StorefrontAccessTokenConnection", alias="__typename"
    )


class StorefrontAccessTokenCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    shop: Optional[Shop] = None
    storefront_access_token: Optional[StorefrontAccessToken] = Field(None, alias="storefrontAccessToken")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["StorefrontAccessTokenCreatePayload"]] = Field(
        "StorefrontAccessTokenCreatePayload", alias="__typename"
    )


class StorefrontAccessTokenDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_storefront_access_token_id: Optional[ID] = Field(None, alias="deletedStorefrontAccessTokenId")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["StorefrontAccessTokenDeletePayload"]] = Field(
        "StorefrontAccessTokenDeletePayload", alias="__typename"
    )


class StorefrontAccessTokenEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[StorefrontAccessToken] = None
    typename__: Optional[Literal["StorefrontAccessTokenEdge"]] = Field("StorefrontAccessTokenEdge", alias="__typename")


class StringConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[StringEdge] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["StringConnection"]] = Field("StringConnection", alias="__typename")


class StringEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[String] = None
    typename__: Optional[Literal["StringEdge"]] = Field("StringEdge", alias="__typename")


class SubscriptionAppliedCodeDiscount(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    redeem_code: Optional[String] = Field(None, alias="redeemCode")
    rejection_reason: Optional[SubscriptionDiscountRejectionReason] = Field(None, alias="rejectionReason")
    typename__: Optional[Literal["SubscriptionAppliedCodeDiscount"]] = Field(
        "SubscriptionAppliedCodeDiscount", alias="__typename"
    )


class SubscriptionBillingAttempt(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    completed_at: Optional[DateTime] = Field(None, alias="completedAt")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    error_code: Optional[SubscriptionBillingAttemptErrorCode] = Field(None, alias="errorCode")
    error_message: Optional[String] = Field(None, alias="errorMessage")
    id: Optional[ID] = None
    idempotency_key: Optional[String] = Field(None, alias="idempotencyKey")
    next_action_url: Optional[URL] = Field(None, alias="nextActionUrl")
    order: Optional[Order] = None
    origin_time: Optional[DateTime] = Field(None, alias="originTime")
    ready: Optional[Boolean] = None
    subscription_contract: Optional[SubscriptionContract] = Field(None, alias="subscriptionContract")
    typename__: Optional[Literal["SubscriptionBillingAttempt"]] = Field(
        "SubscriptionBillingAttempt", alias="__typename"
    )


class SubscriptionBillingAttemptConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SubscriptionBillingAttemptEdge] = Field(default_factory=list)
    nodes: list[SubscriptionBillingAttempt] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["SubscriptionBillingAttemptConnection"]] = Field(
        "SubscriptionBillingAttemptConnection", alias="__typename"
    )


class SubscriptionBillingAttemptCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    subscription_billing_attempt: Optional[SubscriptionBillingAttempt] = Field(None, alias="subscriptionBillingAttempt")
    user_errors: list[BillingAttemptUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionBillingAttemptCreatePayload"]] = Field(
        "SubscriptionBillingAttemptCreatePayload", alias="__typename"
    )


class SubscriptionBillingAttemptEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[SubscriptionBillingAttempt] = None
    typename__: Optional[Literal["SubscriptionBillingAttemptEdge"]] = Field(
        "SubscriptionBillingAttemptEdge", alias="__typename"
    )


class SubscriptionBillingCycle(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_attempt_expected_date: Optional[DateTime] = Field(None, alias="billingAttemptExpectedDate")
    billing_attempts: Optional[SubscriptionBillingAttemptConnection] = Field(None, alias="billingAttempts")
    cycle_end_at: Optional[DateTime] = Field(None, alias="cycleEndAt")
    cycle_index: Optional[Int] = Field(None, alias="cycleIndex")
    cycle_start_at: Optional[DateTime] = Field(None, alias="cycleStartAt")
    edited: Optional[Boolean] = None
    edited_contract: Optional[SubscriptionBillingCycleEditedContract] = Field(None, alias="editedContract")
    skipped: Optional[Boolean] = None
    source_contract: Optional[SubscriptionContract] = Field(None, alias="sourceContract")
    status: Optional[SubscriptionBillingCycleBillingCycleStatus] = None
    typename__: Optional[Literal["SubscriptionBillingCycle"]] = Field("SubscriptionBillingCycle", alias="__typename")


class SubscriptionBillingCycleBulkChargePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[SubscriptionBillingCycleBulkUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionBillingCycleBulkChargePayload"]] = Field(
        "SubscriptionBillingCycleBulkChargePayload", alias="__typename"
    )


class SubscriptionBillingCycleBulkSearchPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[SubscriptionBillingCycleBulkUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionBillingCycleBulkSearchPayload"]] = Field(
        "SubscriptionBillingCycleBulkSearchPayload", alias="__typename"
    )


class SubscriptionBillingCycleBulkUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[SubscriptionBillingCycleBulkUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["SubscriptionBillingCycleBulkUserError"]] = Field(
        "SubscriptionBillingCycleBulkUserError", alias="__typename"
    )


class SubscriptionBillingCycleChargePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    subscription_billing_attempt: Optional[SubscriptionBillingAttempt] = Field(None, alias="subscriptionBillingAttempt")
    user_errors: list[BillingAttemptUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionBillingCycleChargePayload"]] = Field(
        "SubscriptionBillingCycleChargePayload", alias="__typename"
    )


class SubscriptionBillingCycleConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SubscriptionBillingCycleEdge] = Field(default_factory=list)
    nodes: list[SubscriptionBillingCycle] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["SubscriptionBillingCycleConnection"]] = Field(
        "SubscriptionBillingCycleConnection", alias="__typename"
    )


class SubscriptionBillingCycleContractDraftCommitPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contract: Optional[SubscriptionBillingCycleEditedContract] = None
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionBillingCycleContractDraftCommitPayload"]] = Field(
        "SubscriptionBillingCycleContractDraftCommitPayload", alias="__typename"
    )


class SubscriptionBillingCycleContractDraftConcatenatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    draft: Optional[SubscriptionDraft] = None
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionBillingCycleContractDraftConcatenatePayload"]] = Field(
        "SubscriptionBillingCycleContractDraftConcatenatePayload", alias="__typename"
    )


class SubscriptionBillingCycleContractEditPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    draft: Optional[SubscriptionDraft] = None
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionBillingCycleContractEditPayload"]] = Field(
        "SubscriptionBillingCycleContractEditPayload", alias="__typename"
    )


class SubscriptionBillingCycleEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[SubscriptionBillingCycle] = None
    typename__: Optional[Literal["SubscriptionBillingCycleEdge"]] = Field(
        "SubscriptionBillingCycleEdge", alias="__typename"
    )


class SubscriptionBillingCycleEditDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_cycles: Optional[list[SubscriptionBillingCycle]] = Field(default_factory=list, alias="billingCycles")
    user_errors: list[SubscriptionBillingCycleUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionBillingCycleEditDeletePayload"]] = Field(
        "SubscriptionBillingCycleEditDeletePayload", alias="__typename"
    )


class SubscriptionBillingCycleEditedContract(SubscriptionContractBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    app_admin_url: Optional[URL] = Field(None, alias="appAdminUrl")
    billing_cycles: Optional[SubscriptionBillingCycleConnection] = Field(None, alias="billingCycles")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    currency_code: Optional[CurrencyCode] = Field(None, alias="currencyCode")
    custom_attributes: list[Attribute] = Field(default_factory=list, alias="customAttributes")
    customer: Optional[Customer] = None
    customer_payment_method: Optional[CustomerPaymentMethod] = Field(None, alias="customerPaymentMethod")
    delivery_method: Optional[SubscriptionDeliveryMethod] = Field(None, alias="deliveryMethod")
    delivery_price: Optional[MoneyV2] = Field(None, alias="deliveryPrice")
    discounts: Optional[SubscriptionManualDiscountConnection] = None
    line_count: Optional[Int] = Field(None, alias="lineCount")
    lines: Optional[SubscriptionLineConnection] = None
    lines_count: Optional[Count] = Field(None, alias="linesCount")
    note: Optional[String] = None
    orders: Optional[OrderConnection] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["SubscriptionBillingCycleEditedContract"]] = Field(
        "SubscriptionBillingCycleEditedContract", alias="__typename"
    )


class SubscriptionBillingCycleEditsDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_cycles: Optional[list[SubscriptionBillingCycle]] = Field(default_factory=list, alias="billingCycles")
    user_errors: list[SubscriptionBillingCycleUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionBillingCycleEditsDeletePayload"]] = Field(
        "SubscriptionBillingCycleEditsDeletePayload", alias="__typename"
    )


class SubscriptionBillingCycleScheduleEditPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_cycle: Optional[SubscriptionBillingCycle] = Field(None, alias="billingCycle")
    user_errors: list[SubscriptionBillingCycleUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionBillingCycleScheduleEditPayload"]] = Field(
        "SubscriptionBillingCycleScheduleEditPayload", alias="__typename"
    )


class SubscriptionBillingCycleSkipPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_cycle: Optional[SubscriptionBillingCycle] = Field(None, alias="billingCycle")
    user_errors: list[SubscriptionBillingCycleSkipUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionBillingCycleSkipPayload"]] = Field(
        "SubscriptionBillingCycleSkipPayload", alias="__typename"
    )


class SubscriptionBillingCycleSkipUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[SubscriptionBillingCycleSkipUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["SubscriptionBillingCycleSkipUserError"]] = Field(
        "SubscriptionBillingCycleSkipUserError", alias="__typename"
    )


class SubscriptionBillingCycleUnskipPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_cycle: Optional[SubscriptionBillingCycle] = Field(None, alias="billingCycle")
    user_errors: list[SubscriptionBillingCycleUnskipUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionBillingCycleUnskipPayload"]] = Field(
        "SubscriptionBillingCycleUnskipPayload", alias="__typename"
    )


class SubscriptionBillingCycleUnskipUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[SubscriptionBillingCycleUnskipUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["SubscriptionBillingCycleUnskipUserError"]] = Field(
        "SubscriptionBillingCycleUnskipUserError", alias="__typename"
    )


class SubscriptionBillingCycleUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[SubscriptionBillingCycleErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["SubscriptionBillingCycleUserError"]] = Field(
        "SubscriptionBillingCycleUserError", alias="__typename"
    )


class SubscriptionBillingPolicy(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    anchors: list[SellingPlanAnchor] = Field(default_factory=list)
    interval: Optional[SellingPlanInterval] = None
    interval_count: Optional[Int] = Field(None, alias="intervalCount")
    max_cycles: Optional[Int] = Field(None, alias="maxCycles")
    min_cycles: Optional[Int] = Field(None, alias="minCycles")
    typename__: Optional[Literal["SubscriptionBillingPolicy"]] = Field("SubscriptionBillingPolicy", alias="__typename")


class SubscriptionContract(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app: Optional[App] = None
    app_admin_url: Optional[URL] = Field(None, alias="appAdminUrl")
    billing_attempts: Optional[SubscriptionBillingAttemptConnection] = Field(None, alias="billingAttempts")
    billing_policy: Optional[SubscriptionBillingPolicy] = Field(None, alias="billingPolicy")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    currency_code: Optional[CurrencyCode] = Field(None, alias="currencyCode")
    custom_attributes: list[Attribute] = Field(default_factory=list, alias="customAttributes")
    customer: Optional[Customer] = None
    customer_payment_method: Optional[CustomerPaymentMethod] = Field(None, alias="customerPaymentMethod")
    delivery_method: Optional[SubscriptionDeliveryMethod] = Field(None, alias="deliveryMethod")
    delivery_policy: Optional[SubscriptionDeliveryPolicy] = Field(None, alias="deliveryPolicy")
    delivery_price: Optional[MoneyV2] = Field(None, alias="deliveryPrice")
    discounts: Optional[SubscriptionManualDiscountConnection] = None
    id: Optional[ID] = None
    last_payment_status: Optional[SubscriptionContractLastPaymentStatus] = Field(None, alias="lastPaymentStatus")
    line_count: Optional[Int] = Field(None, alias="lineCount")
    lines: Optional[SubscriptionLineConnection] = None
    lines_count: Optional[Count] = Field(None, alias="linesCount")
    next_billing_date: Optional[DateTime] = Field(None, alias="nextBillingDate")
    note: Optional[String] = None
    orders: Optional[OrderConnection] = None
    origin_order: Optional[Order] = Field(None, alias="originOrder")
    revision_id: Optional[UnsignedInt64] = Field(None, alias="revisionId")
    status: Optional[SubscriptionContractSubscriptionStatus] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["SubscriptionContract"]] = Field("SubscriptionContract", alias="__typename")


class SubscriptionContractActivatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contract: Optional[SubscriptionContract] = None
    user_errors: list[SubscriptionContractStatusUpdateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionContractActivatePayload"]] = Field(
        "SubscriptionContractActivatePayload", alias="__typename"
    )


class SubscriptionContractAtomicCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contract: Optional[SubscriptionContract] = None
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionContractAtomicCreatePayload"]] = Field(
        "SubscriptionContractAtomicCreatePayload", alias="__typename"
    )


class SubscriptionContractCancelPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contract: Optional[SubscriptionContract] = None
    user_errors: list[SubscriptionContractStatusUpdateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionContractCancelPayload"]] = Field(
        "SubscriptionContractCancelPayload", alias="__typename"
    )


class SubscriptionContractConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SubscriptionContractEdge] = Field(default_factory=list)
    nodes: list[SubscriptionContract] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["SubscriptionContractConnection"]] = Field(
        "SubscriptionContractConnection", alias="__typename"
    )


class SubscriptionContractCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    draft: Optional[SubscriptionDraft] = None
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionContractCreatePayload"]] = Field(
        "SubscriptionContractCreatePayload", alias="__typename"
    )


class SubscriptionContractEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[SubscriptionContract] = None
    typename__: Optional[Literal["SubscriptionContractEdge"]] = Field("SubscriptionContractEdge", alias="__typename")


class SubscriptionContractExpirePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contract: Optional[SubscriptionContract] = None
    user_errors: list[SubscriptionContractStatusUpdateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionContractExpirePayload"]] = Field(
        "SubscriptionContractExpirePayload", alias="__typename"
    )


class SubscriptionContractFailPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contract: Optional[SubscriptionContract] = None
    user_errors: list[SubscriptionContractStatusUpdateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionContractFailPayload"]] = Field(
        "SubscriptionContractFailPayload", alias="__typename"
    )


class SubscriptionContractPausePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contract: Optional[SubscriptionContract] = None
    user_errors: list[SubscriptionContractStatusUpdateUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionContractPausePayload"]] = Field(
        "SubscriptionContractPausePayload", alias="__typename"
    )


class SubscriptionContractProductChangePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contract: Optional[SubscriptionContract] = None
    line_updated: Optional[SubscriptionLine] = Field(None, alias="lineUpdated")
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionContractProductChangePayload"]] = Field(
        "SubscriptionContractProductChangePayload", alias="__typename"
    )


class SubscriptionContractSetNextBillingDatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contract: Optional[SubscriptionContract] = None
    user_errors: list[SubscriptionContractUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionContractSetNextBillingDatePayload"]] = Field(
        "SubscriptionContractSetNextBillingDatePayload", alias="__typename"
    )


class SubscriptionContractStatusUpdateUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[SubscriptionContractStatusUpdateErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["SubscriptionContractStatusUpdateUserError"]] = Field(
        "SubscriptionContractStatusUpdateUserError", alias="__typename"
    )


class SubscriptionContractUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    draft: Optional[SubscriptionDraft] = None
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionContractUpdatePayload"]] = Field(
        "SubscriptionContractUpdatePayload", alias="__typename"
    )


class SubscriptionContractUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[SubscriptionContractErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["SubscriptionContractUserError"]] = Field(
        "SubscriptionContractUserError", alias="__typename"
    )


class SubscriptionCyclePriceAdjustment(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    adjustment_type: Optional[SellingPlanPricingPolicyAdjustmentType] = Field(None, alias="adjustmentType")
    adjustment_value: Optional[SellingPlanPricingPolicyAdjustmentValue] = Field(None, alias="adjustmentValue")
    after_cycle: Optional[Int] = Field(None, alias="afterCycle")
    computed_price: Optional[MoneyV2] = Field(None, alias="computedPrice")
    typename__: Optional[Literal["SubscriptionCyclePriceAdjustment"]] = Field(
        "SubscriptionCyclePriceAdjustment", alias="__typename"
    )


class SubscriptionDeliveryMethodLocalDelivery(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address: Optional[SubscriptionMailingAddress] = None
    local_delivery_option: Optional[SubscriptionDeliveryMethodLocalDeliveryOption] = Field(
        None, alias="localDeliveryOption"
    )
    typename__: Optional[Literal["SubscriptionDeliveryMethodLocalDelivery"]] = Field(
        "SubscriptionDeliveryMethodLocalDelivery", alias="__typename"
    )


class SubscriptionDeliveryMethodLocalDeliveryOption(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[String] = None
    description: Optional[String] = None
    instructions: Optional[String] = None
    phone: Optional[String] = None
    presentment_title: Optional[String] = Field(None, alias="presentmentTitle")
    title: Optional[String] = None
    typename__: Optional[Literal["SubscriptionDeliveryMethodLocalDeliveryOption"]] = Field(
        "SubscriptionDeliveryMethodLocalDeliveryOption", alias="__typename"
    )


class SubscriptionDeliveryMethodPickup(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    pickup_option: Optional[SubscriptionDeliveryMethodPickupOption] = Field(None, alias="pickupOption")
    typename__: Optional[Literal["SubscriptionDeliveryMethodPickup"]] = Field(
        "SubscriptionDeliveryMethodPickup", alias="__typename"
    )


class SubscriptionDeliveryMethodPickupOption(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[String] = None
    description: Optional[String] = None
    location: Optional[Location] = None
    presentment_title: Optional[String] = Field(None, alias="presentmentTitle")
    title: Optional[String] = None
    typename__: Optional[Literal["SubscriptionDeliveryMethodPickupOption"]] = Field(
        "SubscriptionDeliveryMethodPickupOption", alias="__typename"
    )


class SubscriptionDeliveryMethodShipping(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address: Optional[SubscriptionMailingAddress] = None
    shipping_option: Optional[SubscriptionDeliveryMethodShippingOption] = Field(None, alias="shippingOption")
    typename__: Optional[Literal["SubscriptionDeliveryMethodShipping"]] = Field(
        "SubscriptionDeliveryMethodShipping", alias="__typename"
    )


class SubscriptionDeliveryMethodShippingOption(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    carrier_service: Optional[DeliveryCarrierService] = Field(None, alias="carrierService")
    code: Optional[String] = None
    description: Optional[String] = None
    presentment_title: Optional[String] = Field(None, alias="presentmentTitle")
    title: Optional[String] = None
    typename__: Optional[Literal["SubscriptionDeliveryMethodShippingOption"]] = Field(
        "SubscriptionDeliveryMethodShippingOption", alias="__typename"
    )


class SubscriptionDeliveryOptionResultFailure(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    message: Optional[String] = None
    typename__: Optional[Literal["SubscriptionDeliveryOptionResultFailure"]] = Field(
        "SubscriptionDeliveryOptionResultFailure", alias="__typename"
    )


class SubscriptionDeliveryOptionResultSuccess(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    delivery_options: list[SubscriptionDeliveryOption] = Field(default_factory=list, alias="deliveryOptions")
    typename__: Optional[Literal["SubscriptionDeliveryOptionResultSuccess"]] = Field(
        "SubscriptionDeliveryOptionResultSuccess", alias="__typename"
    )


class SubscriptionDeliveryPolicy(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    anchors: list[SellingPlanAnchor] = Field(default_factory=list)
    interval: Optional[SellingPlanInterval] = None
    interval_count: Optional[Int] = Field(None, alias="intervalCount")
    typename__: Optional[Literal["SubscriptionDeliveryPolicy"]] = Field(
        "SubscriptionDeliveryPolicy", alias="__typename"
    )


class SubscriptionDiscountAllocation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[MoneyV2] = None
    discount: Optional[SubscriptionDiscount] = None
    typename__: Optional[Literal["SubscriptionDiscountAllocation"]] = Field(
        "SubscriptionDiscountAllocation", alias="__typename"
    )


class SubscriptionDiscountConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SubscriptionDiscountEdge] = Field(default_factory=list)
    nodes: list[SubscriptionDiscount] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["SubscriptionDiscountConnection"]] = Field(
        "SubscriptionDiscountConnection", alias="__typename"
    )


class SubscriptionDiscountEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[SubscriptionDiscount] = None
    typename__: Optional[Literal["SubscriptionDiscountEdge"]] = Field("SubscriptionDiscountEdge", alias="__typename")


class SubscriptionDiscountEntitledLines(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    all: Optional[Boolean] = None
    lines: Optional[SubscriptionLineConnection] = None
    typename__: Optional[Literal["SubscriptionDiscountEntitledLines"]] = Field(
        "SubscriptionDiscountEntitledLines", alias="__typename"
    )


class SubscriptionDiscountFixedAmountValue(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[MoneyV2] = None
    applies_on_each_item: Optional[Boolean] = Field(None, alias="appliesOnEachItem")
    typename__: Optional[Literal["SubscriptionDiscountFixedAmountValue"]] = Field(
        "SubscriptionDiscountFixedAmountValue", alias="__typename"
    )


class SubscriptionDiscountPercentageValue(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    percentage: Optional[Int] = None
    typename__: Optional[Literal["SubscriptionDiscountPercentageValue"]] = Field(
        "SubscriptionDiscountPercentageValue", alias="__typename"
    )


class SubscriptionDraft(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_cycle: Optional[SubscriptionBillingCycle] = Field(None, alias="billingCycle")
    billing_policy: Optional[SubscriptionBillingPolicy] = Field(None, alias="billingPolicy")
    concatenated_billing_cycles: Optional[SubscriptionBillingCycleConnection] = Field(
        None, alias="concatenatedBillingCycles"
    )
    currency_code: Optional[CurrencyCode] = Field(None, alias="currencyCode")
    custom_attributes: list[Attribute] = Field(default_factory=list, alias="customAttributes")
    customer: Optional[Customer] = None
    customer_payment_method: Optional[CustomerPaymentMethod] = Field(None, alias="customerPaymentMethod")
    delivery_method: Optional[SubscriptionDeliveryMethod] = Field(None, alias="deliveryMethod")
    delivery_options: Optional[SubscriptionDeliveryOptionResult] = Field(None, alias="deliveryOptions")
    delivery_policy: Optional[SubscriptionDeliveryPolicy] = Field(None, alias="deliveryPolicy")
    delivery_price: Optional[MoneyV2] = Field(None, alias="deliveryPrice")
    discounts: Optional[SubscriptionDiscountConnection] = None
    discounts_added: Optional[SubscriptionDiscountConnection] = Field(None, alias="discountsAdded")
    discounts_removed: Optional[SubscriptionDiscountConnection] = Field(None, alias="discountsRemoved")
    discounts_updated: Optional[SubscriptionDiscountConnection] = Field(None, alias="discountsUpdated")
    id: Optional[ID] = None
    lines: Optional[SubscriptionLineConnection] = None
    lines_added: Optional[SubscriptionLineConnection] = Field(None, alias="linesAdded")
    lines_removed: Optional[SubscriptionLineConnection] = Field(None, alias="linesRemoved")
    next_billing_date: Optional[DateTime] = Field(None, alias="nextBillingDate")
    note: Optional[String] = None
    original_contract: Optional[SubscriptionContract] = Field(None, alias="originalContract")
    shipping_options: Optional[SubscriptionShippingOptionResult] = Field(None, alias="shippingOptions")
    status: Optional[SubscriptionContractSubscriptionStatus] = None
    typename__: Optional[Literal["SubscriptionDraft"]] = Field("SubscriptionDraft", alias="__typename")


class SubscriptionDraftCommitPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contract: Optional[SubscriptionContract] = None
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionDraftCommitPayload"]] = Field(
        "SubscriptionDraftCommitPayload", alias="__typename"
    )


class SubscriptionDraftDiscountAddPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    discount_added: Optional[SubscriptionManualDiscount] = Field(None, alias="discountAdded")
    draft: Optional[SubscriptionDraft] = None
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionDraftDiscountAddPayload"]] = Field(
        "SubscriptionDraftDiscountAddPayload", alias="__typename"
    )


class SubscriptionDraftDiscountCodeApplyPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applied_discount: Optional[SubscriptionAppliedCodeDiscount] = Field(None, alias="appliedDiscount")
    draft: Optional[SubscriptionDraft] = None
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionDraftDiscountCodeApplyPayload"]] = Field(
        "SubscriptionDraftDiscountCodeApplyPayload", alias="__typename"
    )


class SubscriptionDraftDiscountRemovePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    discount_removed: Optional[SubscriptionDiscount] = Field(None, alias="discountRemoved")
    draft: Optional[SubscriptionDraft] = None
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionDraftDiscountRemovePayload"]] = Field(
        "SubscriptionDraftDiscountRemovePayload", alias="__typename"
    )


class SubscriptionDraftDiscountUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    discount_updated: Optional[SubscriptionManualDiscount] = Field(None, alias="discountUpdated")
    draft: Optional[SubscriptionDraft] = None
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionDraftDiscountUpdatePayload"]] = Field(
        "SubscriptionDraftDiscountUpdatePayload", alias="__typename"
    )


class SubscriptionDraftFreeShippingDiscountAddPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    discount_added: Optional[SubscriptionManualDiscount] = Field(None, alias="discountAdded")
    draft: Optional[SubscriptionDraft] = None
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionDraftFreeShippingDiscountAddPayload"]] = Field(
        "SubscriptionDraftFreeShippingDiscountAddPayload", alias="__typename"
    )


class SubscriptionDraftFreeShippingDiscountUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    discount_updated: Optional[SubscriptionManualDiscount] = Field(None, alias="discountUpdated")
    draft: Optional[SubscriptionDraft] = None
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionDraftFreeShippingDiscountUpdatePayload"]] = Field(
        "SubscriptionDraftFreeShippingDiscountUpdatePayload", alias="__typename"
    )


class SubscriptionDraftLineAddPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    draft: Optional[SubscriptionDraft] = None
    line_added: Optional[SubscriptionLine] = Field(None, alias="lineAdded")
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionDraftLineAddPayload"]] = Field(
        "SubscriptionDraftLineAddPayload", alias="__typename"
    )


class SubscriptionDraftLineRemovePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    discounts_updated: Optional[list[SubscriptionManualDiscount]] = Field(
        default_factory=list, alias="discountsUpdated"
    )
    draft: Optional[SubscriptionDraft] = None
    line_removed: Optional[SubscriptionLine] = Field(None, alias="lineRemoved")
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionDraftLineRemovePayload"]] = Field(
        "SubscriptionDraftLineRemovePayload", alias="__typename"
    )


class SubscriptionDraftLineUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    draft: Optional[SubscriptionDraft] = None
    line_updated: Optional[SubscriptionLine] = Field(None, alias="lineUpdated")
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionDraftLineUpdatePayload"]] = Field(
        "SubscriptionDraftLineUpdatePayload", alias="__typename"
    )


class SubscriptionDraftUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    draft: Optional[SubscriptionDraft] = None
    user_errors: list[SubscriptionDraftUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["SubscriptionDraftUpdatePayload"]] = Field(
        "SubscriptionDraftUpdatePayload", alias="__typename"
    )


class SubscriptionDraftUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[SubscriptionDraftErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["SubscriptionDraftUserError"]] = Field(
        "SubscriptionDraftUserError", alias="__typename"
    )


class SubscriptionLine(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    current_price: Optional[MoneyV2] = Field(None, alias="currentPrice")
    custom_attributes: list[Attribute] = Field(default_factory=list, alias="customAttributes")
    discount_allocations: list[SubscriptionDiscountAllocation] = Field(
        default_factory=list, alias="discountAllocations"
    )
    id: Optional[ID] = None
    line_discounted_price: Optional[MoneyV2] = Field(None, alias="lineDiscountedPrice")
    pricing_policy: Optional[SubscriptionPricingPolicy] = Field(None, alias="pricingPolicy")
    product_id: Optional[ID] = Field(None, alias="productId")
    quantity: Optional[Int] = None
    requires_shipping: Optional[Boolean] = Field(None, alias="requiresShipping")
    selling_plan_id: Optional[ID] = Field(None, alias="sellingPlanId")
    selling_plan_name: Optional[String] = Field(None, alias="sellingPlanName")
    sku: Optional[String] = None
    taxable: Optional[Boolean] = None
    title: Optional[String] = None
    variant_id: Optional[ID] = Field(None, alias="variantId")
    variant_image: Optional[Image] = Field(None, alias="variantImage")
    variant_title: Optional[String] = Field(None, alias="variantTitle")
    typename__: Optional[Literal["SubscriptionLine"]] = Field("SubscriptionLine", alias="__typename")


class SubscriptionLineConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SubscriptionLineEdge] = Field(default_factory=list)
    nodes: list[SubscriptionLine] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["SubscriptionLineConnection"]] = Field(
        "SubscriptionLineConnection", alias="__typename"
    )


class SubscriptionLineEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[SubscriptionLine] = None
    typename__: Optional[Literal["SubscriptionLineEdge"]] = Field("SubscriptionLineEdge", alias="__typename")


class SubscriptionLocalDeliveryOption(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[String] = None
    description: Optional[String] = None
    phone_required: Optional[Boolean] = Field(None, alias="phoneRequired")
    presentment_title: Optional[String] = Field(None, alias="presentmentTitle")
    price: Optional[MoneyV2] = None
    title: Optional[String] = None
    typename__: Optional[Literal["SubscriptionLocalDeliveryOption"]] = Field(
        "SubscriptionLocalDeliveryOption", alias="__typename"
    )


class SubscriptionMailingAddress(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    address2: Optional[String] = None
    city: Optional[String] = None
    company: Optional[String] = None
    country: Optional[String] = None
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    first_name: Optional[String] = Field(None, alias="firstName")
    last_name: Optional[String] = Field(None, alias="lastName")
    name: Optional[String] = None
    phone: Optional[String] = None
    province: Optional[String] = None
    province_code: Optional[String] = Field(None, alias="provinceCode")
    zip: Optional[String] = None
    typename__: Optional[Literal["SubscriptionMailingAddress"]] = Field(
        "SubscriptionMailingAddress", alias="__typename"
    )


class SubscriptionManualDiscount(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    entitled_lines: Optional[SubscriptionDiscountEntitledLines] = Field(None, alias="entitledLines")
    id: Optional[ID] = None
    recurring_cycle_limit: Optional[Int] = Field(None, alias="recurringCycleLimit")
    rejection_reason: Optional[SubscriptionDiscountRejectionReason] = Field(None, alias="rejectionReason")
    target_type: Optional[DiscountTargetType] = Field(None, alias="targetType")
    title: Optional[String] = None
    type: Optional[DiscountType] = None
    usage_count: Optional[Int] = Field(None, alias="usageCount")
    value: Optional[SubscriptionDiscountValue] = None
    typename__: Optional[Literal["SubscriptionManualDiscount"]] = Field(
        "SubscriptionManualDiscount", alias="__typename"
    )


class SubscriptionManualDiscountConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[SubscriptionManualDiscountEdge] = Field(default_factory=list)
    nodes: list[SubscriptionManualDiscount] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["SubscriptionManualDiscountConnection"]] = Field(
        "SubscriptionManualDiscountConnection", alias="__typename"
    )


class SubscriptionManualDiscountEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[SubscriptionManualDiscount] = None
    typename__: Optional[Literal["SubscriptionManualDiscountEdge"]] = Field(
        "SubscriptionManualDiscountEdge", alias="__typename"
    )


class SubscriptionPickupOption(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[String] = None
    description: Optional[String] = None
    location: Optional[Location] = None
    phone_required: Optional[Boolean] = Field(None, alias="phoneRequired")
    pickup_time: Optional[String] = Field(None, alias="pickupTime")
    presentment_title: Optional[String] = Field(None, alias="presentmentTitle")
    price: Optional[MoneyV2] = None
    title: Optional[String] = None
    typename__: Optional[Literal["SubscriptionPickupOption"]] = Field("SubscriptionPickupOption", alias="__typename")


class SubscriptionPricingPolicy(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    base_price: Optional[MoneyV2] = Field(None, alias="basePrice")
    cycle_discounts: list[SubscriptionCyclePriceAdjustment] = Field(default_factory=list, alias="cycleDiscounts")
    typename__: Optional[Literal["SubscriptionPricingPolicy"]] = Field("SubscriptionPricingPolicy", alias="__typename")


class SubscriptionShippingOption(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    carrier_service: Optional[DeliveryCarrierService] = Field(None, alias="carrierService")
    code: Optional[String] = None
    description: Optional[String] = None
    phone_required: Optional[Boolean] = Field(None, alias="phoneRequired")
    presentment_title: Optional[String] = Field(None, alias="presentmentTitle")
    price: Optional[MoneyV2] = None
    title: Optional[String] = None
    typename__: Optional[Literal["SubscriptionShippingOption"]] = Field(
        "SubscriptionShippingOption", alias="__typename"
    )


class SubscriptionShippingOptionResultFailure(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    message: Optional[String] = None
    typename__: Optional[Literal["SubscriptionShippingOptionResultFailure"]] = Field(
        "SubscriptionShippingOptionResultFailure", alias="__typename"
    )


class SubscriptionShippingOptionResultSuccess(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    shipping_options: list[SubscriptionShippingOption] = Field(default_factory=list, alias="shippingOptions")
    typename__: Optional[Literal["SubscriptionShippingOptionResultSuccess"]] = Field(
        "SubscriptionShippingOptionResultSuccess", alias="__typename"
    )


class SuggestedOrderTransaction(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    account_number: Optional[String] = Field(None, alias="accountNumber")
    amount: Optional[Money] = None
    amount_set: Optional[MoneyBag] = Field(None, alias="amountSet")
    formatted_gateway: Optional[String] = Field(None, alias="formattedGateway")
    gateway: Optional[String] = None
    kind: Optional[SuggestedOrderTransactionKind] = None
    maximum_refundable: Optional[Money] = Field(None, alias="maximumRefundable")
    maximum_refundable_set: Optional[MoneyBag] = Field(None, alias="maximumRefundableSet")
    parent_transaction: Optional[OrderTransaction] = Field(None, alias="parentTransaction")
    payment_details: Optional[PaymentDetails] = Field(None, alias="paymentDetails")
    typename__: Optional[Literal["SuggestedOrderTransaction"]] = Field("SuggestedOrderTransaction", alias="__typename")


class SuggestedRefund(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[Money] = None
    amount_set: Optional[MoneyBag] = Field(None, alias="amountSet")
    discounted_subtotal_set: Optional[MoneyBag] = Field(None, alias="discountedSubtotalSet")
    maximum_refundable: Optional[Money] = Field(None, alias="maximumRefundable")
    maximum_refundable_set: Optional[MoneyBag] = Field(None, alias="maximumRefundableSet")
    refund_duties: list[RefundDuty] = Field(default_factory=list, alias="refundDuties")
    refund_line_items: list[RefundLineItem] = Field(default_factory=list, alias="refundLineItems")
    shipping: Optional[ShippingRefund] = None
    subtotal: Optional[Money] = None
    subtotal_set: Optional[MoneyBag] = Field(None, alias="subtotalSet")
    suggested_transactions: list[SuggestedOrderTransaction] = Field(default_factory=list, alias="suggestedTransactions")
    total_cart_discount_amount_set: Optional[MoneyBag] = Field(None, alias="totalCartDiscountAmountSet")
    total_duties_set: Optional[MoneyBag] = Field(None, alias="totalDutiesSet")
    total_tax_set: Optional[MoneyBag] = Field(None, alias="totalTaxSet")
    total_taxes: Optional[Money] = Field(None, alias="totalTaxes")
    typename__: Optional[Literal["SuggestedRefund"]] = Field("SuggestedRefund", alias="__typename")


class SuggestedReturnRefund(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[MoneyBag] = None
    discounted_subtotal: Optional[MoneyBag] = Field(None, alias="discountedSubtotal")
    maximum_refundable: Optional[MoneyBag] = Field(None, alias="maximumRefundable")
    refund_duties: list[RefundDuty] = Field(default_factory=list, alias="refundDuties")
    shipping: Optional[ShippingRefund] = None
    subtotal: Optional[MoneyBag] = None
    suggested_transactions: list[SuggestedOrderTransaction] = Field(default_factory=list, alias="suggestedTransactions")
    total_cart_discount_amount: Optional[MoneyBag] = Field(None, alias="totalCartDiscountAmount")
    total_duties: Optional[MoneyBag] = Field(None, alias="totalDuties")
    total_tax: Optional[MoneyBag] = Field(None, alias="totalTax")
    typename__: Optional[Literal["SuggestedReturnRefund"]] = Field("SuggestedReturnRefund", alias="__typename")


class TagsAddPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    node: Optional[Node] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["TagsAddPayload"]] = Field("TagsAddPayload", alias="__typename")


class TagsRemovePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    node: Optional[Node] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["TagsRemovePayload"]] = Field("TagsRemovePayload", alias="__typename")


class TaxAppConfiguration(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    state: Optional[TaxPartnerState] = None
    typename__: Optional[Literal["TaxAppConfiguration"]] = Field("TaxAppConfiguration", alias="__typename")


class TaxAppConfigurePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    tax_app_configuration: Optional[TaxAppConfiguration] = Field(None, alias="taxAppConfiguration")
    user_errors: list[TaxAppConfigureUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["TaxAppConfigurePayload"]] = Field("TaxAppConfigurePayload", alias="__typename")


class TaxAppConfigureUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[TaxAppConfigureUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["TaxAppConfigureUserError"]] = Field("TaxAppConfigureUserError", alias="__typename")


class TaxLine(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    channel_liable: Optional[Boolean] = Field(None, alias="channelLiable")
    price: Optional[Money] = None
    price_set: Optional[MoneyBag] = Field(None, alias="priceSet")
    rate: Optional[Float] = None
    rate_percentage: Optional[Float] = Field(None, alias="ratePercentage")
    title: Optional[String] = None
    typename__: Optional[Literal["TaxLine"]] = Field("TaxLine", alias="__typename")


class Taxonomy(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    categories: Optional[TaxonomyCategoryConnection] = None
    typename__: Optional[Literal["Taxonomy"]] = Field("Taxonomy", alias="__typename")


class TaxonomyAttribute(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    typename__: Optional[Literal["TaxonomyAttribute"]] = Field("TaxonomyAttribute", alias="__typename")


class TaxonomyCategory(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ancestor_ids: list[ID] = Field(default_factory=list, alias="ancestorIds")
    attributes: Optional[TaxonomyCategoryAttributeConnection] = None
    children_ids: list[ID] = Field(default_factory=list, alias="childrenIds")
    full_name: Optional[String] = Field(None, alias="fullName")
    id: Optional[ID] = None
    is_archived: Optional[Boolean] = Field(None, alias="isArchived")
    is_leaf: Optional[Boolean] = Field(None, alias="isLeaf")
    is_root: Optional[Boolean] = Field(None, alias="isRoot")
    level: Optional[Int] = None
    name: Optional[String] = None
    parent_id: Optional[ID] = Field(None, alias="parentId")
    typename__: Optional[Literal["TaxonomyCategory"]] = Field("TaxonomyCategory", alias="__typename")


class TaxonomyCategoryAttributeConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[TaxonomyCategoryAttributeEdge] = Field(default_factory=list)
    nodes: list[TaxonomyCategoryAttribute] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["TaxonomyCategoryAttributeConnection"]] = Field(
        "TaxonomyCategoryAttributeConnection", alias="__typename"
    )


class TaxonomyCategoryAttributeEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[TaxonomyCategoryAttribute] = None
    typename__: Optional[Literal["TaxonomyCategoryAttributeEdge"]] = Field(
        "TaxonomyCategoryAttributeEdge", alias="__typename"
    )


class TaxonomyCategoryConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[TaxonomyCategoryEdge] = Field(default_factory=list)
    nodes: list[TaxonomyCategory] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["TaxonomyCategoryConnection"]] = Field(
        "TaxonomyCategoryConnection", alias="__typename"
    )


class TaxonomyCategoryEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[TaxonomyCategory] = None
    typename__: Optional[Literal["TaxonomyCategoryEdge"]] = Field("TaxonomyCategoryEdge", alias="__typename")


class TaxonomyChoiceListAttribute(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    name: Optional[String] = None
    values: Optional[TaxonomyValueConnection] = None
    typename__: Optional[Literal["TaxonomyChoiceListAttribute"]] = Field(
        "TaxonomyChoiceListAttribute", alias="__typename"
    )


class TaxonomyMeasurementAttribute(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    name: Optional[String] = None
    options: list[Attribute] = Field(default_factory=list)
    typename__: Optional[Literal["TaxonomyMeasurementAttribute"]] = Field(
        "TaxonomyMeasurementAttribute", alias="__typename"
    )


class TaxonomyValue(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    name: Optional[String] = None
    typename__: Optional[Literal["TaxonomyValue"]] = Field("TaxonomyValue", alias="__typename")


class TaxonomyValueConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[TaxonomyValueEdge] = Field(default_factory=list)
    nodes: list[TaxonomyValue] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["TaxonomyValueConnection"]] = Field("TaxonomyValueConnection", alias="__typename")


class TaxonomyValueEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[TaxonomyValue] = None
    typename__: Optional[Literal["TaxonomyValueEdge"]] = Field("TaxonomyValueEdge", alias="__typename")


class TenderTransaction(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[MoneyV2] = None
    id: Optional[ID] = None
    payment_method: Optional[String] = Field(None, alias="paymentMethod")
    processed_at: Optional[DateTime] = Field(None, alias="processedAt")
    remote_reference: Optional[String] = Field(None, alias="remoteReference")
    test: Optional[Boolean] = None
    transaction_details: Optional[TenderTransactionDetails] = Field(None, alias="transactionDetails")
    user: Optional[StaffMember] = None
    typename__: Optional[Literal["TenderTransaction"]] = Field("TenderTransaction", alias="__typename")


class TenderTransactionConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[TenderTransactionEdge] = Field(default_factory=list)
    nodes: list[TenderTransaction] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["TenderTransactionConnection"]] = Field(
        "TenderTransactionConnection", alias="__typename"
    )


class TenderTransactionCreditCardDetails(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credit_card_company: Optional[String] = Field(None, alias="creditCardCompany")
    credit_card_number: Optional[String] = Field(None, alias="creditCardNumber")
    typename__: Optional[Literal["TenderTransactionCreditCardDetails"]] = Field(
        "TenderTransactionCreditCardDetails", alias="__typename"
    )


class TenderTransactionEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[TenderTransaction] = None
    typename__: Optional[Literal["TenderTransactionEdge"]] = Field("TenderTransactionEdge", alias="__typename")


class TipSale(Sale):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    action_type: Optional[SaleActionType] = Field(None, alias="actionType")
    id: Optional[ID] = None
    line_item: Optional[LineItem] = Field(None, alias="lineItem")
    line_type: Optional[SaleLineType] = Field(None, alias="lineType")
    quantity: Optional[Int] = None
    taxes: list[SaleTax] = Field(default_factory=list)
    total_amount: Optional[MoneyBag] = Field(None, alias="totalAmount")
    total_discount_amount_after_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountAfterTaxes")
    total_discount_amount_before_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountBeforeTaxes")
    total_tax_amount: Optional[MoneyBag] = Field(None, alias="totalTaxAmount")
    typename__: Optional[Literal["TipSale"]] = Field("TipSale", alias="__typename")


class TransactionFee(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[MoneyV2] = None
    flat_fee: Optional[MoneyV2] = Field(None, alias="flatFee")
    flat_fee_name: Optional[String] = Field(None, alias="flatFeeName")
    id: Optional[ID] = None
    rate: Optional[Decimal] = None
    rate_name: Optional[String] = Field(None, alias="rateName")
    tax_amount: Optional[MoneyV2] = Field(None, alias="taxAmount")
    type: Optional[String] = None
    typename__: Optional[Literal["TransactionFee"]] = Field("TransactionFee", alias="__typename")


class TransactionVoidPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    transaction: Optional[OrderTransaction] = None
    user_errors: list[TransactionVoidUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["TransactionVoidPayload"]] = Field("TransactionVoidPayload", alias="__typename")


class TransactionVoidUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[TransactionVoidUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["TransactionVoidUserError"]] = Field("TransactionVoidUserError", alias="__typename")


class TranslatableContent(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    digest: Optional[String] = None
    key: Optional[String] = None
    locale: Optional[String] = None
    type: Optional[LocalizableContentType] = None
    value: Optional[String] = None
    typename__: Optional[Literal["TranslatableContent"]] = Field("TranslatableContent", alias="__typename")


class TranslatableResource(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource_id: Optional[ID] = Field(None, alias="resourceId")
    translatable_content: list[TranslatableContent] = Field(default_factory=list, alias="translatableContent")
    translations: list[Translation] = Field(default_factory=list)
    typename__: Optional[Literal["TranslatableResource"]] = Field("TranslatableResource", alias="__typename")


class TranslatableResourceConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[TranslatableResourceEdge] = Field(default_factory=list)
    nodes: list[TranslatableResource] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["TranslatableResourceConnection"]] = Field(
        "TranslatableResourceConnection", alias="__typename"
    )


class TranslatableResourceEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[TranslatableResource] = None
    typename__: Optional[Literal["TranslatableResourceEdge"]] = Field("TranslatableResourceEdge", alias="__typename")


class Translation(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    locale: Optional[String] = None
    market: Optional[Market] = None
    outdated: Optional[Boolean] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    value: Optional[String] = None
    typename__: Optional[Literal["Translation"]] = Field("Translation", alias="__typename")


class TranslationUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[TranslationErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["TranslationUserError"]] = Field("TranslationUserError", alias="__typename")


class TranslationsRegisterPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    translations: Optional[list[Translation]] = Field(default_factory=list)
    user_errors: list[TranslationUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["TranslationsRegisterPayload"]] = Field(
        "TranslationsRegisterPayload", alias="__typename"
    )


class TranslationsRemovePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    translations: Optional[list[Translation]] = Field(default_factory=list)
    user_errors: list[TranslationUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["TranslationsRemovePayload"]] = Field("TranslationsRemovePayload", alias="__typename")


class TypedAttribute(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["TypedAttribute"]] = Field("TypedAttribute", alias="__typename")


class UTMParameters(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    campaign: Optional[String] = None
    content: Optional[String] = None
    medium: Optional[String] = None
    source: Optional[String] = None
    term: Optional[String] = None
    typename__: Optional[Literal["UTMParameters"]] = Field("UTMParameters", alias="__typename")


class UnknownSale(Sale):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    action_type: Optional[SaleActionType] = Field(None, alias="actionType")
    id: Optional[ID] = None
    line_type: Optional[SaleLineType] = Field(None, alias="lineType")
    quantity: Optional[Int] = None
    taxes: list[SaleTax] = Field(default_factory=list)
    total_amount: Optional[MoneyBag] = Field(None, alias="totalAmount")
    total_discount_amount_after_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountAfterTaxes")
    total_discount_amount_before_taxes: Optional[MoneyBag] = Field(None, alias="totalDiscountAmountBeforeTaxes")
    total_tax_amount: Optional[MoneyBag] = Field(None, alias="totalTaxAmount")
    typename__: Optional[Literal["UnknownSale"]] = Field("UnknownSale", alias="__typename")


class UnverifiedReturnLineItem(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_note: Optional[String] = Field(None, alias="customerNote")
    id: Optional[ID] = None
    quantity: Optional[Int] = None
    refundable_quantity: Optional[Int] = Field(None, alias="refundableQuantity")
    refunded_quantity: Optional[Int] = Field(None, alias="refundedQuantity")
    return_reason: Optional[ReturnReason] = Field(None, alias="returnReason")
    return_reason_note: Optional[String] = Field(None, alias="returnReasonNote")
    unit_price: Optional[MoneyV2] = Field(None, alias="unitPrice")
    typename__: Optional[Literal["UnverifiedReturnLineItem"]] = Field("UnverifiedReturnLineItem", alias="__typename")


class UrlRedirect(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    path: Optional[String] = None
    target: Optional[String] = None
    typename__: Optional[Literal["UrlRedirect"]] = Field("UrlRedirect", alias="__typename")


class UrlRedirectBulkDeleteAllPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["UrlRedirectBulkDeleteAllPayload"]] = Field(
        "UrlRedirectBulkDeleteAllPayload", alias="__typename"
    )


class UrlRedirectBulkDeleteByIdsPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[UrlRedirectBulkDeleteByIdsUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["UrlRedirectBulkDeleteByIdsPayload"]] = Field(
        "UrlRedirectBulkDeleteByIdsPayload", alias="__typename"
    )


class UrlRedirectBulkDeleteByIdsUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[UrlRedirectBulkDeleteByIdsUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["UrlRedirectBulkDeleteByIdsUserError"]] = Field(
        "UrlRedirectBulkDeleteByIdsUserError", alias="__typename"
    )


class UrlRedirectBulkDeleteBySavedSearchPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[UrlRedirectBulkDeleteBySavedSearchUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["UrlRedirectBulkDeleteBySavedSearchPayload"]] = Field(
        "UrlRedirectBulkDeleteBySavedSearchPayload", alias="__typename"
    )


class UrlRedirectBulkDeleteBySavedSearchUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[UrlRedirectBulkDeleteBySavedSearchUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["UrlRedirectBulkDeleteBySavedSearchUserError"]] = Field(
        "UrlRedirectBulkDeleteBySavedSearchUserError", alias="__typename"
    )


class UrlRedirectBulkDeleteBySearchPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[UrlRedirectBulkDeleteBySearchUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["UrlRedirectBulkDeleteBySearchPayload"]] = Field(
        "UrlRedirectBulkDeleteBySearchPayload", alias="__typename"
    )


class UrlRedirectBulkDeleteBySearchUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[UrlRedirectBulkDeleteBySearchUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["UrlRedirectBulkDeleteBySearchUserError"]] = Field(
        "UrlRedirectBulkDeleteBySearchUserError", alias="__typename"
    )


class UrlRedirectConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[UrlRedirectEdge] = Field(default_factory=list)
    nodes: list[UrlRedirect] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["UrlRedirectConnection"]] = Field("UrlRedirectConnection", alias="__typename")


class UrlRedirectCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    url_redirect: Optional[UrlRedirect] = Field(None, alias="urlRedirect")
    user_errors: list[UrlRedirectUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["UrlRedirectCreatePayload"]] = Field("UrlRedirectCreatePayload", alias="__typename")


class UrlRedirectDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_url_redirect_id: Optional[ID] = Field(None, alias="deletedUrlRedirectId")
    user_errors: list[UrlRedirectUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["UrlRedirectDeletePayload"]] = Field("UrlRedirectDeletePayload", alias="__typename")


class UrlRedirectEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[UrlRedirect] = None
    typename__: Optional[Literal["UrlRedirectEdge"]] = Field("UrlRedirectEdge", alias="__typename")


class UrlRedirectImport(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    count: Optional[Int] = None
    created_count: Optional[Int] = Field(None, alias="createdCount")
    failed_count: Optional[Int] = Field(None, alias="failedCount")
    finished: Optional[Boolean] = None
    finished_at: Optional[DateTime] = Field(None, alias="finishedAt")
    id: Optional[ID] = None
    preview_redirects: list[UrlRedirectImportPreview] = Field(default_factory=list, alias="previewRedirects")
    updated_count: Optional[Int] = Field(None, alias="updatedCount")
    typename__: Optional[Literal["UrlRedirectImport"]] = Field("UrlRedirectImport", alias="__typename")


class UrlRedirectImportCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    url_redirect_import: Optional[UrlRedirectImport] = Field(None, alias="urlRedirectImport")
    user_errors: list[UrlRedirectImportUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["UrlRedirectImportCreatePayload"]] = Field(
        "UrlRedirectImportCreatePayload", alias="__typename"
    )


class UrlRedirectImportPreview(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    path: Optional[String] = None
    target: Optional[String] = None
    typename__: Optional[Literal["UrlRedirectImportPreview"]] = Field("UrlRedirectImportPreview", alias="__typename")


class UrlRedirectImportSubmitPayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    job: Optional[Job] = None
    user_errors: list[UrlRedirectImportUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["UrlRedirectImportSubmitPayload"]] = Field(
        "UrlRedirectImportSubmitPayload", alias="__typename"
    )


class UrlRedirectImportUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[UrlRedirectImportErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["UrlRedirectImportUserError"]] = Field(
        "UrlRedirectImportUserError", alias="__typename"
    )


class UrlRedirectUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    url_redirect: Optional[UrlRedirect] = Field(None, alias="urlRedirect")
    user_errors: list[UrlRedirectUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["UrlRedirectUpdatePayload"]] = Field("UrlRedirectUpdatePayload", alias="__typename")


class UrlRedirectUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[UrlRedirectErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["UrlRedirectUserError"]] = Field("UrlRedirectUserError", alias="__typename")


class UserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["UserError"]] = Field("UserError", alias="__typename")


class Validation(HasMetafieldDefinitions, HasMetafields, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    block_on_failure: Optional[Boolean] = Field(None, alias="blockOnFailure")
    enabled: Optional[Boolean] = None
    error_history: Optional[FunctionsErrorHistory] = Field(None, alias="errorHistory")
    id: Optional[ID] = None
    metafield: Optional[Metafield] = None
    metafield_definitions: Optional[MetafieldDefinitionConnection] = Field(None, alias="metafieldDefinitions")
    metafields: Optional[MetafieldConnection] = None
    private_metafield: Optional[PrivateMetafield] = Field(None, alias="privateMetafield")
    private_metafields: Optional[PrivateMetafieldConnection] = Field(None, alias="privateMetafields")
    shopify_function: Optional[ShopifyFunction] = Field(None, alias="shopifyFunction")
    title: Optional[String] = None
    typename__: Optional[Literal["Validation"]] = Field("Validation", alias="__typename")


class ValidationConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[ValidationEdge] = Field(default_factory=list)
    nodes: list[Validation] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["ValidationConnection"]] = Field("ValidationConnection", alias="__typename")


class ValidationCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[ValidationUserError] = Field(default_factory=list, alias="userErrors")
    validation: Optional[Validation] = None
    typename__: Optional[Literal["ValidationCreatePayload"]] = Field("ValidationCreatePayload", alias="__typename")


class ValidationDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_id: Optional[ID] = Field(None, alias="deletedId")
    user_errors: list[ValidationUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["ValidationDeletePayload"]] = Field("ValidationDeletePayload", alias="__typename")


class ValidationEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[Validation] = None
    typename__: Optional[Literal["ValidationEdge"]] = Field("ValidationEdge", alias="__typename")


class ValidationUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[ValidationUserError] = Field(default_factory=list, alias="userErrors")
    validation: Optional[Validation] = None
    typename__: Optional[Literal["ValidationUpdatePayload"]] = Field("ValidationUpdatePayload", alias="__typename")


class ValidationUserError(DisplayableError):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[ValidationUserErrorCode] = None
    field: Optional[list[String]] = Field(default_factory=list)
    message: Optional[String] = None
    typename__: Optional[Literal["ValidationUserError"]] = Field("ValidationUserError", alias="__typename")


class VaultCreditCard(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_address: Optional[CustomerCreditCardBillingAddress] = Field(None, alias="billingAddress")
    brand: Optional[String] = None
    expired: Optional[Boolean] = None
    expiry_month: Optional[Int] = Field(None, alias="expiryMonth")
    expiry_year: Optional[Int] = Field(None, alias="expiryYear")
    last_digits: Optional[String] = Field(None, alias="lastDigits")
    name: Optional[String] = None
    typename__: Optional[Literal["VaultCreditCard"]] = Field("VaultCreditCard", alias="__typename")


class VaultPaypalBillingAgreement(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    inactive: Optional[Boolean] = None
    name: Optional[String] = None
    paypal_account_email: Optional[String] = Field(None, alias="paypalAccountEmail")
    typename__: Optional[Literal["VaultPaypalBillingAgreement"]] = Field(
        "VaultPaypalBillingAgreement", alias="__typename"
    )


class Vector3(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    x: Optional[Float] = None
    y: Optional[Float] = None
    z: Optional[Float] = None
    typename__: Optional[Literal["Vector3"]] = Field("Vector3", alias="__typename")


class Video(File, Media, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alt: Optional[String] = None
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    duration: Optional[Int] = None
    file_errors: list[FileError] = Field(default_factory=list, alias="fileErrors")
    file_status: Optional[FileStatus] = Field(None, alias="fileStatus")
    filename: Optional[String] = None
    id: Optional[ID] = None
    media_content_type: Optional[MediaContentType] = Field(None, alias="mediaContentType")
    media_errors: list[MediaError] = Field(default_factory=list, alias="mediaErrors")
    media_warnings: list[MediaWarning] = Field(default_factory=list, alias="mediaWarnings")
    original_source: Optional[VideoSource] = Field(None, alias="originalSource")
    preview: Optional[MediaPreviewImage] = None
    sources: list[VideoSource] = Field(default_factory=list)
    status: Optional[MediaStatus] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["Video"]] = Field("Video", alias="__typename")


class VideoSource(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    file_size: Optional[Int] = Field(None, alias="fileSize")
    format: Optional[String] = None
    height: Optional[Int] = None
    mime_type: Optional[String] = Field(None, alias="mimeType")
    url: Optional[String] = None
    width: Optional[Int] = None
    typename__: Optional[Literal["VideoSource"]] = Field("VideoSource", alias="__typename")


class WebPixel(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    settings: Optional[JSON] = None
    typename__: Optional[Literal["WebPixel"]] = Field("WebPixel", alias="__typename")


class WebPixelCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[ErrorsWebPixelUserError] = Field(default_factory=list, alias="userErrors")
    web_pixel: Optional[WebPixel] = Field(None, alias="webPixel")
    typename__: Optional[Literal["WebPixelCreatePayload"]] = Field("WebPixelCreatePayload", alias="__typename")


class WebPixelDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_web_pixel_id: Optional[ID] = Field(None, alias="deletedWebPixelId")
    user_errors: list[ErrorsWebPixelUserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["WebPixelDeletePayload"]] = Field("WebPixelDeletePayload", alias="__typename")


class WebPixelUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[ErrorsWebPixelUserError] = Field(default_factory=list, alias="userErrors")
    web_pixel: Optional[WebPixel] = Field(None, alias="webPixel")
    typename__: Optional[Literal["WebPixelUpdatePayload"]] = Field("WebPixelUpdatePayload", alias="__typename")


class WebhookEventBridgeEndpoint(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    arn: Optional[ARN] = None
    typename__: Optional[Literal["WebhookEventBridgeEndpoint"]] = Field(
        "WebhookEventBridgeEndpoint", alias="__typename"
    )


class WebhookHttpEndpoint(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    callback_url: Optional[URL] = Field(None, alias="callbackUrl")
    typename__: Optional[Literal["WebhookHttpEndpoint"]] = Field("WebhookHttpEndpoint", alias="__typename")


class WebhookPubSubEndpoint(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    pub_sub_project: Optional[String] = Field(None, alias="pubSubProject")
    pub_sub_topic: Optional[String] = Field(None, alias="pubSubTopic")
    typename__: Optional[Literal["WebhookPubSubEndpoint"]] = Field("WebhookPubSubEndpoint", alias="__typename")


class WebhookSubscription(LegacyInteroperability, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    api_version: Optional[ApiVersion] = Field(None, alias="apiVersion")
    callback_url: Optional[URL] = Field(None, alias="callbackUrl")
    created_at: Optional[DateTime] = Field(None, alias="createdAt")
    endpoint: Optional[WebhookSubscriptionEndpoint] = None
    filter: Optional[String] = None
    format: Optional[WebhookSubscriptionFormat] = None
    id: Optional[ID] = None
    include_fields: list[String] = Field(default_factory=list, alias="includeFields")
    legacy_resource_id: Optional[UnsignedInt64] = Field(None, alias="legacyResourceId")
    metafield_namespaces: list[String] = Field(default_factory=list, alias="metafieldNamespaces")
    private_metafield_namespaces: list[String] = Field(default_factory=list, alias="privateMetafieldNamespaces")
    topic: Optional[WebhookSubscriptionTopic] = None
    updated_at: Optional[DateTime] = Field(None, alias="updatedAt")
    typename__: Optional[Literal["WebhookSubscription"]] = Field("WebhookSubscription", alias="__typename")


class WebhookSubscriptionConnection(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    edges: list[WebhookSubscriptionEdge] = Field(default_factory=list)
    nodes: list[WebhookSubscription] = Field(default_factory=list)
    page_info: Optional[PageInfo] = Field(None, alias="pageInfo")
    typename__: Optional[Literal["WebhookSubscriptionConnection"]] = Field(
        "WebhookSubscriptionConnection", alias="__typename"
    )


class WebhookSubscriptionCreatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    webhook_subscription: Optional[WebhookSubscription] = Field(None, alias="webhookSubscription")
    typename__: Optional[Literal["WebhookSubscriptionCreatePayload"]] = Field(
        "WebhookSubscriptionCreatePayload", alias="__typename"
    )


class WebhookSubscriptionDeletePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    deleted_webhook_subscription_id: Optional[ID] = Field(None, alias="deletedWebhookSubscriptionId")
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    typename__: Optional[Literal["WebhookSubscriptionDeletePayload"]] = Field(
        "WebhookSubscriptionDeletePayload", alias="__typename"
    )


class WebhookSubscriptionEdge(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cursor: Optional[String] = None
    node: Optional[WebhookSubscription] = None
    typename__: Optional[Literal["WebhookSubscriptionEdge"]] = Field("WebhookSubscriptionEdge", alias="__typename")


class WebhookSubscriptionUpdatePayload(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    user_errors: list[UserError] = Field(default_factory=list, alias="userErrors")
    webhook_subscription: Optional[WebhookSubscription] = Field(None, alias="webhookSubscription")
    typename__: Optional[Literal["WebhookSubscriptionUpdatePayload"]] = Field(
        "WebhookSubscriptionUpdatePayload", alias="__typename"
    )


class Weight(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    unit: Optional[WeightUnit] = None
    value: Optional[Float] = None
    typename__: Optional[Literal["Weight"]] = Field("Weight", alias="__typename")


class AppPlanInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_recurring_pricing_details: Optional[AppRecurringPricingInput] = Field(None, alias="appRecurringPricingDetails")
    app_usage_pricing_details: Optional[AppUsagePricingInput] = Field(None, alias="appUsagePricingDetails")
    typename__: Optional[Literal["AppPlanInput"]] = Field("AppPlanInput", alias="__typename")


class AppRecurringPricingInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    discount: Optional[AppSubscriptionDiscountInput] = None
    interval: Optional[AppPricingInterval] = "EVERY_30_DAYS"
    price: Optional[MoneyInput] = None
    typename__: Optional[Literal["AppRecurringPricingInput"]] = Field("AppRecurringPricingInput", alias="__typename")


class AppSubscriptionDiscountInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    duration_limit_in_intervals: Optional[Int] = Field(None, alias="durationLimitInIntervals")
    value: Optional[AppSubscriptionDiscountValueInput] = None
    typename__: Optional[Literal["AppSubscriptionDiscountInput"]] = Field(
        "AppSubscriptionDiscountInput", alias="__typename"
    )


class AppSubscriptionDiscountValueInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[Decimal] = None
    percentage: Optional[Float] = None
    typename__: Optional[Literal["AppSubscriptionDiscountValueInput"]] = Field(
        "AppSubscriptionDiscountValueInput", alias="__typename"
    )


class AppSubscriptionLineItemInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    plan: Optional[AppPlanInput] = None
    typename__: Optional[Literal["AppSubscriptionLineItemInput"]] = Field(
        "AppSubscriptionLineItemInput", alias="__typename"
    )


class AppUsagePricingInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    capped_amount: Optional[MoneyInput] = Field(None, alias="cappedAmount")
    terms: Optional[String] = None
    typename__: Optional[Literal["AppUsagePricingInput"]] = Field("AppUsagePricingInput", alias="__typename")


class AttributeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["AttributeInput"]] = Field("AttributeInput", alias="__typename")


class BundlesDraftOrderBundleLineItemComponentInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    quantity: Optional[Int] = None
    uuid: Optional[String] = None
    variant_id: Optional[ID] = Field(None, alias="variantId")
    typename__: Optional[Literal["BundlesDraftOrderBundleLineItemComponentInput"]] = Field(
        "BundlesDraftOrderBundleLineItemComponentInput", alias="__typename"
    )


class BuyerExperienceConfigurationInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    checkout_to_draft: Optional[Boolean] = Field(None, alias="checkoutToDraft")
    editable_shipping_address: Optional[Boolean] = Field(None, alias="editableShippingAddress")
    payment_terms_template_id: Optional[ID] = Field(None, alias="paymentTermsTemplateId")
    typename__: Optional[Literal["BuyerExperienceConfigurationInput"]] = Field(
        "BuyerExperienceConfigurationInput", alias="__typename"
    )


class CalculateExchangeLineItemInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applied_discount: Optional[ExchangeLineItemAppliedDiscountInput] = Field(None, alias="appliedDiscount")
    quantity: Optional[Int] = None
    variant_id: Optional[ID] = Field(None, alias="variantId")
    typename__: Optional[Literal["CalculateExchangeLineItemInput"]] = Field(
        "CalculateExchangeLineItemInput", alias="__typename"
    )


class CalculateReturnInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    exchange_line_items: Optional[list[CalculateExchangeLineItemInput]] = Field([], alias="exchangeLineItems")
    order_id: Optional[ID] = Field(None, alias="orderId")
    return_line_items: Optional[list[CalculateReturnLineItemInput]] = Field([], alias="returnLineItems")
    return_shipping_fee: Optional[ReturnShippingFeeInput] = Field(None, alias="returnShippingFee")
    typename__: Optional[Literal["CalculateReturnInput"]] = Field("CalculateReturnInput", alias="__typename")


class CalculateReturnLineItemInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_line_item_id: Optional[ID] = Field(None, alias="fulfillmentLineItemId")
    quantity: Optional[Int] = None
    restocking_fee: Optional[RestockingFeeInput] = Field(None, alias="restockingFee")
    typename__: Optional[Literal["CalculateReturnLineItemInput"]] = Field(
        "CalculateReturnLineItemInput", alias="__typename"
    )


class CatalogContextInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_location_ids: Optional[list[ID]] = Field(None, alias="companyLocationIds")
    typename__: Optional[Literal["CatalogContextInput"]] = Field("CatalogContextInput", alias="__typename")


class CatalogCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    context: Optional[CatalogContextInput] = None
    price_list_id: Optional[ID] = Field(None, alias="priceListId")
    publication_id: Optional[ID] = Field(None, alias="publicationId")
    status: Optional[CatalogStatus] = None
    title: Optional[String] = None
    typename__: Optional[Literal["CatalogCreateInput"]] = Field("CatalogCreateInput", alias="__typename")


class CatalogUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    context: Optional[CatalogContextInput] = None
    price_list_id: Optional[ID] = Field(None, alias="priceListId")
    publication_id: Optional[ID] = Field(None, alias="publicationId")
    status: Optional[CatalogStatus] = None
    title: Optional[String] = None
    typename__: Optional[Literal["CatalogUpdateInput"]] = Field("CatalogUpdateInput", alias="__typename")


class CheckoutBrandingButtonColorRolesInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accent: Optional[String] = None
    background: Optional[String] = None
    border: Optional[String] = None
    decorative: Optional[String] = None
    hover: Optional[CheckoutBrandingColorRolesInput] = None
    icon: Optional[String] = None
    text: Optional[String] = None
    typename__: Optional[Literal["CheckoutBrandingButtonColorRolesInput"]] = Field(
        "CheckoutBrandingButtonColorRolesInput", alias="__typename"
    )


class CheckoutBrandingButtonInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    background: Optional[CheckoutBrandingBackgroundStyle] = None
    block_padding: Optional[CheckoutBrandingSpacing] = Field(None, alias="blockPadding")
    border: Optional[CheckoutBrandingSimpleBorder] = None
    corner_radius: Optional[CheckoutBrandingCornerRadius] = Field(None, alias="cornerRadius")
    inline_padding: Optional[CheckoutBrandingSpacing] = Field(None, alias="inlinePadding")
    typography: Optional[CheckoutBrandingTypographyStyleInput] = None
    typename__: Optional[Literal["CheckoutBrandingButtonInput"]] = Field(
        "CheckoutBrandingButtonInput", alias="__typename"
    )


class CheckoutBrandingBuyerJourneyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    visibility: Optional[CheckoutBrandingVisibility] = None
    typename__: Optional[Literal["CheckoutBrandingBuyerJourneyInput"]] = Field(
        "CheckoutBrandingBuyerJourneyInput", alias="__typename"
    )


class CheckoutBrandingCartLinkInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    visibility: Optional[CheckoutBrandingVisibility] = None
    typename__: Optional[Literal["CheckoutBrandingCartLinkInput"]] = Field(
        "CheckoutBrandingCartLinkInput", alias="__typename"
    )


class CheckoutBrandingCheckboxInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    corner_radius: Optional[CheckoutBrandingCornerRadius] = Field(None, alias="cornerRadius")
    typename__: Optional[Literal["CheckoutBrandingCheckboxInput"]] = Field(
        "CheckoutBrandingCheckboxInput", alias="__typename"
    )


class CheckoutBrandingChoiceListGroupInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    spacing: Optional[CheckoutBrandingSpacingKeyword] = None
    typename__: Optional[Literal["CheckoutBrandingChoiceListGroupInput"]] = Field(
        "CheckoutBrandingChoiceListGroupInput", alias="__typename"
    )


class CheckoutBrandingChoiceListInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    group: Optional[CheckoutBrandingChoiceListGroupInput] = None
    typename__: Optional[Literal["CheckoutBrandingChoiceListInput"]] = Field(
        "CheckoutBrandingChoiceListInput", alias="__typename"
    )


class CheckoutBrandingColorGlobalInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accent: Optional[String] = None
    brand: Optional[String] = None
    critical: Optional[String] = None
    decorative: Optional[String] = None
    info: Optional[String] = None
    success: Optional[String] = None
    warning: Optional[String] = None
    typename__: Optional[Literal["CheckoutBrandingColorGlobalInput"]] = Field(
        "CheckoutBrandingColorGlobalInput", alias="__typename"
    )


class CheckoutBrandingColorRolesInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accent: Optional[String] = None
    background: Optional[String] = None
    border: Optional[String] = None
    decorative: Optional[String] = None
    icon: Optional[String] = None
    text: Optional[String] = None
    typename__: Optional[Literal["CheckoutBrandingColorRolesInput"]] = Field(
        "CheckoutBrandingColorRolesInput", alias="__typename"
    )


class CheckoutBrandingColorSchemeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    base: Optional[CheckoutBrandingColorRolesInput] = None
    control: Optional[CheckoutBrandingControlColorRolesInput] = None
    primary_button: Optional[CheckoutBrandingButtonColorRolesInput] = Field(None, alias="primaryButton")
    secondary_button: Optional[CheckoutBrandingButtonColorRolesInput] = Field(None, alias="secondaryButton")
    typename__: Optional[Literal["CheckoutBrandingColorSchemeInput"]] = Field(
        "CheckoutBrandingColorSchemeInput", alias="__typename"
    )


class CheckoutBrandingColorSchemesInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    scheme1: Optional[CheckoutBrandingColorSchemeInput] = None
    scheme2: Optional[CheckoutBrandingColorSchemeInput] = None
    scheme3: Optional[CheckoutBrandingColorSchemeInput] = None
    scheme4: Optional[CheckoutBrandingColorSchemeInput] = None
    typename__: Optional[Literal["CheckoutBrandingColorSchemesInput"]] = Field(
        "CheckoutBrandingColorSchemesInput", alias="__typename"
    )


class CheckoutBrandingColorsInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    global_: Optional[CheckoutBrandingColorGlobalInput] = Field(None, alias="global")
    schemes: Optional[CheckoutBrandingColorSchemesInput] = None
    typename__: Optional[Literal["CheckoutBrandingColorsInput"]] = Field(
        "CheckoutBrandingColorsInput", alias="__typename"
    )


class CheckoutBrandingContainerDividerInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    border_style: Optional[CheckoutBrandingBorderStyle] = Field(None, alias="borderStyle")
    border_width: Optional[CheckoutBrandingBorderWidth] = Field(None, alias="borderWidth")
    visibility: Optional[CheckoutBrandingVisibility] = None
    typename__: Optional[Literal["CheckoutBrandingContainerDividerInput"]] = Field(
        "CheckoutBrandingContainerDividerInput", alias="__typename"
    )


class CheckoutBrandingContentInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    divider: Optional[CheckoutBrandingContainerDividerInput] = None
    typename__: Optional[Literal["CheckoutBrandingContentInput"]] = Field(
        "CheckoutBrandingContentInput", alias="__typename"
    )


class CheckoutBrandingControlColorRolesInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accent: Optional[String] = None
    background: Optional[String] = None
    border: Optional[String] = None
    decorative: Optional[String] = None
    icon: Optional[String] = None
    selected: Optional[CheckoutBrandingColorRolesInput] = None
    text: Optional[String] = None
    typename__: Optional[Literal["CheckoutBrandingControlColorRolesInput"]] = Field(
        "CheckoutBrandingControlColorRolesInput", alias="__typename"
    )


class CheckoutBrandingControlInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    border: Optional[CheckoutBrandingSimpleBorder] = None
    color: Optional[CheckoutBrandingColorSelection] = None
    corner_radius: Optional[CheckoutBrandingCornerRadius] = Field(None, alias="cornerRadius")
    label_position: Optional[CheckoutBrandingLabelPosition] = Field(None, alias="labelPosition")
    typename__: Optional[Literal["CheckoutBrandingControlInput"]] = Field(
        "CheckoutBrandingControlInput", alias="__typename"
    )


class CheckoutBrandingCornerRadiusVariablesInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    base: Optional[Int] = None
    large: Optional[Int] = None
    small: Optional[Int] = None
    typename__: Optional[Literal["CheckoutBrandingCornerRadiusVariablesInput"]] = Field(
        "CheckoutBrandingCornerRadiusVariablesInput", alias="__typename"
    )


class CheckoutBrandingCustomFontGroupInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    base: Optional[CheckoutBrandingCustomFontInput] = None
    bold: Optional[CheckoutBrandingCustomFontInput] = None
    loading_strategy: Optional[CheckoutBrandingFontLoadingStrategy] = Field(None, alias="loadingStrategy")
    typename__: Optional[Literal["CheckoutBrandingCustomFontGroupInput"]] = Field(
        "CheckoutBrandingCustomFontGroupInput", alias="__typename"
    )


class CheckoutBrandingCustomFontInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    generic_file_id: Optional[ID] = Field(None, alias="genericFileId")
    weight: Optional[Int] = None
    typename__: Optional[Literal["CheckoutBrandingCustomFontInput"]] = Field(
        "CheckoutBrandingCustomFontInput", alias="__typename"
    )


class CheckoutBrandingCustomizationsInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    buyer_journey: Optional[CheckoutBrandingBuyerJourneyInput] = Field(None, alias="buyerJourney")
    cart_link: Optional[CheckoutBrandingCartLinkInput] = Field(None, alias="cartLink")
    checkbox: Optional[CheckoutBrandingCheckboxInput] = None
    choice_list: Optional[CheckoutBrandingChoiceListInput] = Field(None, alias="choiceList")
    content: Optional[CheckoutBrandingContentInput] = None
    control: Optional[CheckoutBrandingControlInput] = None
    divider: Optional[CheckoutBrandingDividerStyleInput] = None
    express_checkout: Optional[CheckoutBrandingExpressCheckoutInput] = Field(None, alias="expressCheckout")
    favicon: Optional[CheckoutBrandingImageInput] = None
    footer: Optional[CheckoutBrandingFooterInput] = None
    global_: Optional[CheckoutBrandingGlobalInput] = Field(None, alias="global")
    header: Optional[CheckoutBrandingHeaderInput] = None
    heading_level1: Optional[CheckoutBrandingHeadingLevelInput] = Field(None, alias="headingLevel1")
    heading_level2: Optional[CheckoutBrandingHeadingLevelInput] = Field(None, alias="headingLevel2")
    heading_level3: Optional[CheckoutBrandingHeadingLevelInput] = Field(None, alias="headingLevel3")
    main: Optional[CheckoutBrandingMainInput] = None
    merchandise_thumbnail: Optional[CheckoutBrandingMerchandiseThumbnailInput] = Field(
        None, alias="merchandiseThumbnail"
    )
    order_summary: Optional[CheckoutBrandingOrderSummaryInput] = Field(None, alias="orderSummary")
    primary_button: Optional[CheckoutBrandingButtonInput] = Field(None, alias="primaryButton")
    secondary_button: Optional[CheckoutBrandingButtonInput] = Field(None, alias="secondaryButton")
    select: Optional[CheckoutBrandingSelectInput] = None
    text_field: Optional[CheckoutBrandingTextFieldInput] = Field(None, alias="textField")
    typename__: Optional[Literal["CheckoutBrandingCustomizationsInput"]] = Field(
        "CheckoutBrandingCustomizationsInput", alias="__typename"
    )


class CheckoutBrandingDesignSystemInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    colors: Optional[CheckoutBrandingColorsInput] = None
    corner_radius: Optional[CheckoutBrandingCornerRadiusVariablesInput] = Field(None, alias="cornerRadius")
    typography: Optional[CheckoutBrandingTypographyInput] = None
    typename__: Optional[Literal["CheckoutBrandingDesignSystemInput"]] = Field(
        "CheckoutBrandingDesignSystemInput", alias="__typename"
    )


class CheckoutBrandingDividerStyleInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    border_style: Optional[CheckoutBrandingBorderStyle] = Field(None, alias="borderStyle")
    border_width: Optional[CheckoutBrandingBorderWidth] = Field(None, alias="borderWidth")
    typename__: Optional[Literal["CheckoutBrandingDividerStyleInput"]] = Field(
        "CheckoutBrandingDividerStyleInput", alias="__typename"
    )


class CheckoutBrandingExpressCheckoutButtonInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    corner_radius: Optional[CheckoutBrandingCornerRadius] = Field(None, alias="cornerRadius")
    typename__: Optional[Literal["CheckoutBrandingExpressCheckoutButtonInput"]] = Field(
        "CheckoutBrandingExpressCheckoutButtonInput", alias="__typename"
    )


class CheckoutBrandingExpressCheckoutInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    button: Optional[CheckoutBrandingExpressCheckoutButtonInput] = None
    typename__: Optional[Literal["CheckoutBrandingExpressCheckoutInput"]] = Field(
        "CheckoutBrandingExpressCheckoutInput", alias="__typename"
    )


class CheckoutBrandingFontGroupInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    custom_font_group: Optional[CheckoutBrandingCustomFontGroupInput] = Field(None, alias="customFontGroup")
    shopify_font_group: Optional[CheckoutBrandingShopifyFontGroupInput] = Field(None, alias="shopifyFontGroup")
    typename__: Optional[Literal["CheckoutBrandingFontGroupInput"]] = Field(
        "CheckoutBrandingFontGroupInput", alias="__typename"
    )


class CheckoutBrandingFontSizeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    base: Optional[Float] = None
    ratio: Optional[Float] = None
    typename__: Optional[Literal["CheckoutBrandingFontSizeInput"]] = Field(
        "CheckoutBrandingFontSizeInput", alias="__typename"
    )


class CheckoutBrandingFooterContentInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    visibility: Optional[CheckoutBrandingVisibility] = None
    typename__: Optional[Literal["CheckoutBrandingFooterContentInput"]] = Field(
        "CheckoutBrandingFooterContentInput", alias="__typename"
    )


class CheckoutBrandingFooterInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alignment: Optional[CheckoutBrandingFooterAlignment] = None
    color_scheme: Optional[CheckoutBrandingColorSchemeSelection] = Field(None, alias="colorScheme")
    content: Optional[CheckoutBrandingFooterContentInput] = None
    divided: Optional[Boolean] = None
    padding: Optional[CheckoutBrandingSpacingKeyword] = None
    position: Optional[CheckoutBrandingFooterPosition] = None
    typename__: Optional[Literal["CheckoutBrandingFooterInput"]] = Field(
        "CheckoutBrandingFooterInput", alias="__typename"
    )


class CheckoutBrandingGlobalInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    corner_radius: Optional[CheckoutBrandingGlobalCornerRadius] = Field(None, alias="cornerRadius")
    typography: Optional[CheckoutBrandingTypographyStyleGlobalInput] = None
    typename__: Optional[Literal["CheckoutBrandingGlobalInput"]] = Field(
        "CheckoutBrandingGlobalInput", alias="__typename"
    )


class CheckoutBrandingHeaderCartLinkInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    content_type: Optional[CheckoutBrandingCartLinkContentType] = Field(None, alias="contentType")
    image: Optional[CheckoutBrandingImageInput] = None
    typename__: Optional[Literal["CheckoutBrandingHeaderCartLinkInput"]] = Field(
        "CheckoutBrandingHeaderCartLinkInput", alias="__typename"
    )


class CheckoutBrandingHeaderInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alignment: Optional[CheckoutBrandingHeaderAlignment] = None
    banner: Optional[CheckoutBrandingImageInput] = None
    cart_link: Optional[CheckoutBrandingHeaderCartLinkInput] = Field(None, alias="cartLink")
    color_scheme: Optional[CheckoutBrandingColorSchemeSelection] = Field(None, alias="colorScheme")
    divided: Optional[Boolean] = None
    logo: Optional[CheckoutBrandingLogoInput] = None
    padding: Optional[CheckoutBrandingSpacingKeyword] = None
    position: Optional[CheckoutBrandingHeaderPosition] = None
    typename__: Optional[Literal["CheckoutBrandingHeaderInput"]] = Field(
        "CheckoutBrandingHeaderInput", alias="__typename"
    )


class CheckoutBrandingHeadingLevelInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    typography: Optional[CheckoutBrandingTypographyStyleInput] = None
    typename__: Optional[Literal["CheckoutBrandingHeadingLevelInput"]] = Field(
        "CheckoutBrandingHeadingLevelInput", alias="__typename"
    )


class CheckoutBrandingImageInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    media_image_id: Optional[ID] = Field(None, alias="mediaImageId")
    typename__: Optional[Literal["CheckoutBrandingImageInput"]] = Field(
        "CheckoutBrandingImageInput", alias="__typename"
    )


class CheckoutBrandingInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customizations: Optional[CheckoutBrandingCustomizationsInput] = None
    design_system: Optional[CheckoutBrandingDesignSystemInput] = Field(None, alias="designSystem")
    typename__: Optional[Literal["CheckoutBrandingInput"]] = Field("CheckoutBrandingInput", alias="__typename")


class CheckoutBrandingLogoInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    image: Optional[CheckoutBrandingImageInput] = None
    max_width: Optional[Int] = Field(None, alias="maxWidth")
    visibility: Optional[CheckoutBrandingVisibility] = None
    typename__: Optional[Literal["CheckoutBrandingLogoInput"]] = Field("CheckoutBrandingLogoInput", alias="__typename")


class CheckoutBrandingMainInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    background_image: Optional[CheckoutBrandingImageInput] = Field(None, alias="backgroundImage")
    color_scheme: Optional[CheckoutBrandingColorSchemeSelection] = Field(None, alias="colorScheme")
    divider: Optional[CheckoutBrandingContainerDividerInput] = None
    section: Optional[CheckoutBrandingMainSectionInput] = None
    typename__: Optional[Literal["CheckoutBrandingMainInput"]] = Field("CheckoutBrandingMainInput", alias="__typename")


class CheckoutBrandingMainSectionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    background: Optional[CheckoutBrandingBackground] = None
    border: Optional[CheckoutBrandingSimpleBorder] = None
    border_style: Optional[CheckoutBrandingBorderStyle] = Field(None, alias="borderStyle")
    border_width: Optional[CheckoutBrandingBorderWidth] = Field(None, alias="borderWidth")
    color_scheme: Optional[CheckoutBrandingColorSchemeSelection] = Field(None, alias="colorScheme")
    corner_radius: Optional[CheckoutBrandingCornerRadius] = Field(None, alias="cornerRadius")
    padding: Optional[CheckoutBrandingSpacingKeyword] = None
    shadow: Optional[CheckoutBrandingShadow] = None
    typename__: Optional[Literal["CheckoutBrandingMainSectionInput"]] = Field(
        "CheckoutBrandingMainSectionInput", alias="__typename"
    )


class CheckoutBrandingMerchandiseThumbnailInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    border: Optional[CheckoutBrandingSimpleBorder] = None
    corner_radius: Optional[CheckoutBrandingCornerRadius] = Field(None, alias="cornerRadius")
    typename__: Optional[Literal["CheckoutBrandingMerchandiseThumbnailInput"]] = Field(
        "CheckoutBrandingMerchandiseThumbnailInput", alias="__typename"
    )


class CheckoutBrandingOrderSummaryInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    background_image: Optional[CheckoutBrandingImageInput] = Field(None, alias="backgroundImage")
    color_scheme: Optional[CheckoutBrandingColorSchemeSelection] = Field(None, alias="colorScheme")
    divider: Optional[CheckoutBrandingContainerDividerInput] = None
    section: Optional[CheckoutBrandingOrderSummarySectionInput] = None
    typename__: Optional[Literal["CheckoutBrandingOrderSummaryInput"]] = Field(
        "CheckoutBrandingOrderSummaryInput", alias="__typename"
    )


class CheckoutBrandingOrderSummarySectionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    background: Optional[CheckoutBrandingBackground] = None
    border: Optional[CheckoutBrandingSimpleBorder] = None
    border_style: Optional[CheckoutBrandingBorderStyle] = Field(None, alias="borderStyle")
    border_width: Optional[CheckoutBrandingBorderWidth] = Field(None, alias="borderWidth")
    color_scheme: Optional[CheckoutBrandingColorSchemeSelection] = Field(None, alias="colorScheme")
    corner_radius: Optional[CheckoutBrandingCornerRadius] = Field(None, alias="cornerRadius")
    padding: Optional[CheckoutBrandingSpacingKeyword] = None
    shadow: Optional[CheckoutBrandingShadow] = None
    typename__: Optional[Literal["CheckoutBrandingOrderSummarySectionInput"]] = Field(
        "CheckoutBrandingOrderSummarySectionInput", alias="__typename"
    )


class CheckoutBrandingSelectInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    border: Optional[CheckoutBrandingBorder] = None
    typography: Optional[CheckoutBrandingTypographyStyleInput] = None
    typename__: Optional[Literal["CheckoutBrandingSelectInput"]] = Field(
        "CheckoutBrandingSelectInput", alias="__typename"
    )


class CheckoutBrandingShopifyFontGroupInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    base_weight: Optional[Int] = Field(None, alias="baseWeight")
    bold_weight: Optional[Int] = Field(None, alias="boldWeight")
    loading_strategy: Optional[CheckoutBrandingFontLoadingStrategy] = Field(None, alias="loadingStrategy")
    name: Optional[String] = None
    typename__: Optional[Literal["CheckoutBrandingShopifyFontGroupInput"]] = Field(
        "CheckoutBrandingShopifyFontGroupInput", alias="__typename"
    )


class CheckoutBrandingTextFieldInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    border: Optional[CheckoutBrandingBorder] = None
    typography: Optional[CheckoutBrandingTypographyStyleInput] = None
    typename__: Optional[Literal["CheckoutBrandingTextFieldInput"]] = Field(
        "CheckoutBrandingTextFieldInput", alias="__typename"
    )


class CheckoutBrandingTypographyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    primary: Optional[CheckoutBrandingFontGroupInput] = None
    secondary: Optional[CheckoutBrandingFontGroupInput] = None
    size: Optional[CheckoutBrandingFontSizeInput] = None
    typename__: Optional[Literal["CheckoutBrandingTypographyInput"]] = Field(
        "CheckoutBrandingTypographyInput", alias="__typename"
    )


class CheckoutBrandingTypographyStyleGlobalInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    kerning: Optional[CheckoutBrandingTypographyKerning] = None
    letter_case: Optional[CheckoutBrandingTypographyLetterCase] = Field(None, alias="letterCase")
    typename__: Optional[Literal["CheckoutBrandingTypographyStyleGlobalInput"]] = Field(
        "CheckoutBrandingTypographyStyleGlobalInput", alias="__typename"
    )


class CheckoutBrandingTypographyStyleInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    font: Optional[CheckoutBrandingTypographyFont] = None
    kerning: Optional[CheckoutBrandingTypographyKerning] = None
    letter_case: Optional[CheckoutBrandingTypographyLetterCase] = Field(None, alias="letterCase")
    size: Optional[CheckoutBrandingTypographySize] = None
    weight: Optional[CheckoutBrandingTypographyWeight] = None
    typename__: Optional[Literal["CheckoutBrandingTypographyStyleInput"]] = Field(
        "CheckoutBrandingTypographyStyleInput", alias="__typename"
    )


class ChildProductRelationInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    child_product_id: Optional[ID] = Field(None, alias="childProductId")
    selected_parent_option_values: Optional[list[SelectedVariantOptionInput]] = Field(
        None, alias="selectedParentOptionValues"
    )
    typename__: Optional[Literal["ChildProductRelationInput"]] = Field("ChildProductRelationInput", alias="__typename")


class CollectionDeleteInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    typename__: Optional[Literal["CollectionDeleteInput"]] = Field("CollectionDeleteInput", alias="__typename")


class CollectionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description_html: Optional[String] = Field(None, alias="descriptionHtml")
    handle: Optional[String] = None
    id: Optional[ID] = None
    image: Optional[ImageInput] = None
    metafields: Optional[list[MetafieldInput]] = None
    products: Optional[list[ID]] = None
    redirect_new_handle: Optional[Boolean] = Field(False, alias="redirectNewHandle")
    rule_set: Optional[CollectionRuleSetInput] = Field(None, alias="ruleSet")
    seo: Optional[SEOInput] = None
    sort_order: Optional[CollectionSortOrder] = Field(None, alias="sortOrder")
    template_suffix: Optional[String] = Field(None, alias="templateSuffix")
    title: Optional[String] = None
    typename__: Optional[Literal["CollectionInput"]] = Field("CollectionInput", alias="__typename")


class CollectionPublicationInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    publication_id: Optional[ID] = Field(None, alias="publicationId")
    typename__: Optional[Literal["CollectionPublicationInput"]] = Field(
        "CollectionPublicationInput", alias="__typename"
    )


class CollectionPublishInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    collection_publications: Optional[list[CollectionPublicationInput]] = Field(None, alias="collectionPublications")
    id: Optional[ID] = None
    typename__: Optional[Literal["CollectionPublishInput"]] = Field("CollectionPublishInput", alias="__typename")


class CollectionRuleInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    column: Optional[CollectionRuleColumn] = None
    condition: Optional[String] = None
    condition_object_id: Optional[ID] = Field(None, alias="conditionObjectId")
    relation: Optional[CollectionRuleRelation] = None
    typename__: Optional[Literal["CollectionRuleInput"]] = Field("CollectionRuleInput", alias="__typename")


class CollectionRuleSetInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applied_disjunctively: Optional[Boolean] = Field(None, alias="appliedDisjunctively")
    rules: Optional[list[CollectionRuleInput]] = None
    typename__: Optional[Literal["CollectionRuleSetInput"]] = Field("CollectionRuleSetInput", alias="__typename")


class CollectionUnpublishInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    collection_publications: Optional[list[CollectionPublicationInput]] = Field(None, alias="collectionPublications")
    id: Optional[ID] = None
    typename__: Optional[Literal["CollectionUnpublishInput"]] = Field("CollectionUnpublishInput", alias="__typename")


class CompanyAddressInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    address2: Optional[String] = None
    city: Optional[String] = None
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    first_name: Optional[String] = Field(None, alias="firstName")
    last_name: Optional[String] = Field(None, alias="lastName")
    phone: Optional[String] = None
    recipient: Optional[String] = None
    zip: Optional[String] = None
    zone_code: Optional[String] = Field(None, alias="zoneCode")
    typename__: Optional[Literal["CompanyAddressInput"]] = Field("CompanyAddressInput", alias="__typename")


class CompanyContactInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    email: Optional[String] = None
    first_name: Optional[String] = Field(None, alias="firstName")
    last_name: Optional[String] = Field(None, alias="lastName")
    locale: Optional[String] = None
    phone: Optional[String] = None
    title: Optional[String] = None
    typename__: Optional[Literal["CompanyContactInput"]] = Field("CompanyContactInput", alias="__typename")


class CompanyContactRoleAssign(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_contact_role_id: Optional[ID] = Field(None, alias="companyContactRoleId")
    company_location_id: Optional[ID] = Field(None, alias="companyLocationId")
    typename__: Optional[Literal["CompanyContactRoleAssign"]] = Field("CompanyContactRoleAssign", alias="__typename")


class CompanyCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company: Optional[CompanyInput] = None
    company_contact: Optional[CompanyContactInput] = Field(None, alias="companyContact")
    company_location: Optional[CompanyLocationInput] = Field(None, alias="companyLocation")
    typename__: Optional[Literal["CompanyCreateInput"]] = Field("CompanyCreateInput", alias="__typename")


class CompanyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_since: Optional[DateTime] = Field(None, alias="customerSince")
    external_id: Optional[String] = Field(None, alias="externalId")
    name: Optional[String] = None
    note: Optional[String] = None
    typename__: Optional[Literal["CompanyInput"]] = Field("CompanyInput", alias="__typename")


class CompanyLocationInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_address: Optional[CompanyAddressInput] = Field(None, alias="billingAddress")
    billing_same_as_shipping: Optional[Boolean] = Field(None, alias="billingSameAsShipping")
    buyer_experience_configuration: Optional[BuyerExperienceConfigurationInput] = Field(
        None, alias="buyerExperienceConfiguration"
    )
    external_id: Optional[String] = Field(None, alias="externalId")
    locale: Optional[String] = None
    name: Optional[String] = None
    note: Optional[String] = None
    phone: Optional[String] = None
    shipping_address: Optional[CompanyAddressInput] = Field(None, alias="shippingAddress")
    tax_exemptions: Optional[list[TaxExemption]] = Field(None, alias="taxExemptions")
    tax_registration_id: Optional[String] = Field(None, alias="taxRegistrationId")
    typename__: Optional[Literal["CompanyLocationInput"]] = Field("CompanyLocationInput", alias="__typename")


class CompanyLocationRoleAssign(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_contact_id: Optional[ID] = Field(None, alias="companyContactId")
    company_contact_role_id: Optional[ID] = Field(None, alias="companyContactRoleId")
    typename__: Optional[Literal["CompanyLocationRoleAssign"]] = Field("CompanyLocationRoleAssign", alias="__typename")


class CompanyLocationUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    buyer_experience_configuration: Optional[BuyerExperienceConfigurationInput] = Field(
        None, alias="buyerExperienceConfiguration"
    )
    external_id: Optional[String] = Field(None, alias="externalId")
    locale: Optional[String] = None
    name: Optional[String] = None
    note: Optional[String] = None
    phone: Optional[String] = None
    typename__: Optional[Literal["CompanyLocationUpdateInput"]] = Field(
        "CompanyLocationUpdateInput", alias="__typename"
    )


class ContextualPricingContext(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_location_id: Optional[ID] = Field(None, alias="companyLocationId")
    country: Optional[CountryCode] = None
    typename__: Optional[Literal["ContextualPricingContext"]] = Field("ContextualPricingContext", alias="__typename")


class ContextualPublicationContext(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_location_id: Optional[ID] = Field(None, alias="companyLocationId")
    country: Optional[CountryCode] = None
    typename__: Optional[Literal["ContextualPublicationContext"]] = Field(
        "ContextualPublicationContext", alias="__typename"
    )


class CountryHarmonizedSystemCodeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    harmonized_system_code: Optional[String] = Field(None, alias="harmonizedSystemCode")
    typename__: Optional[Literal["CountryHarmonizedSystemCodeInput"]] = Field(
        "CountryHarmonizedSystemCodeInput", alias="__typename"
    )


class CreateMediaInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alt: Optional[String] = None
    media_content_type: Optional[MediaContentType] = Field(None, alias="mediaContentType")
    original_source: Optional[String] = Field(None, alias="originalSource")
    typename__: Optional[Literal["CreateMediaInput"]] = Field("CreateMediaInput", alias="__typename")


class CustomShippingPackageInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    default: Optional[Boolean] = False
    dimensions: Optional[ObjectDimensionsInput] = None
    name: Optional[String] = None
    type: Optional[ShippingPackageType] = None
    weight: Optional[WeightInput] = None
    typename__: Optional[Literal["CustomShippingPackageInput"]] = Field(
        "CustomShippingPackageInput", alias="__typename"
    )


class CustomerDeleteInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    typename__: Optional[Literal["CustomerDeleteInput"]] = Field("CustomerDeleteInput", alias="__typename")


class CustomerEmailMarketingConsentInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    consent_updated_at: Optional[DateTime] = Field(None, alias="consentUpdatedAt")
    marketing_opt_in_level: Optional[CustomerMarketingOptInLevel] = Field(None, alias="marketingOptInLevel")
    marketing_state: Optional[CustomerEmailMarketingState] = Field(None, alias="marketingState")
    typename__: Optional[Literal["CustomerEmailMarketingConsentInput"]] = Field(
        "CustomerEmailMarketingConsentInput", alias="__typename"
    )


class CustomerEmailMarketingConsentUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_id: Optional[ID] = Field(None, alias="customerId")
    email_marketing_consent: Optional[CustomerEmailMarketingConsentInput] = Field(None, alias="emailMarketingConsent")
    typename__: Optional[Literal["CustomerEmailMarketingConsentUpdateInput"]] = Field(
        "CustomerEmailMarketingConsentUpdateInput", alias="__typename"
    )


class CustomerInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    addresses: Optional[list[MailingAddressInput]] = None
    email: Optional[String] = None
    email_marketing_consent: Optional[CustomerEmailMarketingConsentInput] = Field(None, alias="emailMarketingConsent")
    first_name: Optional[String] = Field(None, alias="firstName")
    id: Optional[ID] = None
    last_name: Optional[String] = Field(None, alias="lastName")
    locale: Optional[String] = None
    metafields: Optional[list[MetafieldInput]] = None
    note: Optional[String] = None
    phone: Optional[String] = None
    sms_marketing_consent: Optional[CustomerSmsMarketingConsentInput] = Field(None, alias="smsMarketingConsent")
    tags: Optional[list[String]] = None
    tax_exempt: Optional[Boolean] = Field(None, alias="taxExempt")
    tax_exemptions: Optional[list[TaxExemption]] = Field(None, alias="taxExemptions")
    typename__: Optional[Literal["CustomerInput"]] = Field("CustomerInput", alias="__typename")


class CustomerMergeOverrideFields(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_id_of_default_address_to_keep: Optional[ID] = Field(None, alias="customerIdOfDefaultAddressToKeep")
    customer_id_of_email_to_keep: Optional[ID] = Field(None, alias="customerIdOfEmailToKeep")
    customer_id_of_first_name_to_keep: Optional[ID] = Field(None, alias="customerIdOfFirstNameToKeep")
    customer_id_of_last_name_to_keep: Optional[ID] = Field(None, alias="customerIdOfLastNameToKeep")
    customer_id_of_phone_number_to_keep: Optional[ID] = Field(None, alias="customerIdOfPhoneNumberToKeep")
    note: Optional[String] = None
    tags: Optional[list[String]] = None
    typename__: Optional[Literal["CustomerMergeOverrideFields"]] = Field(
        "CustomerMergeOverrideFields", alias="__typename"
    )


class CustomerPaymentMethodRemoteInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    authorize_net_customer_payment_profile: Optional[RemoteAuthorizeNetCustomerPaymentProfileInput] = Field(
        None, alias="authorizeNetCustomerPaymentProfile"
    )
    braintree_payment_method: Optional[RemoteBraintreePaymentMethodInput] = Field(None, alias="braintreePaymentMethod")
    stripe_payment_method: Optional[RemoteStripePaymentMethodInput] = Field(None, alias="stripePaymentMethod")
    typename__: Optional[Literal["CustomerPaymentMethodRemoteInput"]] = Field(
        "CustomerPaymentMethodRemoteInput", alias="__typename"
    )


class CustomerSegmentMembersQueryInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    query: Optional[String] = None
    reverse: Optional[Boolean] = False
    segment_id: Optional[ID] = Field(None, alias="segmentId")
    sort_key: Optional[String] = Field(None, alias="sortKey")
    typename__: Optional[Literal["CustomerSegmentMembersQueryInput"]] = Field(
        "CustomerSegmentMembersQueryInput", alias="__typename"
    )


class CustomerSmsMarketingConsentInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    consent_updated_at: Optional[DateTime] = Field(None, alias="consentUpdatedAt")
    marketing_opt_in_level: Optional[CustomerMarketingOptInLevel] = Field(None, alias="marketingOptInLevel")
    marketing_state: Optional[CustomerSmsMarketingState] = Field(None, alias="marketingState")
    typename__: Optional[Literal["CustomerSmsMarketingConsentInput"]] = Field(
        "CustomerSmsMarketingConsentInput", alias="__typename"
    )


class CustomerSmsMarketingConsentUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_id: Optional[ID] = Field(None, alias="customerId")
    sms_marketing_consent: Optional[CustomerSmsMarketingConsentInput] = Field(None, alias="smsMarketingConsent")
    typename__: Optional[Literal["CustomerSmsMarketingConsentUpdateInput"]] = Field(
        "CustomerSmsMarketingConsentUpdateInput", alias="__typename"
    )


class DelegateAccessTokenInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    delegate_access_scope: Optional[list[String]] = Field(None, alias="delegateAccessScope")
    expires_in: Optional[Int] = Field(None, alias="expiresIn")
    typename__: Optional[Literal["DelegateAccessTokenInput"]] = Field("DelegateAccessTokenInput", alias="__typename")


class DeliveryCarrierServiceCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    active: Optional[Boolean] = None
    callback_url: Optional[URL] = Field(None, alias="callbackUrl")
    name: Optional[String] = None
    supports_service_discovery: Optional[Boolean] = Field(None, alias="supportsServiceDiscovery")
    typename__: Optional[Literal["DeliveryCarrierServiceCreateInput"]] = Field(
        "DeliveryCarrierServiceCreateInput", alias="__typename"
    )


class DeliveryCarrierServiceUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    active: Optional[Boolean] = None
    callback_url: Optional[URL] = Field(None, alias="callbackUrl")
    id: Optional[ID] = None
    name: Optional[String] = None
    supports_service_discovery: Optional[Boolean] = Field(None, alias="supportsServiceDiscovery")
    typename__: Optional[Literal["DeliveryCarrierServiceUpdateInput"]] = Field(
        "DeliveryCarrierServiceUpdateInput", alias="__typename"
    )


class DeliveryCountryInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[CountryCode] = None
    include_all_provinces: Optional[Boolean] = Field(None, alias="includeAllProvinces")
    provinces: Optional[list[DeliveryProvinceInput]] = None
    rest_of_world: Optional[Boolean] = Field(None, alias="restOfWorld")
    typename__: Optional[Literal["DeliveryCountryInput"]] = Field("DeliveryCountryInput", alias="__typename")


class DeliveryCustomizationInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    enabled: Optional[Boolean] = None
    function_id: Optional[String] = Field(None, alias="functionId")
    metafields: Optional[list[MetafieldInput]] = []
    title: Optional[String] = None
    typename__: Optional[Literal["DeliveryCustomizationInput"]] = Field(
        "DeliveryCustomizationInput", alias="__typename"
    )


class DeliveryLocationGroupZoneInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    countries: Optional[list[DeliveryCountryInput]] = None
    id: Optional[ID] = None
    method_definitions_to_create: Optional[list[DeliveryMethodDefinitionInput]] = Field(
        None, alias="methodDefinitionsToCreate"
    )
    method_definitions_to_update: Optional[list[DeliveryMethodDefinitionInput]] = Field(
        None, alias="methodDefinitionsToUpdate"
    )
    name: Optional[String] = None
    typename__: Optional[Literal["DeliveryLocationGroupZoneInput"]] = Field(
        "DeliveryLocationGroupZoneInput", alias="__typename"
    )


class DeliveryLocationLocalPickupEnableInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    instructions: Optional[String] = None
    location_id: Optional[ID] = Field(None, alias="locationId")
    pickup_time: Optional[DeliveryLocalPickupTime] = Field(None, alias="pickupTime")
    typename__: Optional[Literal["DeliveryLocationLocalPickupEnableInput"]] = Field(
        "DeliveryLocationLocalPickupEnableInput", alias="__typename"
    )


class DeliveryMethodDefinitionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    active: Optional[Boolean] = None
    conditions_to_update: Optional[list[DeliveryUpdateConditionInput]] = Field(None, alias="conditionsToUpdate")
    description: Optional[String] = None
    id: Optional[ID] = None
    name: Optional[String] = None
    participant: Optional[DeliveryParticipantInput] = None
    price_conditions_to_create: Optional[list[DeliveryPriceConditionInput]] = Field(
        None, alias="priceConditionsToCreate"
    )
    rate_definition: Optional[DeliveryRateDefinitionInput] = Field(None, alias="rateDefinition")
    weight_conditions_to_create: Optional[list[DeliveryWeightConditionInput]] = Field(
        None, alias="weightConditionsToCreate"
    )
    typename__: Optional[Literal["DeliveryMethodDefinitionInput"]] = Field(
        "DeliveryMethodDefinitionInput", alias="__typename"
    )


class DeliveryParticipantInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    adapt_to_new_services: Optional[Boolean] = Field(None, alias="adaptToNewServices")
    carrier_service_id: Optional[ID] = Field(None, alias="carrierServiceId")
    fixed_fee: Optional[MoneyInput] = Field(None, alias="fixedFee")
    id: Optional[ID] = None
    participant_services: Optional[list[DeliveryParticipantServiceInput]] = Field(None, alias="participantServices")
    percentage_of_rate_fee: Optional[Float] = Field(None, alias="percentageOfRateFee")
    typename__: Optional[Literal["DeliveryParticipantInput"]] = Field("DeliveryParticipantInput", alias="__typename")


class DeliveryParticipantServiceInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    active: Optional[Boolean] = None
    name: Optional[String] = None
    typename__: Optional[Literal["DeliveryParticipantServiceInput"]] = Field(
        "DeliveryParticipantServiceInput", alias="__typename"
    )


class DeliveryPriceConditionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    criteria: Optional[MoneyInput] = None
    operator: Optional[DeliveryConditionOperator] = None
    typename__: Optional[Literal["DeliveryPriceConditionInput"]] = Field(
        "DeliveryPriceConditionInput", alias="__typename"
    )


class DeliveryProfileInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    conditions_to_delete: Optional[list[ID]] = Field(None, alias="conditionsToDelete")
    location_groups_to_create: Optional[list[DeliveryProfileLocationGroupInput]] = Field(
        None, alias="locationGroupsToCreate"
    )
    location_groups_to_delete: Optional[list[ID]] = Field(None, alias="locationGroupsToDelete")
    location_groups_to_update: Optional[list[DeliveryProfileLocationGroupInput]] = Field(
        None, alias="locationGroupsToUpdate"
    )
    method_definitions_to_delete: Optional[list[ID]] = Field(None, alias="methodDefinitionsToDelete")
    name: Optional[String] = None
    profile_location_groups: Optional[list[DeliveryProfileLocationGroupInput]] = Field(
        None, alias="profileLocationGroups"
    )
    selling_plan_groups_to_associate: Optional[list[ID]] = Field(None, alias="sellingPlanGroupsToAssociate")
    selling_plan_groups_to_dissociate: Optional[list[ID]] = Field(None, alias="sellingPlanGroupsToDissociate")
    variants_to_associate: Optional[list[ID]] = Field(None, alias="variantsToAssociate")
    variants_to_dissociate: Optional[list[ID]] = Field(None, alias="variantsToDissociate")
    zones_to_delete: Optional[list[ID]] = Field(None, alias="zonesToDelete")
    typename__: Optional[Literal["DeliveryProfileInput"]] = Field("DeliveryProfileInput", alias="__typename")


class DeliveryProfileLocationGroupInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    locations: Optional[list[ID]] = None
    locations_to_add: Optional[list[ID]] = Field(None, alias="locationsToAdd")
    locations_to_remove: Optional[list[ID]] = Field(None, alias="locationsToRemove")
    zones_to_create: Optional[list[DeliveryLocationGroupZoneInput]] = Field(None, alias="zonesToCreate")
    zones_to_update: Optional[list[DeliveryLocationGroupZoneInput]] = Field(None, alias="zonesToUpdate")
    typename__: Optional[Literal["DeliveryProfileLocationGroupInput"]] = Field(
        "DeliveryProfileLocationGroupInput", alias="__typename"
    )


class DeliveryProvinceInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[String] = None
    typename__: Optional[Literal["DeliveryProvinceInput"]] = Field("DeliveryProvinceInput", alias="__typename")


class DeliveryRateDefinitionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    price: Optional[MoneyInput] = None
    typename__: Optional[Literal["DeliveryRateDefinitionInput"]] = Field(
        "DeliveryRateDefinitionInput", alias="__typename"
    )


class DeliverySettingInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    legacy_mode_profiles: Optional[Boolean] = Field(None, alias="legacyModeProfiles")
    typename__: Optional[Literal["DeliverySettingInput"]] = Field("DeliverySettingInput", alias="__typename")


class DeliveryUpdateConditionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    criteria: Optional[Float] = None
    criteria_unit: Optional[String] = Field(None, alias="criteriaUnit")
    field: Optional[DeliveryConditionField] = None
    id: Optional[ID] = None
    operator: Optional[DeliveryConditionOperator] = None
    typename__: Optional[Literal["DeliveryUpdateConditionInput"]] = Field(
        "DeliveryUpdateConditionInput", alias="__typename"
    )


class DeliveryWeightConditionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    criteria: Optional[WeightInput] = None
    operator: Optional[DeliveryConditionOperator] = None
    typename__: Optional[Literal["DeliveryWeightConditionInput"]] = Field(
        "DeliveryWeightConditionInput", alias="__typename"
    )


class DiscountAmountInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[Decimal] = None
    applies_on_each_item: Optional[Boolean] = Field(None, alias="appliesOnEachItem")
    typename__: Optional[Literal["DiscountAmountInput"]] = Field("DiscountAmountInput", alias="__typename")


class DiscountAutomaticAppInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    combines_with: Optional[DiscountCombinesWithInput] = Field(None, alias="combinesWith")
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    function_id: Optional[String] = Field(None, alias="functionId")
    metafields: Optional[list[MetafieldInput]] = []
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    title: Optional[String] = None
    typename__: Optional[Literal["DiscountAutomaticAppInput"]] = Field("DiscountAutomaticAppInput", alias="__typename")


class DiscountAutomaticBasicInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    combines_with: Optional[DiscountCombinesWithInput] = Field(None, alias="combinesWith")
    customer_gets: Optional[DiscountCustomerGetsInput] = Field(None, alias="customerGets")
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    minimum_requirement: Optional[DiscountMinimumRequirementInput] = Field(None, alias="minimumRequirement")
    recurring_cycle_limit: Optional[Int] = Field(None, alias="recurringCycleLimit")
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    title: Optional[String] = None
    typename__: Optional[Literal["DiscountAutomaticBasicInput"]] = Field(
        "DiscountAutomaticBasicInput", alias="__typename"
    )


class DiscountAutomaticBxgyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    combines_with: Optional[DiscountCombinesWithInput] = Field(None, alias="combinesWith")
    customer_buys: Optional[DiscountCustomerBuysInput] = Field(None, alias="customerBuys")
    customer_gets: Optional[DiscountCustomerGetsInput] = Field(None, alias="customerGets")
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    title: Optional[String] = None
    uses_per_order_limit: Optional[UnsignedInt64] = Field(None, alias="usesPerOrderLimit")
    typename__: Optional[Literal["DiscountAutomaticBxgyInput"]] = Field(
        "DiscountAutomaticBxgyInput", alias="__typename"
    )


class DiscountAutomaticFreeShippingInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applies_on_one_time_purchase: Optional[Boolean] = Field(True, alias="appliesOnOneTimePurchase")
    applies_on_subscription: Optional[Boolean] = Field(False, alias="appliesOnSubscription")
    combines_with: Optional[DiscountCombinesWithInput] = Field(None, alias="combinesWith")
    destination: Optional[DiscountShippingDestinationSelectionInput] = None
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    maximum_shipping_price: Optional[Decimal] = Field(None, alias="maximumShippingPrice")
    minimum_requirement: Optional[DiscountMinimumRequirementInput] = Field(None, alias="minimumRequirement")
    recurring_cycle_limit: Optional[Int] = Field(None, alias="recurringCycleLimit")
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    title: Optional[String] = None
    typename__: Optional[Literal["DiscountAutomaticFreeShippingInput"]] = Field(
        "DiscountAutomaticFreeShippingInput", alias="__typename"
    )


class DiscountCodeAppInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applies_once_per_customer: Optional[Boolean] = Field(None, alias="appliesOncePerCustomer")
    code: Optional[String] = None
    combines_with: Optional[DiscountCombinesWithInput] = Field(None, alias="combinesWith")
    customer_selection: Optional[DiscountCustomerSelectionInput] = Field(None, alias="customerSelection")
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    function_id: Optional[String] = Field(None, alias="functionId")
    metafields: Optional[list[MetafieldInput]] = []
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    title: Optional[String] = None
    usage_limit: Optional[Int] = Field(None, alias="usageLimit")
    typename__: Optional[Literal["DiscountCodeAppInput"]] = Field("DiscountCodeAppInput", alias="__typename")


class DiscountCodeBasicInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applies_once_per_customer: Optional[Boolean] = Field(None, alias="appliesOncePerCustomer")
    code: Optional[String] = None
    combines_with: Optional[DiscountCombinesWithInput] = Field(None, alias="combinesWith")
    customer_gets: Optional[DiscountCustomerGetsInput] = Field(None, alias="customerGets")
    customer_selection: Optional[DiscountCustomerSelectionInput] = Field(None, alias="customerSelection")
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    minimum_requirement: Optional[DiscountMinimumRequirementInput] = Field(None, alias="minimumRequirement")
    recurring_cycle_limit: Optional[Int] = Field(None, alias="recurringCycleLimit")
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    title: Optional[String] = None
    usage_limit: Optional[Int] = Field(None, alias="usageLimit")
    typename__: Optional[Literal["DiscountCodeBasicInput"]] = Field("DiscountCodeBasicInput", alias="__typename")


class DiscountCodeBxgyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applies_once_per_customer: Optional[Boolean] = Field(None, alias="appliesOncePerCustomer")
    code: Optional[String] = None
    combines_with: Optional[DiscountCombinesWithInput] = Field(None, alias="combinesWith")
    customer_buys: Optional[DiscountCustomerBuysInput] = Field(None, alias="customerBuys")
    customer_gets: Optional[DiscountCustomerGetsInput] = Field(None, alias="customerGets")
    customer_selection: Optional[DiscountCustomerSelectionInput] = Field(None, alias="customerSelection")
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    title: Optional[String] = None
    usage_limit: Optional[Int] = Field(None, alias="usageLimit")
    uses_per_order_limit: Optional[Int] = Field(None, alias="usesPerOrderLimit")
    typename__: Optional[Literal["DiscountCodeBxgyInput"]] = Field("DiscountCodeBxgyInput", alias="__typename")


class DiscountCodeFreeShippingInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applies_on_one_time_purchase: Optional[Boolean] = Field(None, alias="appliesOnOneTimePurchase")
    applies_on_subscription: Optional[Boolean] = Field(None, alias="appliesOnSubscription")
    applies_once_per_customer: Optional[Boolean] = Field(None, alias="appliesOncePerCustomer")
    code: Optional[String] = None
    combines_with: Optional[DiscountCombinesWithInput] = Field(None, alias="combinesWith")
    customer_selection: Optional[DiscountCustomerSelectionInput] = Field(None, alias="customerSelection")
    destination: Optional[DiscountShippingDestinationSelectionInput] = None
    ends_at: Optional[DateTime] = Field(None, alias="endsAt")
    maximum_shipping_price: Optional[Decimal] = Field(None, alias="maximumShippingPrice")
    minimum_requirement: Optional[DiscountMinimumRequirementInput] = Field(None, alias="minimumRequirement")
    recurring_cycle_limit: Optional[Int] = Field(None, alias="recurringCycleLimit")
    starts_at: Optional[DateTime] = Field(None, alias="startsAt")
    title: Optional[String] = None
    usage_limit: Optional[Int] = Field(None, alias="usageLimit")
    typename__: Optional[Literal["DiscountCodeFreeShippingInput"]] = Field(
        "DiscountCodeFreeShippingInput", alias="__typename"
    )


class DiscountCollectionsInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    add: Optional[list[ID]] = None
    remove: Optional[list[ID]] = None
    typename__: Optional[Literal["DiscountCollectionsInput"]] = Field("DiscountCollectionsInput", alias="__typename")


class DiscountCombinesWithInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    order_discounts: Optional[Boolean] = Field(False, alias="orderDiscounts")
    product_discounts: Optional[Boolean] = Field(False, alias="productDiscounts")
    shipping_discounts: Optional[Boolean] = Field(False, alias="shippingDiscounts")
    typename__: Optional[Literal["DiscountCombinesWithInput"]] = Field("DiscountCombinesWithInput", alias="__typename")


class DiscountCountriesInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    add: Optional[list[CountryCode]] = None
    include_rest_of_world: Optional[Boolean] = Field(False, alias="includeRestOfWorld")
    remove: Optional[list[CountryCode]] = None
    typename__: Optional[Literal["DiscountCountriesInput"]] = Field("DiscountCountriesInput", alias="__typename")


class DiscountCustomerBuysInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    items: Optional[DiscountItemsInput] = None
    value: Optional[DiscountCustomerBuysValueInput] = None
    typename__: Optional[Literal["DiscountCustomerBuysInput"]] = Field("DiscountCustomerBuysInput", alias="__typename")


class DiscountCustomerBuysValueInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[Decimal] = None
    quantity: Optional[UnsignedInt64] = None
    typename__: Optional[Literal["DiscountCustomerBuysValueInput"]] = Field(
        "DiscountCustomerBuysValueInput", alias="__typename"
    )


class DiscountCustomerGetsInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applies_on_one_time_purchase: Optional[Boolean] = Field(None, alias="appliesOnOneTimePurchase")
    applies_on_subscription: Optional[Boolean] = Field(None, alias="appliesOnSubscription")
    items: Optional[DiscountItemsInput] = None
    value: Optional[DiscountCustomerGetsValueInput] = None
    typename__: Optional[Literal["DiscountCustomerGetsInput"]] = Field("DiscountCustomerGetsInput", alias="__typename")


class DiscountCustomerGetsValueInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    discount_amount: Optional[DiscountAmountInput] = Field(None, alias="discountAmount")
    discount_on_quantity: Optional[DiscountOnQuantityInput] = Field(None, alias="discountOnQuantity")
    percentage: Optional[Float] = None
    typename__: Optional[Literal["DiscountCustomerGetsValueInput"]] = Field(
        "DiscountCustomerGetsValueInput", alias="__typename"
    )


class DiscountCustomerSegmentsInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    add: Optional[list[ID]] = None
    remove: Optional[list[ID]] = None
    typename__: Optional[Literal["DiscountCustomerSegmentsInput"]] = Field(
        "DiscountCustomerSegmentsInput", alias="__typename"
    )


class DiscountCustomerSelectionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    all: Optional[Boolean] = None
    customer_segments: Optional[DiscountCustomerSegmentsInput] = Field(None, alias="customerSegments")
    customers: Optional[DiscountCustomersInput] = None
    typename__: Optional[Literal["DiscountCustomerSelectionInput"]] = Field(
        "DiscountCustomerSelectionInput", alias="__typename"
    )


class DiscountCustomersInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    add: Optional[list[ID]] = None
    remove: Optional[list[ID]] = None
    typename__: Optional[Literal["DiscountCustomersInput"]] = Field("DiscountCustomersInput", alias="__typename")


class DiscountEffectInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[Decimal] = None
    percentage: Optional[Float] = None
    typename__: Optional[Literal["DiscountEffectInput"]] = Field("DiscountEffectInput", alias="__typename")


class DiscountItemsInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    all: Optional[Boolean] = None
    collections: Optional[DiscountCollectionsInput] = None
    products: Optional[DiscountProductsInput] = None
    typename__: Optional[Literal["DiscountItemsInput"]] = Field("DiscountItemsInput", alias="__typename")


class DiscountMinimumQuantityInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    greater_than_or_equal_to_quantity: Optional[UnsignedInt64] = Field(None, alias="greaterThanOrEqualToQuantity")
    typename__: Optional[Literal["DiscountMinimumQuantityInput"]] = Field(
        "DiscountMinimumQuantityInput", alias="__typename"
    )


class DiscountMinimumRequirementInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    quantity: Optional[DiscountMinimumQuantityInput] = None
    subtotal: Optional[DiscountMinimumSubtotalInput] = None
    typename__: Optional[Literal["DiscountMinimumRequirementInput"]] = Field(
        "DiscountMinimumRequirementInput", alias="__typename"
    )


class DiscountMinimumSubtotalInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    greater_than_or_equal_to_subtotal: Optional[Decimal] = Field(None, alias="greaterThanOrEqualToSubtotal")
    typename__: Optional[Literal["DiscountMinimumSubtotalInput"]] = Field(
        "DiscountMinimumSubtotalInput", alias="__typename"
    )


class DiscountOnQuantityInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    effect: Optional[DiscountEffectInput] = None
    quantity: Optional[UnsignedInt64] = None
    typename__: Optional[Literal["DiscountOnQuantityInput"]] = Field("DiscountOnQuantityInput", alias="__typename")


class DiscountProductsInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product_variants_to_add: Optional[list[ID]] = Field(None, alias="productVariantsToAdd")
    product_variants_to_remove: Optional[list[ID]] = Field(None, alias="productVariantsToRemove")
    products_to_add: Optional[list[ID]] = Field(None, alias="productsToAdd")
    products_to_remove: Optional[list[ID]] = Field(None, alias="productsToRemove")
    typename__: Optional[Literal["DiscountProductsInput"]] = Field("DiscountProductsInput", alias="__typename")


class DiscountRedeemCodeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[String] = None
    typename__: Optional[Literal["DiscountRedeemCodeInput"]] = Field("DiscountRedeemCodeInput", alias="__typename")


class DiscountShippingDestinationSelectionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    all: Optional[Boolean] = False
    countries: Optional[DiscountCountriesInput] = None
    typename__: Optional[Literal["DiscountShippingDestinationSelectionInput"]] = Field(
        "DiscountShippingDestinationSelectionInput", alias="__typename"
    )


class DraftOrderAppliedDiscountInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount_with_currency: Optional[MoneyInput] = Field(None, alias="amountWithCurrency")
    description: Optional[String] = None
    title: Optional[String] = None
    value: Optional[Float] = None
    value_type: Optional[DraftOrderAppliedDiscountType] = Field(None, alias="valueType")
    typename__: Optional[Literal["DraftOrderAppliedDiscountInput"]] = Field(
        "DraftOrderAppliedDiscountInput", alias="__typename"
    )


class DraftOrderDeleteInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    typename__: Optional[Literal["DraftOrderDeleteInput"]] = Field("DraftOrderDeleteInput", alias="__typename")


class DraftOrderInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    accept_automatic_discounts: Optional[Boolean] = Field(None, alias="acceptAutomaticDiscounts")
    allow_discount_codes_in_checkout: Optional[Boolean] = Field(None, alias="allowDiscountCodesInCheckout")
    applied_discount: Optional[DraftOrderAppliedDiscountInput] = Field(None, alias="appliedDiscount")
    billing_address: Optional[MailingAddressInput] = Field(None, alias="billingAddress")
    custom_attributes: Optional[list[AttributeInput]] = Field(None, alias="customAttributes")
    discount_codes: Optional[list[String]] = Field(None, alias="discountCodes")
    email: Optional[String] = None
    line_items: Optional[list[DraftOrderLineItemInput]] = Field(None, alias="lineItems")
    localization_extensions: Optional[list[LocalizationExtensionInput]] = Field(None, alias="localizationExtensions")
    market_region_country_code: Optional[CountryCode] = Field(None, alias="marketRegionCountryCode")
    metafields: Optional[list[MetafieldInput]] = None
    note: Optional[String] = None
    payment_terms: Optional[PaymentTermsInput] = Field(None, alias="paymentTerms")
    phone: Optional[String] = None
    po_number: Optional[String] = Field(None, alias="poNumber")
    presentment_currency_code: Optional[CurrencyCode] = Field(None, alias="presentmentCurrencyCode")
    purchasing_entity: Optional[PurchasingEntityInput] = Field(None, alias="purchasingEntity")
    reserve_inventory_until: Optional[DateTime] = Field(None, alias="reserveInventoryUntil")
    session_token: Optional[String] = Field(None, alias="sessionToken")
    shipping_address: Optional[MailingAddressInput] = Field(None, alias="shippingAddress")
    shipping_line: Optional[ShippingLineInput] = Field(None, alias="shippingLine")
    source_name: Optional[String] = Field(None, alias="sourceName")
    tags: Optional[list[String]] = None
    tax_exempt: Optional[Boolean] = Field(None, alias="taxExempt")
    transformer_fingerprint: Optional[String] = Field(None, alias="transformerFingerprint")
    use_customer_default_address: Optional[Boolean] = Field(None, alias="useCustomerDefaultAddress")
    visible_to_customer: Optional[Boolean] = Field(None, alias="visibleToCustomer")
    typename__: Optional[Literal["DraftOrderInput"]] = Field("DraftOrderInput", alias="__typename")


class DraftOrderLineItemInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applied_discount: Optional[DraftOrderAppliedDiscountInput] = Field(None, alias="appliedDiscount")
    bundle_components: Optional[list[BundlesDraftOrderBundleLineItemComponentInput]] = Field(
        None, alias="bundleComponents"
    )
    custom_attributes: Optional[list[AttributeInput]] = Field(None, alias="customAttributes")
    original_unit_price_with_currency: Optional[MoneyInput] = Field(None, alias="originalUnitPriceWithCurrency")
    quantity: Optional[Int] = None
    requires_shipping: Optional[Boolean] = Field(None, alias="requiresShipping")
    sku: Optional[String] = None
    taxable: Optional[Boolean] = None
    title: Optional[String] = None
    uuid: Optional[String] = None
    variant_id: Optional[ID] = Field(None, alias="variantId")
    weight: Optional[WeightInput] = None
    typename__: Optional[Literal["DraftOrderLineItemInput"]] = Field("DraftOrderLineItemInput", alias="__typename")


class EmailInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    bcc: Optional[list[String]] = None
    body: Optional[String] = None
    custom_message: Optional[String] = Field(None, alias="customMessage")
    from_: Optional[String] = Field(None, alias="from")
    subject: Optional[String] = None
    to: Optional[String] = None
    typename__: Optional[Literal["EmailInput"]] = Field("EmailInput", alias="__typename")


class EventBridgeWebhookSubscriptionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    arn: Optional[ARN] = None
    filter: Optional[String] = None
    format: Optional[WebhookSubscriptionFormat] = None
    include_fields: Optional[list[String]] = Field(None, alias="includeFields")
    metafield_namespaces: Optional[list[String]] = Field(None, alias="metafieldNamespaces")
    typename__: Optional[Literal["EventBridgeWebhookSubscriptionInput"]] = Field(
        "EventBridgeWebhookSubscriptionInput", alias="__typename"
    )


class ExchangeLineItemAppliedDiscountInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[String] = None
    value: Optional[ExchangeLineItemAppliedDiscountValueInput] = None
    typename__: Optional[Literal["ExchangeLineItemAppliedDiscountInput"]] = Field(
        "ExchangeLineItemAppliedDiscountInput", alias="__typename"
    )


class ExchangeLineItemAppliedDiscountValueInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[MoneyInput] = None
    percentage: Optional[Float] = None
    typename__: Optional[Literal["ExchangeLineItemAppliedDiscountValueInput"]] = Field(
        "ExchangeLineItemAppliedDiscountValueInput", alias="__typename"
    )


class ExchangeLineItemInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applied_discount: Optional[ExchangeLineItemAppliedDiscountInput] = Field(None, alias="appliedDiscount")
    gift_card_codes: Optional[list[String]] = Field(None, alias="giftCardCodes")
    quantity: Optional[Int] = None
    variant_id: Optional[ID] = Field(None, alias="variantId")
    typename__: Optional[Literal["ExchangeLineItemInput"]] = Field("ExchangeLineItemInput", alias="__typename")


class FileCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alt: Optional[String] = None
    content_type: Optional[FileContentType] = Field(None, alias="contentType")
    duplicate_resolution_mode: Optional[FileCreateInputDuplicateResolutionMode] = Field(
        "APPEND_UUID", alias="duplicateResolutionMode"
    )
    filename: Optional[String] = None
    original_source: Optional[String] = Field(None, alias="originalSource")
    typename__: Optional[Literal["FileCreateInput"]] = Field("FileCreateInput", alias="__typename")


class FileUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alt: Optional[String] = None
    filename: Optional[String] = None
    id: Optional[ID] = None
    original_source: Optional[String] = Field(None, alias="originalSource")
    preview_image_source: Optional[String] = Field(None, alias="previewImageSource")
    references_to_add: Optional[list[ID]] = Field(None, alias="referencesToAdd")
    references_to_remove: Optional[list[ID]] = Field(None, alias="referencesToRemove")
    typename__: Optional[Literal["FileUpdateInput"]] = Field("FileUpdateInput", alias="__typename")


class FulfillmentEventInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    city: Optional[String] = None
    country: Optional[String] = None
    estimated_delivery_at: Optional[DateTime] = Field(None, alias="estimatedDeliveryAt")
    fulfillment_id: Optional[ID] = Field(None, alias="fulfillmentId")
    happened_at: Optional[DateTime] = Field(None, alias="happenedAt")
    latitude: Optional[Float] = None
    longitude: Optional[Float] = None
    message: Optional[String] = None
    province: Optional[String] = None
    status: Optional[FulfillmentEventStatus] = None
    zip: Optional[String] = None
    typename__: Optional[Literal["FulfillmentEventInput"]] = Field("FulfillmentEventInput", alias="__typename")


class FulfillmentOrderHoldInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    external_id: Optional[String] = Field(None, alias="externalId")
    fulfillment_order_line_items: Optional[list[FulfillmentOrderLineItemInput]] = Field(
        [], alias="fulfillmentOrderLineItems"
    )
    notify_merchant: Optional[Boolean] = Field(False, alias="notifyMerchant")
    reason: Optional[FulfillmentHoldReason] = None
    reason_notes: Optional[String] = Field(None, alias="reasonNotes")
    typename__: Optional[Literal["FulfillmentOrderHoldInput"]] = Field("FulfillmentOrderHoldInput", alias="__typename")


class FulfillmentOrderLineItemInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    quantity: Optional[Int] = None
    typename__: Optional[Literal["FulfillmentOrderLineItemInput"]] = Field(
        "FulfillmentOrderLineItemInput", alias="__typename"
    )


class FulfillmentOrderLineItemsInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order_id: Optional[ID] = Field(None, alias="fulfillmentOrderId")
    fulfillment_order_line_items: Optional[list[FulfillmentOrderLineItemInput]] = Field(
        None, alias="fulfillmentOrderLineItems"
    )
    typename__: Optional[Literal["FulfillmentOrderLineItemsInput"]] = Field(
        "FulfillmentOrderLineItemsInput", alias="__typename"
    )


class FulfillmentOrderLineItemsPreparedForPickupInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    line_items_by_fulfillment_order: Optional[list[PreparedFulfillmentOrderLineItemsInput]] = Field(
        None, alias="lineItemsByFulfillmentOrder"
    )
    typename__: Optional[Literal["FulfillmentOrderLineItemsPreparedForPickupInput"]] = Field(
        "FulfillmentOrderLineItemsPreparedForPickupInput", alias="__typename"
    )


class FulfillmentOrderMergeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    merge_intents: Optional[list[FulfillmentOrderMergeInputMergeIntent]] = Field(None, alias="mergeIntents")
    typename__: Optional[Literal["FulfillmentOrderMergeInput"]] = Field(
        "FulfillmentOrderMergeInput", alias="__typename"
    )


class FulfillmentOrderMergeInputMergeIntent(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order_id: Optional[ID] = Field(None, alias="fulfillmentOrderId")
    fulfillment_order_line_items: Optional[list[FulfillmentOrderLineItemInput]] = Field(
        None, alias="fulfillmentOrderLineItems"
    )
    typename__: Optional[Literal["FulfillmentOrderMergeInputMergeIntent"]] = Field(
        "FulfillmentOrderMergeInputMergeIntent", alias="__typename"
    )


class FulfillmentOrderSplitInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order_id: Optional[ID] = Field(None, alias="fulfillmentOrderId")
    fulfillment_order_line_items: Optional[list[FulfillmentOrderLineItemInput]] = Field(
        None, alias="fulfillmentOrderLineItems"
    )
    typename__: Optional[Literal["FulfillmentOrderSplitInput"]] = Field(
        "FulfillmentOrderSplitInput", alias="__typename"
    )


class FulfillmentOriginAddressInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    address2: Optional[String] = None
    city: Optional[String] = None
    country_code: Optional[String] = Field(None, alias="countryCode")
    province_code: Optional[String] = Field(None, alias="provinceCode")
    zip: Optional[String] = None
    typename__: Optional[Literal["FulfillmentOriginAddressInput"]] = Field(
        "FulfillmentOriginAddressInput", alias="__typename"
    )


class FulfillmentTrackingInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company: Optional[String] = None
    number: Optional[String] = None
    numbers: Optional[list[String]] = None
    url: Optional[URL] = None
    urls: Optional[list[URL]] = None
    typename__: Optional[Literal["FulfillmentTrackingInput"]] = Field("FulfillmentTrackingInput", alias="__typename")


class FulfillmentV2Input(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    line_items_by_fulfillment_order: Optional[list[FulfillmentOrderLineItemsInput]] = Field(
        None, alias="lineItemsByFulfillmentOrder"
    )
    notify_customer: Optional[Boolean] = Field(False, alias="notifyCustomer")
    origin_address: Optional[FulfillmentOriginAddressInput] = Field(None, alias="originAddress")
    tracking_info: Optional[FulfillmentTrackingInput] = Field(None, alias="trackingInfo")
    typename__: Optional[Literal["FulfillmentV2Input"]] = Field("FulfillmentV2Input", alias="__typename")


class GiftCardCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[String] = None
    customer_id: Optional[ID] = Field(None, alias="customerId")
    expires_on: Optional[Date] = Field(None, alias="expiresOn")
    initial_value: Optional[Decimal] = Field(None, alias="initialValue")
    note: Optional[String] = None
    template_suffix: Optional[String] = Field(None, alias="templateSuffix")
    typename__: Optional[Literal["GiftCardCreateInput"]] = Field("GiftCardCreateInput", alias="__typename")


class GiftCardUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_id: Optional[ID] = Field(None, alias="customerId")
    expires_on: Optional[Date] = Field(None, alias="expiresOn")
    note: Optional[String] = None
    template_suffix: Optional[String] = Field(None, alias="templateSuffix")
    typename__: Optional[Literal["GiftCardUpdateInput"]] = Field("GiftCardUpdateInput", alias="__typename")


class ImageInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alt_text: Optional[String] = Field(None, alias="altText")
    id: Optional[ID] = None
    src: Optional[String] = None
    typename__: Optional[Literal["ImageInput"]] = Field("ImageInput", alias="__typename")


class ImageTransformInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    crop: Optional[CropRegion] = None
    max_height: Optional[Int] = Field(None, alias="maxHeight")
    max_width: Optional[Int] = Field(None, alias="maxWidth")
    preferred_content_type: Optional[ImageContentType] = Field(None, alias="preferredContentType")
    scale: Optional[Int] = 1
    typename__: Optional[Literal["ImageTransformInput"]] = Field("ImageTransformInput", alias="__typename")


class IncomingRequestLineItemInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order_line_item_id: Optional[ID] = Field(None, alias="fulfillmentOrderLineItemId")
    message: Optional[String] = None
    typename__: Optional[Literal["IncomingRequestLineItemInput"]] = Field(
        "IncomingRequestLineItemInput", alias="__typename"
    )


class InventoryAdjustQuantitiesInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    changes: Optional[list[InventoryChangeInput]] = None
    name: Optional[String] = None
    reason: Optional[String] = None
    reference_document_uri: Optional[String] = Field(None, alias="referenceDocumentUri")
    typename__: Optional[Literal["InventoryAdjustQuantitiesInput"]] = Field(
        "InventoryAdjustQuantitiesInput", alias="__typename"
    )


class InventoryBulkToggleActivationInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    activate: Optional[Boolean] = None
    location_id: Optional[ID] = Field(None, alias="locationId")
    typename__: Optional[Literal["InventoryBulkToggleActivationInput"]] = Field(
        "InventoryBulkToggleActivationInput", alias="__typename"
    )


class InventoryChangeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    delta: Optional[Int] = None
    inventory_item_id: Optional[ID] = Field(None, alias="inventoryItemId")
    ledger_document_uri: Optional[String] = Field(None, alias="ledgerDocumentUri")
    location_id: Optional[ID] = Field(None, alias="locationId")
    typename__: Optional[Literal["InventoryChangeInput"]] = Field("InventoryChangeInput", alias="__typename")


class InventoryItemInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cost: Optional[Decimal] = None
    country_code_of_origin: Optional[CountryCode] = Field(None, alias="countryCodeOfOrigin")
    country_harmonized_system_codes: Optional[list[CountryHarmonizedSystemCodeInput]] = Field(
        None, alias="countryHarmonizedSystemCodes"
    )
    harmonized_system_code: Optional[String] = Field(None, alias="harmonizedSystemCode")
    measurement: Optional[InventoryItemMeasurementInput] = None
    province_code_of_origin: Optional[String] = Field(None, alias="provinceCodeOfOrigin")
    requires_shipping: Optional[Boolean] = Field(None, alias="requiresShipping")
    sku: Optional[String] = None
    tracked: Optional[Boolean] = None
    typename__: Optional[Literal["InventoryItemInput"]] = Field("InventoryItemInput", alias="__typename")


class InventoryItemMeasurementInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    weight: Optional[WeightInput] = None
    typename__: Optional[Literal["InventoryItemMeasurementInput"]] = Field(
        "InventoryItemMeasurementInput", alias="__typename"
    )


class InventoryLevelInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    available_quantity: Optional[Int] = Field(None, alias="availableQuantity")
    location_id: Optional[ID] = Field(None, alias="locationId")
    typename__: Optional[Literal["InventoryLevelInput"]] = Field("InventoryLevelInput", alias="__typename")


class InventoryMoveQuantitiesInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    changes: Optional[list[InventoryMoveQuantityChange]] = None
    reason: Optional[String] = None
    reference_document_uri: Optional[String] = Field(None, alias="referenceDocumentUri")
    typename__: Optional[Literal["InventoryMoveQuantitiesInput"]] = Field(
        "InventoryMoveQuantitiesInput", alias="__typename"
    )


class InventoryMoveQuantityChange(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    from_: Optional[InventoryMoveQuantityTerminalInput] = Field(None, alias="from")
    inventory_item_id: Optional[ID] = Field(None, alias="inventoryItemId")
    quantity: Optional[Int] = None
    to: Optional[InventoryMoveQuantityTerminalInput] = None
    typename__: Optional[Literal["InventoryMoveQuantityChange"]] = Field(
        "InventoryMoveQuantityChange", alias="__typename"
    )


class InventoryMoveQuantityTerminalInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ledger_document_uri: Optional[String] = Field(None, alias="ledgerDocumentUri")
    location_id: Optional[ID] = Field(None, alias="locationId")
    name: Optional[String] = None
    typename__: Optional[Literal["InventoryMoveQuantityTerminalInput"]] = Field(
        "InventoryMoveQuantityTerminalInput", alias="__typename"
    )


class InventoryQuantityInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    compare_quantity: Optional[Int] = Field(None, alias="compareQuantity")
    inventory_item_id: Optional[ID] = Field(None, alias="inventoryItemId")
    location_id: Optional[ID] = Field(None, alias="locationId")
    quantity: Optional[Int] = None
    typename__: Optional[Literal["InventoryQuantityInput"]] = Field("InventoryQuantityInput", alias="__typename")


class InventoryScheduledChangeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    expected_at: Optional[DateTime] = Field(None, alias="expectedAt")
    from_name: Optional[String] = Field(None, alias="fromName")
    to_name: Optional[String] = Field(None, alias="toName")
    typename__: Optional[Literal["InventoryScheduledChangeInput"]] = Field(
        "InventoryScheduledChangeInput", alias="__typename"
    )


class InventoryScheduledChangeItemInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    inventory_item_id: Optional[ID] = Field(None, alias="inventoryItemId")
    ledger_document_uri: Optional[URL] = Field(None, alias="ledgerDocumentUri")
    location_id: Optional[ID] = Field(None, alias="locationId")
    scheduled_changes: Optional[list[InventoryScheduledChangeInput]] = Field(None, alias="scheduledChanges")
    typename__: Optional[Literal["InventoryScheduledChangeItemInput"]] = Field(
        "InventoryScheduledChangeItemInput", alias="__typename"
    )


class InventorySetOnHandQuantitiesInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    reason: Optional[String] = None
    reference_document_uri: Optional[String] = Field(None, alias="referenceDocumentUri")
    set_quantities: Optional[list[InventorySetQuantityInput]] = Field(None, alias="setQuantities")
    typename__: Optional[Literal["InventorySetOnHandQuantitiesInput"]] = Field(
        "InventorySetOnHandQuantitiesInput", alias="__typename"
    )


class InventorySetQuantitiesInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ignore_compare_quantity: Optional[Boolean] = Field(False, alias="ignoreCompareQuantity")
    name: Optional[String] = None
    quantities: Optional[list[InventoryQuantityInput]] = None
    reason: Optional[String] = None
    reference_document_uri: Optional[String] = Field(None, alias="referenceDocumentUri")
    typename__: Optional[Literal["InventorySetQuantitiesInput"]] = Field(
        "InventorySetQuantitiesInput", alias="__typename"
    )


class InventorySetQuantityInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    inventory_item_id: Optional[ID] = Field(None, alias="inventoryItemId")
    location_id: Optional[ID] = Field(None, alias="locationId")
    quantity: Optional[Int] = None
    typename__: Optional[Literal["InventorySetQuantityInput"]] = Field("InventorySetQuantityInput", alias="__typename")


class InventorySetScheduledChangesInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    items: Optional[list[InventoryScheduledChangeItemInput]] = None
    reason: Optional[String] = None
    reference_document_uri: Optional[URL] = Field(None, alias="referenceDocumentUri")
    typename__: Optional[Literal["InventorySetScheduledChangesInput"]] = Field(
        "InventorySetScheduledChangesInput", alias="__typename"
    )


class LinkedMetafieldCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    namespace: Optional[String] = None
    values: Optional[list[String]] = None
    typename__: Optional[Literal["LinkedMetafieldCreateInput"]] = Field(
        "LinkedMetafieldCreateInput", alias="__typename"
    )


class LinkedMetafieldInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    namespace: Optional[String] = None
    values: Optional[list[String]] = None
    typename__: Optional[Literal["LinkedMetafieldInput"]] = Field("LinkedMetafieldInput", alias="__typename")


class LinkedMetafieldUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    namespace: Optional[String] = None
    typename__: Optional[Literal["LinkedMetafieldUpdateInput"]] = Field(
        "LinkedMetafieldUpdateInput", alias="__typename"
    )


class LocalizationExtensionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[LocalizationExtensionKey] = None
    value: Optional[String] = None
    typename__: Optional[Literal["LocalizationExtensionInput"]] = Field(
        "LocalizationExtensionInput", alias="__typename"
    )


class LocationAddAddressInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    address2: Optional[String] = None
    city: Optional[String] = None
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    phone: Optional[String] = None
    province_code: Optional[String] = Field(None, alias="provinceCode")
    zip: Optional[String] = None
    typename__: Optional[Literal["LocationAddAddressInput"]] = Field("LocationAddAddressInput", alias="__typename")


class LocationAddInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address: Optional[LocationAddAddressInput] = None
    fulfills_online_orders: Optional[Boolean] = Field(True, alias="fulfillsOnlineOrders")
    metafields: Optional[list[MetafieldInput]] = None
    name: Optional[String] = None
    typename__: Optional[Literal["LocationAddInput"]] = Field("LocationAddInput", alias="__typename")


class LocationEditAddressInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    address2: Optional[String] = None
    city: Optional[String] = None
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    phone: Optional[String] = None
    province_code: Optional[String] = Field(None, alias="provinceCode")
    zip: Optional[String] = None
    typename__: Optional[Literal["LocationEditAddressInput"]] = Field("LocationEditAddressInput", alias="__typename")


class LocationEditInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address: Optional[LocationEditAddressInput] = None
    fulfills_online_orders: Optional[Boolean] = Field(None, alias="fulfillsOnlineOrders")
    metafields: Optional[list[MetafieldInput]] = None
    name: Optional[String] = None
    typename__: Optional[Literal["LocationEditInput"]] = Field("LocationEditInput", alias="__typename")


class MailingAddressInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address1: Optional[String] = None
    address2: Optional[String] = None
    city: Optional[String] = None
    company: Optional[String] = None
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    first_name: Optional[String] = Field(None, alias="firstName")
    last_name: Optional[String] = Field(None, alias="lastName")
    phone: Optional[String] = None
    province_code: Optional[String] = Field(None, alias="provinceCode")
    zip: Optional[String] = None
    typename__: Optional[Literal["MailingAddressInput"]] = Field("MailingAddressInput", alias="__typename")


class MarketCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    enabled: Optional[Boolean] = None
    handle: Optional[String] = None
    name: Optional[String] = None
    regions: Optional[list[MarketRegionCreateInput]] = None
    typename__: Optional[Literal["MarketCreateInput"]] = Field("MarketCreateInput", alias="__typename")


class MarketCurrencySettingsUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    base_currency: Optional[CurrencyCode] = Field(None, alias="baseCurrency")
    local_currencies: Optional[Boolean] = Field(None, alias="localCurrencies")
    typename__: Optional[Literal["MarketCurrencySettingsUpdateInput"]] = Field(
        "MarketCurrencySettingsUpdateInput", alias="__typename"
    )


class MarketLocalizationRegisterInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    market_id: Optional[ID] = Field(None, alias="marketId")
    market_localizable_content_digest: Optional[String] = Field(None, alias="marketLocalizableContentDigest")
    value: Optional[String] = None
    typename__: Optional[Literal["MarketLocalizationRegisterInput"]] = Field(
        "MarketLocalizationRegisterInput", alias="__typename"
    )


class MarketRegionCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country_code: Optional[CountryCode] = Field(None, alias="countryCode")
    typename__: Optional[Literal["MarketRegionCreateInput"]] = Field("MarketRegionCreateInput", alias="__typename")


class MarketUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    enabled: Optional[Boolean] = None
    handle: Optional[String] = None
    name: Optional[String] = None
    typename__: Optional[Literal["MarketUpdateInput"]] = Field("MarketUpdateInput", alias="__typename")


class MarketWebPresenceCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alternate_locales: Optional[list[String]] = Field(None, alias="alternateLocales")
    default_locale: Optional[String] = Field(None, alias="defaultLocale")
    domain_id: Optional[ID] = Field(None, alias="domainId")
    subfolder_suffix: Optional[String] = Field(None, alias="subfolderSuffix")
    typename__: Optional[Literal["MarketWebPresenceCreateInput"]] = Field(
        "MarketWebPresenceCreateInput", alias="__typename"
    )


class MarketWebPresenceUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alternate_locales: Optional[list[String]] = Field(None, alias="alternateLocales")
    default_locale: Optional[String] = Field(None, alias="defaultLocale")
    domain_id: Optional[ID] = Field(None, alias="domainId")
    subfolder_suffix: Optional[String] = Field(None, alias="subfolderSuffix")
    typename__: Optional[Literal["MarketWebPresenceUpdateInput"]] = Field(
        "MarketWebPresenceUpdateInput", alias="__typename"
    )


class MarketingActivityBudgetInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    budget_type: Optional[MarketingBudgetBudgetType] = Field(None, alias="budgetType")
    total: Optional[MoneyInput] = None
    typename__: Optional[Literal["MarketingActivityBudgetInput"]] = Field(
        "MarketingActivityBudgetInput", alias="__typename"
    )


class MarketingActivityCreateExternalInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ad_spend: Optional[MoneyInput] = Field(None, alias="adSpend")
    budget: Optional[MarketingActivityBudgetInput] = None
    channel_handle: Optional[String] = Field(None, alias="channelHandle")
    end: Optional[DateTime] = None
    hierarchy_level: Optional[MarketingActivityHierarchyLevel] = Field(None, alias="hierarchyLevel")
    marketing_channel_type: Optional[MarketingChannel] = Field(None, alias="marketingChannelType")
    parent_activity_id: Optional[ID] = Field(None, alias="parentActivityId")
    parent_remote_id: Optional[String] = Field(None, alias="parentRemoteId")
    referring_domain: Optional[String] = Field(None, alias="referringDomain")
    remote_id: Optional[String] = Field(None, alias="remoteId")
    remote_preview_image_url: Optional[URL] = Field(None, alias="remotePreviewImageUrl")
    remote_url: Optional[URL] = Field(None, alias="remoteUrl")
    scheduled_end: Optional[DateTime] = Field(None, alias="scheduledEnd")
    scheduled_start: Optional[DateTime] = Field(None, alias="scheduledStart")
    start: Optional[DateTime] = None
    status: Optional[MarketingActivityExternalStatus] = None
    tactic: Optional[MarketingTactic] = None
    title: Optional[String] = None
    url_parameter_value: Optional[String] = Field(None, alias="urlParameterValue")
    utm: Optional[UTMInput] = None
    typename__: Optional[Literal["MarketingActivityCreateExternalInput"]] = Field(
        "MarketingActivityCreateExternalInput", alias="__typename"
    )


class MarketingActivityCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    budget: Optional[MarketingActivityBudgetInput] = None
    context: Optional[String] = None
    form_data: Optional[String] = Field(None, alias="formData")
    marketing_activity_extension_id: Optional[ID] = Field(None, alias="marketingActivityExtensionId")
    marketing_activity_title: Optional[String] = Field(None, alias="marketingActivityTitle")
    status: Optional[MarketingActivityStatus] = None
    url_parameter_value: Optional[String] = Field(None, alias="urlParameterValue")
    utm: Optional[UTMInput] = None
    typename__: Optional[Literal["MarketingActivityCreateInput"]] = Field(
        "MarketingActivityCreateInput", alias="__typename"
    )


class MarketingActivityUpdateExternalInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ad_spend: Optional[MoneyInput] = Field(None, alias="adSpend")
    budget: Optional[MarketingActivityBudgetInput] = None
    end: Optional[DateTime] = None
    marketing_channel_type: Optional[MarketingChannel] = Field(None, alias="marketingChannelType")
    referring_domain: Optional[String] = Field(None, alias="referringDomain")
    remote_preview_image_url: Optional[URL] = Field(None, alias="remotePreviewImageUrl")
    remote_url: Optional[URL] = Field(None, alias="remoteUrl")
    scheduled_end: Optional[DateTime] = Field(None, alias="scheduledEnd")
    scheduled_start: Optional[DateTime] = Field(None, alias="scheduledStart")
    start: Optional[DateTime] = None
    status: Optional[MarketingActivityExternalStatus] = None
    tactic: Optional[MarketingTactic] = None
    title: Optional[String] = None
    typename__: Optional[Literal["MarketingActivityUpdateExternalInput"]] = Field(
        "MarketingActivityUpdateExternalInput", alias="__typename"
    )


class MarketingActivityUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    budget: Optional[MarketingActivityBudgetInput] = None
    errors: Optional[JSON] = None
    form_data: Optional[String] = Field(None, alias="formData")
    id: Optional[ID] = None
    marketed_resources: Optional[list[ID]] = Field(None, alias="marketedResources")
    marketing_recommendation_id: Optional[ID] = Field(None, alias="marketingRecommendationId")
    status: Optional[MarketingActivityStatus] = None
    target_status: Optional[MarketingActivityStatus] = Field(None, alias="targetStatus")
    title: Optional[String] = None
    url_parameter_value: Optional[String] = Field(None, alias="urlParameterValue")
    utm: Optional[UTMInput] = None
    typename__: Optional[Literal["MarketingActivityUpdateInput"]] = Field(
        "MarketingActivityUpdateInput", alias="__typename"
    )


class MarketingActivityUpsertExternalInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ad_spend: Optional[MoneyInput] = Field(None, alias="adSpend")
    budget: Optional[MarketingActivityBudgetInput] = None
    channel_handle: Optional[String] = Field(None, alias="channelHandle")
    end: Optional[DateTime] = None
    hierarchy_level: Optional[MarketingActivityHierarchyLevel] = Field(None, alias="hierarchyLevel")
    marketing_channel_type: Optional[MarketingChannel] = Field(None, alias="marketingChannelType")
    parent_remote_id: Optional[String] = Field(None, alias="parentRemoteId")
    referring_domain: Optional[String] = Field(None, alias="referringDomain")
    remote_id: Optional[String] = Field(None, alias="remoteId")
    remote_preview_image_url: Optional[URL] = Field(None, alias="remotePreviewImageUrl")
    remote_url: Optional[URL] = Field(None, alias="remoteUrl")
    scheduled_end: Optional[DateTime] = Field(None, alias="scheduledEnd")
    scheduled_start: Optional[DateTime] = Field(None, alias="scheduledStart")
    start: Optional[DateTime] = None
    status: Optional[MarketingActivityExternalStatus] = None
    tactic: Optional[MarketingTactic] = None
    title: Optional[String] = None
    url_parameter_value: Optional[String] = Field(None, alias="urlParameterValue")
    utm: Optional[UTMInput] = None
    typename__: Optional[Literal["MarketingActivityUpsertExternalInput"]] = Field(
        "MarketingActivityUpsertExternalInput", alias="__typename"
    )


class MarketingEngagementInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ad_spend: Optional[MoneyInput] = Field(None, alias="adSpend")
    clicks_count: Optional[Int] = Field(None, alias="clicksCount")
    comments_count: Optional[Int] = Field(None, alias="commentsCount")
    complaints_count: Optional[Int] = Field(None, alias="complaintsCount")
    fails_count: Optional[Int] = Field(None, alias="failsCount")
    favorites_count: Optional[Int] = Field(None, alias="favoritesCount")
    first_time_customers: Optional[Decimal] = Field(None, alias="firstTimeCustomers")
    impressions_count: Optional[Int] = Field(None, alias="impressionsCount")
    is_cumulative: Optional[Boolean] = Field(None, alias="isCumulative")
    occurred_on: Optional[Date] = Field(None, alias="occurredOn")
    orders: Optional[Decimal] = None
    returning_customers: Optional[Decimal] = Field(None, alias="returningCustomers")
    sales: Optional[MoneyInput] = None
    sends_count: Optional[Int] = Field(None, alias="sendsCount")
    sessions_count: Optional[Int] = Field(None, alias="sessionsCount")
    shares_count: Optional[Int] = Field(None, alias="sharesCount")
    unique_clicks_count: Optional[Int] = Field(None, alias="uniqueClicksCount")
    unique_views_count: Optional[Int] = Field(None, alias="uniqueViewsCount")
    unsubscribes_count: Optional[Int] = Field(None, alias="unsubscribesCount")
    utc_offset: Optional[UtcOffset] = Field(None, alias="utcOffset")
    views_count: Optional[Int] = Field(None, alias="viewsCount")
    typename__: Optional[Literal["MarketingEngagementInput"]] = Field("MarketingEngagementInput", alias="__typename")


class MenuItemCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    items: Optional[list[MenuItemCreateInput]] = None
    resource_id: Optional[ID] = Field(None, alias="resourceId")
    tags: Optional[list[String]] = None
    title: Optional[String] = None
    type: Optional[MenuItemType] = None
    url: Optional[String] = None
    typename__: Optional[Literal["MenuItemCreateInput"]] = Field("MenuItemCreateInput", alias="__typename")


class MenuItemUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    items: Optional[list[MenuItemUpdateInput]] = None
    resource_id: Optional[ID] = Field(None, alias="resourceId")
    tags: Optional[list[String]] = None
    title: Optional[String] = None
    type: Optional[MenuItemType] = None
    url: Optional[String] = None
    typename__: Optional[Literal["MenuItemUpdateInput"]] = Field("MenuItemUpdateInput", alias="__typename")


class MetafieldAccessGrantDeleteInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    grantee: Optional[String] = None
    typename__: Optional[Literal["MetafieldAccessGrantDeleteInput"]] = Field(
        "MetafieldAccessGrantDeleteInput", alias="__typename"
    )


class MetafieldAccessGrantInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    access: Optional[MetafieldGrantAccessLevel] = None
    grantee: Optional[String] = None
    typename__: Optional[Literal["MetafieldAccessGrantInput"]] = Field("MetafieldAccessGrantInput", alias="__typename")


class MetafieldAccessGrantOperationInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    create: Optional[MetafieldAccessGrantInput] = None
    delete: Optional[MetafieldAccessGrantDeleteInput] = None
    update: Optional[MetafieldAccessGrantInput] = None
    typename__: Optional[Literal["MetafieldAccessGrantOperationInput"]] = Field(
        "MetafieldAccessGrantOperationInput", alias="__typename"
    )


class MetafieldAccessInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    admin: Optional[MetafieldAdminAccessInput] = None
    customer_account: Optional[MetafieldCustomerAccountAccessInput] = Field(None, alias="customerAccount")
    grants: Optional[list[MetafieldAccessGrantInput]] = None
    storefront: Optional[MetafieldStorefrontAccessInput] = None
    typename__: Optional[Literal["MetafieldAccessInput"]] = Field("MetafieldAccessInput", alias="__typename")


class MetafieldAccessUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    admin: Optional[MetafieldAdminAccessInput] = None
    customer_account: Optional[MetafieldCustomerAccountAccessInput] = Field(None, alias="customerAccount")
    grants: Optional[list[MetafieldAccessGrantOperationInput]] = None
    storefront: Optional[MetafieldStorefrontAccessInput] = None
    typename__: Optional[Literal["MetafieldAccessUpdateInput"]] = Field(
        "MetafieldAccessUpdateInput", alias="__typename"
    )


class MetafieldDefinitionConstraintSubtypeIdentifier(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["MetafieldDefinitionConstraintSubtypeIdentifier"]] = Field(
        "MetafieldDefinitionConstraintSubtypeIdentifier", alias="__typename"
    )


class MetafieldDefinitionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    access: Optional[MetafieldAccessInput] = None
    description: Optional[String] = None
    key: Optional[String] = None
    name: Optional[String] = None
    namespace: Optional[String] = None
    owner_type: Optional[MetafieldOwnerType] = Field(None, alias="ownerType")
    pin: Optional[Boolean] = False
    type: Optional[String] = None
    use_as_collection_condition: Optional[Boolean] = Field(False, alias="useAsCollectionCondition")
    validations: Optional[list[MetafieldDefinitionValidationInput]] = None
    typename__: Optional[Literal["MetafieldDefinitionInput"]] = Field("MetafieldDefinitionInput", alias="__typename")


class MetafieldDefinitionUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    access: Optional[MetafieldAccessUpdateInput] = None
    description: Optional[String] = None
    key: Optional[String] = None
    name: Optional[String] = None
    namespace: Optional[String] = None
    owner_type: Optional[MetafieldOwnerType] = Field(None, alias="ownerType")
    pin: Optional[Boolean] = None
    use_as_collection_condition: Optional[Boolean] = Field(False, alias="useAsCollectionCondition")
    validations: Optional[list[MetafieldDefinitionValidationInput]] = None
    typename__: Optional[Literal["MetafieldDefinitionUpdateInput"]] = Field(
        "MetafieldDefinitionUpdateInput", alias="__typename"
    )


class MetafieldDefinitionValidationInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["MetafieldDefinitionValidationInput"]] = Field(
        "MetafieldDefinitionValidationInput", alias="__typename"
    )


class MetafieldDeleteInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    typename__: Optional[Literal["MetafieldDeleteInput"]] = Field("MetafieldDeleteInput", alias="__typename")


class MetafieldIdentifierInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    namespace: Optional[String] = None
    owner_id: Optional[ID] = Field(None, alias="ownerId")
    typename__: Optional[Literal["MetafieldIdentifierInput"]] = Field("MetafieldIdentifierInput", alias="__typename")


class MetafieldInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    key: Optional[String] = None
    namespace: Optional[String] = None
    type: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["MetafieldInput"]] = Field("MetafieldInput", alias="__typename")


class MetafieldStorefrontVisibilityInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    namespace: Optional[String] = None
    owner_type: Optional[MetafieldOwnerType] = Field(None, alias="ownerType")
    typename__: Optional[Literal["MetafieldStorefrontVisibilityInput"]] = Field(
        "MetafieldStorefrontVisibilityInput", alias="__typename"
    )


class MetafieldsSetInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    compare_digest: Optional[String] = Field(None, alias="compareDigest")
    key: Optional[String] = None
    namespace: Optional[String] = None
    owner_id: Optional[ID] = Field(None, alias="ownerId")
    type: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["MetafieldsSetInput"]] = Field("MetafieldsSetInput", alias="__typename")


class MetaobjectAccessInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    admin: Optional[MetaobjectAdminAccess] = None
    storefront: Optional[MetaobjectStorefrontAccess] = None
    typename__: Optional[Literal["MetaobjectAccessInput"]] = Field("MetaobjectAccessInput", alias="__typename")


class MetaobjectBulkDeleteWhereCondition(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    ids: Optional[list[ID]] = None
    type: Optional[String] = None
    typename__: Optional[Literal["MetaobjectBulkDeleteWhereCondition"]] = Field(
        "MetaobjectBulkDeleteWhereCondition", alias="__typename"
    )


class MetaobjectCapabilityCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    online_store: Optional[MetaobjectCapabilityOnlineStoreInput] = Field(None, alias="onlineStore")
    publishable: Optional[MetaobjectCapabilityPublishableInput] = None
    renderable: Optional[MetaobjectCapabilityRenderableInput] = None
    translatable: Optional[MetaobjectCapabilityTranslatableInput] = None
    typename__: Optional[Literal["MetaobjectCapabilityCreateInput"]] = Field(
        "MetaobjectCapabilityCreateInput", alias="__typename"
    )


class MetaobjectCapabilityDataInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    online_store: Optional[MetaobjectCapabilityDataOnlineStoreInput] = Field(None, alias="onlineStore")
    publishable: Optional[MetaobjectCapabilityDataPublishableInput] = None
    typename__: Optional[Literal["MetaobjectCapabilityDataInput"]] = Field(
        "MetaobjectCapabilityDataInput", alias="__typename"
    )


class MetaobjectCapabilityDataOnlineStoreInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    template_suffix: Optional[String] = Field(None, alias="templateSuffix")
    typename__: Optional[Literal["MetaobjectCapabilityDataOnlineStoreInput"]] = Field(
        "MetaobjectCapabilityDataOnlineStoreInput", alias="__typename"
    )


class MetaobjectCapabilityDataPublishableInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    status: Optional[MetaobjectStatus] = None
    typename__: Optional[Literal["MetaobjectCapabilityDataPublishableInput"]] = Field(
        "MetaobjectCapabilityDataPublishableInput", alias="__typename"
    )


class MetaobjectCapabilityDefinitionDataOnlineStoreInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    create_redirects: Optional[Boolean] = Field(False, alias="createRedirects")
    url_handle: Optional[String] = Field(None, alias="urlHandle")
    typename__: Optional[Literal["MetaobjectCapabilityDefinitionDataOnlineStoreInput"]] = Field(
        "MetaobjectCapabilityDefinitionDataOnlineStoreInput", alias="__typename"
    )


class MetaobjectCapabilityDefinitionDataRenderableInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    meta_description_key: Optional[String] = Field(None, alias="metaDescriptionKey")
    meta_title_key: Optional[String] = Field(None, alias="metaTitleKey")
    typename__: Optional[Literal["MetaobjectCapabilityDefinitionDataRenderableInput"]] = Field(
        "MetaobjectCapabilityDefinitionDataRenderableInput", alias="__typename"
    )


class MetaobjectCapabilityOnlineStoreInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    data: Optional[MetaobjectCapabilityDefinitionDataOnlineStoreInput] = None
    enabled: Optional[Boolean] = None
    typename__: Optional[Literal["MetaobjectCapabilityOnlineStoreInput"]] = Field(
        "MetaobjectCapabilityOnlineStoreInput", alias="__typename"
    )


class MetaobjectCapabilityPublishableInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    enabled: Optional[Boolean] = None
    typename__: Optional[Literal["MetaobjectCapabilityPublishableInput"]] = Field(
        "MetaobjectCapabilityPublishableInput", alias="__typename"
    )


class MetaobjectCapabilityRenderableInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    data: Optional[MetaobjectCapabilityDefinitionDataRenderableInput] = None
    enabled: Optional[Boolean] = None
    typename__: Optional[Literal["MetaobjectCapabilityRenderableInput"]] = Field(
        "MetaobjectCapabilityRenderableInput", alias="__typename"
    )


class MetaobjectCapabilityTranslatableInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    enabled: Optional[Boolean] = None
    typename__: Optional[Literal["MetaobjectCapabilityTranslatableInput"]] = Field(
        "MetaobjectCapabilityTranslatableInput", alias="__typename"
    )


class MetaobjectCapabilityUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    online_store: Optional[MetaobjectCapabilityOnlineStoreInput] = Field(None, alias="onlineStore")
    publishable: Optional[MetaobjectCapabilityPublishableInput] = None
    renderable: Optional[MetaobjectCapabilityRenderableInput] = None
    translatable: Optional[MetaobjectCapabilityTranslatableInput] = None
    typename__: Optional[Literal["MetaobjectCapabilityUpdateInput"]] = Field(
        "MetaobjectCapabilityUpdateInput", alias="__typename"
    )


class MetaobjectCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    capabilities: Optional[MetaobjectCapabilityDataInput] = None
    fields: Optional[list[MetaobjectFieldInput]] = None
    handle: Optional[String] = None
    type: Optional[String] = None
    typename__: Optional[Literal["MetaobjectCreateInput"]] = Field("MetaobjectCreateInput", alias="__typename")


class MetaobjectDefinitionCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    access: Optional[MetaobjectAccessInput] = None
    capabilities: Optional[MetaobjectCapabilityCreateInput] = None
    description: Optional[String] = None
    display_name_key: Optional[String] = Field(None, alias="displayNameKey")
    field_definitions: Optional[list[MetaobjectFieldDefinitionCreateInput]] = Field(None, alias="fieldDefinitions")
    name: Optional[String] = None
    type: Optional[String] = None
    typename__: Optional[Literal["MetaobjectDefinitionCreateInput"]] = Field(
        "MetaobjectDefinitionCreateInput", alias="__typename"
    )


class MetaobjectDefinitionUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    access: Optional[MetaobjectAccessInput] = None
    capabilities: Optional[MetaobjectCapabilityUpdateInput] = None
    description: Optional[String] = None
    display_name_key: Optional[String] = Field(None, alias="displayNameKey")
    field_definitions: Optional[list[MetaobjectFieldDefinitionOperationInput]] = Field(None, alias="fieldDefinitions")
    name: Optional[String] = None
    reset_field_order: Optional[Boolean] = Field(False, alias="resetFieldOrder")
    typename__: Optional[Literal["MetaobjectDefinitionUpdateInput"]] = Field(
        "MetaobjectDefinitionUpdateInput", alias="__typename"
    )


class MetaobjectFieldDefinitionCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[String] = None
    key: Optional[String] = None
    name: Optional[String] = None
    required: Optional[Boolean] = False
    type: Optional[String] = None
    validations: Optional[list[MetafieldDefinitionValidationInput]] = None
    typename__: Optional[Literal["MetaobjectFieldDefinitionCreateInput"]] = Field(
        "MetaobjectFieldDefinitionCreateInput", alias="__typename"
    )


class MetaobjectFieldDefinitionDeleteInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    typename__: Optional[Literal["MetaobjectFieldDefinitionDeleteInput"]] = Field(
        "MetaobjectFieldDefinitionDeleteInput", alias="__typename"
    )


class MetaobjectFieldDefinitionOperationInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    create: Optional[MetaobjectFieldDefinitionCreateInput] = None
    delete: Optional[MetaobjectFieldDefinitionDeleteInput] = None
    update: Optional[MetaobjectFieldDefinitionUpdateInput] = None
    typename__: Optional[Literal["MetaobjectFieldDefinitionOperationInput"]] = Field(
        "MetaobjectFieldDefinitionOperationInput", alias="__typename"
    )


class MetaobjectFieldDefinitionUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[String] = None
    key: Optional[String] = None
    name: Optional[String] = None
    required: Optional[Boolean] = None
    validations: Optional[list[MetafieldDefinitionValidationInput]] = None
    typename__: Optional[Literal["MetaobjectFieldDefinitionUpdateInput"]] = Field(
        "MetaobjectFieldDefinitionUpdateInput", alias="__typename"
    )


class MetaobjectFieldInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["MetaobjectFieldInput"]] = Field("MetaobjectFieldInput", alias="__typename")


class MetaobjectHandleInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    handle: Optional[String] = None
    type: Optional[String] = None
    typename__: Optional[Literal["MetaobjectHandleInput"]] = Field("MetaobjectHandleInput", alias="__typename")


class MetaobjectUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    capabilities: Optional[MetaobjectCapabilityDataInput] = None
    fields: Optional[list[MetaobjectFieldInput]] = None
    handle: Optional[String] = None
    redirect_new_handle: Optional[Boolean] = Field(False, alias="redirectNewHandle")
    typename__: Optional[Literal["MetaobjectUpdateInput"]] = Field("MetaobjectUpdateInput", alias="__typename")


class MetaobjectUpsertInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    capabilities: Optional[MetaobjectCapabilityDataInput] = None
    fields: Optional[list[MetaobjectFieldInput]] = None
    handle: Optional[String] = None
    typename__: Optional[Literal["MetaobjectUpsertInput"]] = Field("MetaobjectUpsertInput", alias="__typename")


class MobilePlatformApplicationCreateAndroidInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_links_enabled: Optional[Boolean] = Field(None, alias="appLinksEnabled")
    application_id: Optional[String] = Field(None, alias="applicationId")
    sha256_cert_fingerprints: Optional[list[String]] = Field(None, alias="sha256CertFingerprints")
    typename__: Optional[Literal["MobilePlatformApplicationCreateAndroidInput"]] = Field(
        "MobilePlatformApplicationCreateAndroidInput", alias="__typename"
    )


class MobilePlatformApplicationCreateAppleInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_clip_application_id: Optional[String] = Field(None, alias="appClipApplicationId")
    app_clips_enabled: Optional[Boolean] = Field(None, alias="appClipsEnabled")
    app_id: Optional[String] = Field(None, alias="appId")
    shared_web_credentials_enabled: Optional[Boolean] = Field(None, alias="sharedWebCredentialsEnabled")
    universal_links_enabled: Optional[Boolean] = Field(None, alias="universalLinksEnabled")
    typename__: Optional[Literal["MobilePlatformApplicationCreateAppleInput"]] = Field(
        "MobilePlatformApplicationCreateAppleInput", alias="__typename"
    )


class MobilePlatformApplicationCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    android: Optional[MobilePlatformApplicationCreateAndroidInput] = None
    apple: Optional[MobilePlatformApplicationCreateAppleInput] = None
    typename__: Optional[Literal["MobilePlatformApplicationCreateInput"]] = Field(
        "MobilePlatformApplicationCreateInput", alias="__typename"
    )


class MobilePlatformApplicationUpdateAndroidInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_links_enabled: Optional[Boolean] = Field(None, alias="appLinksEnabled")
    application_id: Optional[String] = Field(None, alias="applicationId")
    sha256_cert_fingerprints: Optional[list[String]] = Field(None, alias="sha256CertFingerprints")
    typename__: Optional[Literal["MobilePlatformApplicationUpdateAndroidInput"]] = Field(
        "MobilePlatformApplicationUpdateAndroidInput", alias="__typename"
    )


class MobilePlatformApplicationUpdateAppleInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_clip_application_id: Optional[String] = Field(None, alias="appClipApplicationId")
    app_clips_enabled: Optional[Boolean] = Field(None, alias="appClipsEnabled")
    app_id: Optional[String] = Field(None, alias="appId")
    shared_web_credentials_enabled: Optional[Boolean] = Field(None, alias="sharedWebCredentialsEnabled")
    universal_links_enabled: Optional[Boolean] = Field(None, alias="universalLinksEnabled")
    typename__: Optional[Literal["MobilePlatformApplicationUpdateAppleInput"]] = Field(
        "MobilePlatformApplicationUpdateAppleInput", alias="__typename"
    )


class MobilePlatformApplicationUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    android: Optional[MobilePlatformApplicationUpdateAndroidInput] = None
    apple: Optional[MobilePlatformApplicationUpdateAppleInput] = None
    typename__: Optional[Literal["MobilePlatformApplicationUpdateInput"]] = Field(
        "MobilePlatformApplicationUpdateInput", alias="__typename"
    )


class MoneyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[Decimal] = None
    currency_code: Optional[CurrencyCode] = Field(None, alias="currencyCode")
    typename__: Optional[Literal["MoneyInput"]] = Field("MoneyInput", alias="__typename")


class MoveInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    new_position: Optional[UnsignedInt64] = Field(None, alias="newPosition")
    typename__: Optional[Literal["MoveInput"]] = Field("MoveInput", alias="__typename")


class ObjectDimensionsInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    height: Optional[Float] = None
    length: Optional[Float] = None
    unit: Optional[LengthUnit] = None
    width: Optional[Float] = None
    typename__: Optional[Literal["ObjectDimensionsInput"]] = Field("ObjectDimensionsInput", alias="__typename")


class OptionAndValueInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    linked_metafield: Optional[LinkedMetafieldInput] = Field(None, alias="linkedMetafield")
    name: Optional[String] = None
    option_id: Optional[ID] = Field(None, alias="optionId")
    values: Optional[list[String]] = None
    typename__: Optional[Literal["OptionAndValueInput"]] = Field("OptionAndValueInput", alias="__typename")


class OptionCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    linked_metafield: Optional[LinkedMetafieldCreateInput] = Field(None, alias="linkedMetafield")
    name: Optional[String] = None
    position: Optional[Int] = None
    values: Optional[list[OptionValueCreateInput]] = None
    typename__: Optional[Literal["OptionCreateInput"]] = Field("OptionCreateInput", alias="__typename")


class OptionReorderInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    name: Optional[String] = None
    values: Optional[list[OptionValueReorderInput]] = None
    typename__: Optional[Literal["OptionReorderInput"]] = Field("OptionReorderInput", alias="__typename")


class OptionSetInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    linked_metafield: Optional[LinkedMetafieldCreateInput] = Field(None, alias="linkedMetafield")
    name: Optional[String] = None
    position: Optional[Int] = None
    values: Optional[list[OptionValueSetInput]] = None
    typename__: Optional[Literal["OptionSetInput"]] = Field("OptionSetInput", alias="__typename")


class OptionUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    linked_metafield: Optional[LinkedMetafieldUpdateInput] = Field(None, alias="linkedMetafield")
    name: Optional[String] = None
    position: Optional[Int] = None
    typename__: Optional[Literal["OptionUpdateInput"]] = Field("OptionUpdateInput", alias="__typename")


class OptionValueCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    linked_metafield_value: Optional[String] = Field(None, alias="linkedMetafieldValue")
    name: Optional[String] = None
    typename__: Optional[Literal["OptionValueCreateInput"]] = Field("OptionValueCreateInput", alias="__typename")


class OptionValueReorderInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    name: Optional[String] = None
    typename__: Optional[Literal["OptionValueReorderInput"]] = Field("OptionValueReorderInput", alias="__typename")


class OptionValueSetInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    name: Optional[String] = None
    typename__: Optional[Literal["OptionValueSetInput"]] = Field("OptionValueSetInput", alias="__typename")


class OptionValueUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    linked_metafield_value: Optional[String] = Field(None, alias="linkedMetafieldValue")
    name: Optional[String] = None
    typename__: Optional[Literal["OptionValueUpdateInput"]] = Field("OptionValueUpdateInput", alias="__typename")


class OrderCaptureInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[Money] = None
    currency: Optional[CurrencyCode] = None
    final_capture: Optional[Boolean] = Field(None, alias="finalCapture")
    id: Optional[ID] = None
    parent_transaction_id: Optional[ID] = Field(None, alias="parentTransactionId")
    typename__: Optional[Literal["OrderCaptureInput"]] = Field("OrderCaptureInput", alias="__typename")


class OrderCloseInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    typename__: Optional[Literal["OrderCloseInput"]] = Field("OrderCloseInput", alias="__typename")


class OrderEditAddShippingLineInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    price: Optional[MoneyInput] = None
    title: Optional[String] = None
    typename__: Optional[Literal["OrderEditAddShippingLineInput"]] = Field(
        "OrderEditAddShippingLineInput", alias="__typename"
    )


class OrderEditAppliedDiscountInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[String] = None
    fixed_value: Optional[MoneyInput] = Field(None, alias="fixedValue")
    percent_value: Optional[Float] = Field(None, alias="percentValue")
    typename__: Optional[Literal["OrderEditAppliedDiscountInput"]] = Field(
        "OrderEditAppliedDiscountInput", alias="__typename"
    )


class OrderEditUpdateShippingLineInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    price: Optional[MoneyInput] = None
    title: Optional[String] = None
    typename__: Optional[Literal["OrderEditUpdateShippingLineInput"]] = Field(
        "OrderEditUpdateShippingLineInput", alias="__typename"
    )


class OrderInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    custom_attributes: Optional[list[AttributeInput]] = Field(None, alias="customAttributes")
    email: Optional[String] = None
    id: Optional[ID] = None
    localization_extensions: Optional[list[LocalizationExtensionInput]] = Field(None, alias="localizationExtensions")
    metafields: Optional[list[MetafieldInput]] = None
    note: Optional[String] = None
    po_number: Optional[String] = Field(None, alias="poNumber")
    shipping_address: Optional[MailingAddressInput] = Field(None, alias="shippingAddress")
    tags: Optional[list[String]] = None
    typename__: Optional[Literal["OrderInput"]] = Field("OrderInput", alias="__typename")


class OrderMarkAsPaidInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    typename__: Optional[Literal["OrderMarkAsPaidInput"]] = Field("OrderMarkAsPaidInput", alias="__typename")


class OrderOpenInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    typename__: Optional[Literal["OrderOpenInput"]] = Field("OrderOpenInput", alias="__typename")


class OrderRiskAssessmentCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    facts: Optional[list[OrderRiskAssessmentFactInput]] = None
    order_id: Optional[ID] = Field(None, alias="orderId")
    risk_level: Optional[RiskAssessmentResult] = Field(None, alias="riskLevel")
    typename__: Optional[Literal["OrderRiskAssessmentCreateInput"]] = Field(
        "OrderRiskAssessmentCreateInput", alias="__typename"
    )


class OrderRiskAssessmentFactInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[String] = None
    sentiment: Optional[RiskFactSentiment] = None
    typename__: Optional[Literal["OrderRiskAssessmentFactInput"]] = Field(
        "OrderRiskAssessmentFactInput", alias="__typename"
    )


class OrderTransactionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[Money] = None
    gateway: Optional[String] = None
    kind: Optional[OrderTransactionKind] = None
    order_id: Optional[ID] = Field(None, alias="orderId")
    parent_id: Optional[ID] = Field(None, alias="parentId")
    typename__: Optional[Literal["OrderTransactionInput"]] = Field("OrderTransactionInput", alias="__typename")


class PaymentCustomizationInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    enabled: Optional[Boolean] = None
    function_id: Optional[String] = Field(None, alias="functionId")
    metafields: Optional[list[MetafieldInput]] = []
    title: Optional[String] = None
    typename__: Optional[Literal["PaymentCustomizationInput"]] = Field("PaymentCustomizationInput", alias="__typename")


class PaymentScheduleInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    due_at: Optional[DateTime] = Field(None, alias="dueAt")
    issued_at: Optional[DateTime] = Field(None, alias="issuedAt")
    typename__: Optional[Literal["PaymentScheduleInput"]] = Field("PaymentScheduleInput", alias="__typename")


class PaymentTermsCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    payment_schedules: Optional[list[PaymentScheduleInput]] = Field(None, alias="paymentSchedules")
    payment_terms_template_id: Optional[ID] = Field(None, alias="paymentTermsTemplateId")
    typename__: Optional[Literal["PaymentTermsCreateInput"]] = Field("PaymentTermsCreateInput", alias="__typename")


class PaymentTermsDeleteInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    payment_terms_id: Optional[ID] = Field(None, alias="paymentTermsId")
    typename__: Optional[Literal["PaymentTermsDeleteInput"]] = Field("PaymentTermsDeleteInput", alias="__typename")


class PaymentTermsInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    payment_schedules: Optional[list[PaymentScheduleInput]] = Field(None, alias="paymentSchedules")
    payment_terms_template_id: Optional[ID] = Field(None, alias="paymentTermsTemplateId")
    typename__: Optional[Literal["PaymentTermsInput"]] = Field("PaymentTermsInput", alias="__typename")


class PaymentTermsUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    payment_terms_attributes: Optional[PaymentTermsInput] = Field(None, alias="paymentTermsAttributes")
    payment_terms_id: Optional[ID] = Field(None, alias="paymentTermsId")
    typename__: Optional[Literal["PaymentTermsUpdateInput"]] = Field("PaymentTermsUpdateInput", alias="__typename")


class PreparedFulfillmentOrderLineItemsInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_order_id: Optional[ID] = Field(None, alias="fulfillmentOrderId")
    typename__: Optional[Literal["PreparedFulfillmentOrderLineItemsInput"]] = Field(
        "PreparedFulfillmentOrderLineItemsInput", alias="__typename"
    )


class PriceInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    calculation: Optional[PriceCalculationType] = None
    price: Optional[Money] = None
    typename__: Optional[Literal["PriceInput"]] = Field("PriceInput", alias="__typename")


class PriceListAdjustmentInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Optional[PriceListAdjustmentType] = None
    value: Optional[Float] = None
    typename__: Optional[Literal["PriceListAdjustmentInput"]] = Field("PriceListAdjustmentInput", alias="__typename")


class PriceListAdjustmentSettingsInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    compare_at_mode: Optional[PriceListCompareAtMode] = Field("ADJUSTED", alias="compareAtMode")
    typename__: Optional[Literal["PriceListAdjustmentSettingsInput"]] = Field(
        "PriceListAdjustmentSettingsInput", alias="__typename"
    )


class PriceListCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    catalog_id: Optional[ID] = Field(None, alias="catalogId")
    currency: Optional[CurrencyCode] = None
    name: Optional[String] = None
    parent: Optional[PriceListParentCreateInput] = None
    typename__: Optional[Literal["PriceListCreateInput"]] = Field("PriceListCreateInput", alias="__typename")


class PriceListParentCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    adjustment: Optional[PriceListAdjustmentInput] = None
    settings: Optional[PriceListAdjustmentSettingsInput] = None
    typename__: Optional[Literal["PriceListParentCreateInput"]] = Field(
        "PriceListParentCreateInput", alias="__typename"
    )


class PriceListParentUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    adjustment: Optional[PriceListAdjustmentInput] = None
    settings: Optional[PriceListAdjustmentSettingsInput] = None
    typename__: Optional[Literal["PriceListParentUpdateInput"]] = Field(
        "PriceListParentUpdateInput", alias="__typename"
    )


class PriceListPriceInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    compare_at_price: Optional[MoneyInput] = Field(None, alias="compareAtPrice")
    price: Optional[MoneyInput] = None
    variant_id: Optional[ID] = Field(None, alias="variantId")
    typename__: Optional[Literal["PriceListPriceInput"]] = Field("PriceListPriceInput", alias="__typename")


class PriceListProductPriceInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    price: Optional[MoneyInput] = None
    product_id: Optional[ID] = Field(None, alias="productId")
    typename__: Optional[Literal["PriceListProductPriceInput"]] = Field(
        "PriceListProductPriceInput", alias="__typename"
    )


class PriceListUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    catalog_id: Optional[ID] = Field(None, alias="catalogId")
    currency: Optional[CurrencyCode] = None
    name: Optional[String] = None
    parent: Optional[PriceListParentUpdateInput] = None
    typename__: Optional[Literal["PriceListUpdateInput"]] = Field("PriceListUpdateInput", alias="__typename")


class PriceRuleCustomerSelectionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_ids_to_add: Optional[list[ID]] = Field(None, alias="customerIdsToAdd")
    customer_ids_to_remove: Optional[list[ID]] = Field(None, alias="customerIdsToRemove")
    for_all_customers: Optional[Boolean] = Field(False, alias="forAllCustomers")
    segment_ids: Optional[list[ID]] = Field(None, alias="segmentIds")
    typename__: Optional[Literal["PriceRuleCustomerSelectionInput"]] = Field(
        "PriceRuleCustomerSelectionInput", alias="__typename"
    )


class PriceRuleDiscountCodeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[String] = None
    typename__: Optional[Literal["PriceRuleDiscountCodeInput"]] = Field(
        "PriceRuleDiscountCodeInput", alias="__typename"
    )


class PriceRuleEntitlementToPrerequisiteQuantityRatioInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    entitlement_quantity: Optional[Int] = Field(None, alias="entitlementQuantity")
    prerequisite_quantity: Optional[Int] = Field(None, alias="prerequisiteQuantity")
    typename__: Optional[Literal["PriceRuleEntitlementToPrerequisiteQuantityRatioInput"]] = Field(
        "PriceRuleEntitlementToPrerequisiteQuantityRatioInput", alias="__typename"
    )


class PriceRuleInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    allocation_limit: Optional[Int] = Field(None, alias="allocationLimit")
    allocation_method: Optional[PriceRuleAllocationMethod] = Field(None, alias="allocationMethod")
    combines_with: Optional[DiscountCombinesWithInput] = Field(None, alias="combinesWith")
    customer_selection: Optional[PriceRuleCustomerSelectionInput] = Field(None, alias="customerSelection")
    item_entitlements: Optional[PriceRuleItemEntitlementsInput] = Field(None, alias="itemEntitlements")
    item_prerequisites: Optional[PriceRuleItemPrerequisitesInput] = Field(None, alias="itemPrerequisites")
    once_per_customer: Optional[Boolean] = Field(False, alias="oncePerCustomer")
    prerequisite_quantity_range: Optional[PriceRuleQuantityRangeInput] = Field(None, alias="prerequisiteQuantityRange")
    prerequisite_shipping_price_range: Optional[PriceRuleMoneyRangeInput] = Field(
        None, alias="prerequisiteShippingPriceRange"
    )
    prerequisite_subtotal_range: Optional[PriceRuleMoneyRangeInput] = Field(None, alias="prerequisiteSubtotalRange")
    prerequisite_to_entitlement_quantity_ratio: Optional[PriceRulePrerequisiteToEntitlementQuantityRatioInput] = Field(
        None, alias="prerequisiteToEntitlementQuantityRatio"
    )
    shipping_entitlements: Optional[PriceRuleShippingEntitlementsInput] = Field(None, alias="shippingEntitlements")
    target: Optional[PriceRuleTarget] = None
    title: Optional[String] = None
    usage_limit: Optional[Int] = Field(None, alias="usageLimit")
    validity_period: Optional[PriceRuleValidityPeriodInput] = Field(None, alias="validityPeriod")
    value: Optional[PriceRuleValueInput] = None
    typename__: Optional[Literal["PriceRuleInput"]] = Field("PriceRuleInput", alias="__typename")


class PriceRuleItemEntitlementsInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    collection_ids: Optional[list[ID]] = Field(None, alias="collectionIds")
    product_ids: Optional[list[ID]] = Field(None, alias="productIds")
    product_variant_ids: Optional[list[ID]] = Field(None, alias="productVariantIds")
    target_all_line_items: Optional[Boolean] = Field(False, alias="targetAllLineItems")
    typename__: Optional[Literal["PriceRuleItemEntitlementsInput"]] = Field(
        "PriceRuleItemEntitlementsInput", alias="__typename"
    )


class PriceRuleItemPrerequisitesInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    collection_ids: Optional[list[ID]] = Field(None, alias="collectionIds")
    product_ids: Optional[list[ID]] = Field(None, alias="productIds")
    product_variant_ids: Optional[list[ID]] = Field(None, alias="productVariantIds")
    typename__: Optional[Literal["PriceRuleItemPrerequisitesInput"]] = Field(
        "PriceRuleItemPrerequisitesInput", alias="__typename"
    )


class PriceRuleMoneyRangeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    greater_than: Optional[Money] = Field(None, alias="greaterThan")
    greater_than_or_equal_to: Optional[Money] = Field(None, alias="greaterThanOrEqualTo")
    less_than: Optional[Money] = Field(None, alias="lessThan")
    less_than_or_equal_to: Optional[Money] = Field(None, alias="lessThanOrEqualTo")
    typename__: Optional[Literal["PriceRuleMoneyRangeInput"]] = Field("PriceRuleMoneyRangeInput", alias="__typename")


class PriceRulePrerequisiteToEntitlementQuantityRatioInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    entitlement_quantity: Optional[Int] = Field(None, alias="entitlementQuantity")
    prerequisite_quantity: Optional[Int] = Field(None, alias="prerequisiteQuantity")
    typename__: Optional[Literal["PriceRulePrerequisiteToEntitlementQuantityRatioInput"]] = Field(
        "PriceRulePrerequisiteToEntitlementQuantityRatioInput", alias="__typename"
    )


class PriceRuleQuantityRangeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    greater_than: Optional[Int] = Field(None, alias="greaterThan")
    greater_than_or_equal_to: Optional[Int] = Field(None, alias="greaterThanOrEqualTo")
    less_than: Optional[Int] = Field(None, alias="lessThan")
    less_than_or_equal_to: Optional[Int] = Field(None, alias="lessThanOrEqualTo")
    typename__: Optional[Literal["PriceRuleQuantityRangeInput"]] = Field(
        "PriceRuleQuantityRangeInput", alias="__typename"
    )


class PriceRuleShippingEntitlementsInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country_codes: Optional[list[CountryCode]] = Field(None, alias="countryCodes")
    include_rest_of_world: Optional[Boolean] = Field(False, alias="includeRestOfWorld")
    target_all_shipping_lines: Optional[Boolean] = Field(False, alias="targetAllShippingLines")
    typename__: Optional[Literal["PriceRuleShippingEntitlementsInput"]] = Field(
        "PriceRuleShippingEntitlementsInput", alias="__typename"
    )


class PriceRuleValidityPeriodInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    end: Optional[DateTime] = None
    start: Optional[DateTime] = None
    typename__: Optional[Literal["PriceRuleValidityPeriodInput"]] = Field(
        "PriceRuleValidityPeriodInput", alias="__typename"
    )


class PriceRuleValueInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fixed_amount_value: Optional[Money] = Field(None, alias="fixedAmountValue")
    percentage_value: Optional[Float] = Field(None, alias="percentageValue")
    typename__: Optional[Literal["PriceRuleValueInput"]] = Field("PriceRuleValueInput", alias="__typename")


class PrivateMetafieldDeleteInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    namespace: Optional[String] = None
    owner: Optional[ID] = None
    typename__: Optional[Literal["PrivateMetafieldDeleteInput"]] = Field(
        "PrivateMetafieldDeleteInput", alias="__typename"
    )


class PrivateMetafieldInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    namespace: Optional[String] = None
    owner: Optional[ID] = None
    value_input: Optional[PrivateMetafieldValueInput] = Field(None, alias="valueInput")
    typename__: Optional[Literal["PrivateMetafieldInput"]] = Field("PrivateMetafieldInput", alias="__typename")


class PrivateMetafieldValueInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    value: Optional[String] = None
    value_type: Optional[PrivateMetafieldValueType] = Field(None, alias="valueType")
    typename__: Optional[Literal["PrivateMetafieldValueInput"]] = Field(
        "PrivateMetafieldValueInput", alias="__typename"
    )


class ProductAppendImagesInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    images: Optional[list[ImageInput]] = None
    typename__: Optional[Literal["ProductAppendImagesInput"]] = Field("ProductAppendImagesInput", alias="__typename")


class ProductBundleComponentInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    option_selections: Optional[list[ProductBundleComponentOptionSelectionInput]] = Field(
        None, alias="optionSelections"
    )
    product_id: Optional[ID] = Field(None, alias="productId")
    quantity: Optional[Int] = None
    quantity_option: Optional[ProductBundleComponentQuantityOptionInput] = Field(None, alias="quantityOption")
    typename__: Optional[Literal["ProductBundleComponentInput"]] = Field(
        "ProductBundleComponentInput", alias="__typename"
    )


class ProductBundleComponentOptionSelectionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    component_option_id: Optional[ID] = Field(None, alias="componentOptionId")
    name: Optional[String] = None
    values: Optional[list[String]] = None
    typename__: Optional[Literal["ProductBundleComponentOptionSelectionInput"]] = Field(
        "ProductBundleComponentOptionSelectionInput", alias="__typename"
    )


class ProductBundleComponentQuantityOptionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[String] = None
    values: Optional[list[ProductBundleComponentQuantityOptionValueInput]] = None
    typename__: Optional[Literal["ProductBundleComponentQuantityOptionInput"]] = Field(
        "ProductBundleComponentQuantityOptionInput", alias="__typename"
    )


class ProductBundleComponentQuantityOptionValueInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[String] = None
    quantity: Optional[Int] = None
    typename__: Optional[Literal["ProductBundleComponentQuantityOptionValueInput"]] = Field(
        "ProductBundleComponentQuantityOptionValueInput", alias="__typename"
    )


class ProductBundleCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    components: Optional[list[ProductBundleComponentInput]] = None
    title: Optional[String] = None
    typename__: Optional[Literal["ProductBundleCreateInput"]] = Field("ProductBundleCreateInput", alias="__typename")


class ProductBundleUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    components: Optional[list[ProductBundleComponentInput]] = None
    product_id: Optional[ID] = Field(None, alias="productId")
    title: Optional[String] = None
    typename__: Optional[Literal["ProductBundleUpdateInput"]] = Field("ProductBundleUpdateInput", alias="__typename")


class ProductCategoryInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product_taxonomy_node_id: Optional[ID] = Field(None, alias="productTaxonomyNodeId")
    typename__: Optional[Literal["ProductCategoryInput"]] = Field("ProductCategoryInput", alias="__typename")


class ProductClaimOwnershipInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    bundles: Optional[Boolean] = None
    typename__: Optional[Literal["ProductClaimOwnershipInput"]] = Field(
        "ProductClaimOwnershipInput", alias="__typename"
    )


class ProductDeleteInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    typename__: Optional[Literal["ProductDeleteInput"]] = Field("ProductDeleteInput", alias="__typename")


class ProductFeedInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    country: Optional[CountryCode] = None
    language: Optional[LanguageCode] = None
    typename__: Optional[Literal["ProductFeedInput"]] = Field("ProductFeedInput", alias="__typename")


class ProductInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    category: Optional[ID] = None
    claim_ownership: Optional[ProductClaimOwnershipInput] = Field(None, alias="claimOwnership")
    collections_to_join: Optional[list[ID]] = Field(None, alias="collectionsToJoin")
    collections_to_leave: Optional[list[ID]] = Field(None, alias="collectionsToLeave")
    combined_listing_role: Optional[CombinedListingsRole] = Field(None, alias="combinedListingRole")
    custom_product_type: Optional[String] = Field(None, alias="customProductType")
    description_html: Optional[String] = Field(None, alias="descriptionHtml")
    gift_card: Optional[Boolean] = Field(None, alias="giftCard")
    gift_card_template_suffix: Optional[String] = Field(None, alias="giftCardTemplateSuffix")
    handle: Optional[String] = None
    id: Optional[ID] = None
    metafields: Optional[list[MetafieldInput]] = None
    product_options: Optional[list[OptionCreateInput]] = Field(None, alias="productOptions")
    product_type: Optional[String] = Field(None, alias="productType")
    redirect_new_handle: Optional[Boolean] = Field(None, alias="redirectNewHandle")
    requires_selling_plan: Optional[Boolean] = Field(None, alias="requiresSellingPlan")
    seo: Optional[SEOInput] = None
    status: Optional[ProductStatus] = None
    tags: Optional[list[String]] = None
    template_suffix: Optional[String] = Field(None, alias="templateSuffix")
    title: Optional[String] = None
    vendor: Optional[String] = None
    typename__: Optional[Literal["ProductInput"]] = Field("ProductInput", alias="__typename")


class ProductPublicationInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    publication_id: Optional[ID] = Field(None, alias="publicationId")
    publish_date: Optional[DateTime] = Field(None, alias="publishDate")
    typename__: Optional[Literal["ProductPublicationInput"]] = Field("ProductPublicationInput", alias="__typename")


class ProductPublishInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    product_publications: Optional[list[ProductPublicationInput]] = Field(None, alias="productPublications")
    typename__: Optional[Literal["ProductPublishInput"]] = Field("ProductPublishInput", alias="__typename")


class ProductResourceFeedbackInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    feedback_generated_at: Optional[DateTime] = Field(None, alias="feedbackGeneratedAt")
    messages: Optional[list[String]] = None
    product_id: Optional[ID] = Field(None, alias="productId")
    product_updated_at: Optional[DateTime] = Field(None, alias="productUpdatedAt")
    state: Optional[ResourceFeedbackState] = None
    typename__: Optional[Literal["ProductResourceFeedbackInput"]] = Field(
        "ProductResourceFeedbackInput", alias="__typename"
    )


class ProductSetInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    category: Optional[ID] = None
    claim_ownership: Optional[ProductClaimOwnershipInput] = Field(None, alias="claimOwnership")
    collections: Optional[list[ID]] = None
    combined_listing_role: Optional[CombinedListingsRole] = Field(None, alias="combinedListingRole")
    custom_product_type: Optional[String] = Field(None, alias="customProductType")
    description_html: Optional[String] = Field(None, alias="descriptionHtml")
    gift_card: Optional[Boolean] = Field(None, alias="giftCard")
    gift_card_template_suffix: Optional[String] = Field(None, alias="giftCardTemplateSuffix")
    handle: Optional[String] = None
    id: Optional[ID] = None
    media_ids: Optional[list[ID]] = Field(None, alias="mediaIds")
    metafields: Optional[list[MetafieldInput]] = None
    product_options: Optional[list[OptionSetInput]] = Field(None, alias="productOptions")
    product_type: Optional[String] = Field(None, alias="productType")
    redirect_new_handle: Optional[Boolean] = Field(None, alias="redirectNewHandle")
    requires_selling_plan: Optional[Boolean] = Field(None, alias="requiresSellingPlan")
    seo: Optional[SEOInput] = None
    status: Optional[ProductStatus] = None
    tags: Optional[list[String]] = None
    template_suffix: Optional[String] = Field(None, alias="templateSuffix")
    title: Optional[String] = None
    variants: Optional[list[ProductVariantSetInput]] = None
    vendor: Optional[String] = None
    typename__: Optional[Literal["ProductSetInput"]] = Field("ProductSetInput", alias="__typename")


class ProductUnpublishInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    product_publications: Optional[list[ProductPublicationInput]] = Field(None, alias="productPublications")
    typename__: Optional[Literal["ProductUnpublishInput"]] = Field("ProductUnpublishInput", alias="__typename")


class ProductVariantAppendMediaInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    media_ids: Optional[list[ID]] = Field(None, alias="mediaIds")
    variant_id: Optional[ID] = Field(None, alias="variantId")
    typename__: Optional[Literal["ProductVariantAppendMediaInput"]] = Field(
        "ProductVariantAppendMediaInput", alias="__typename"
    )


class ProductVariantDetachMediaInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    media_ids: Optional[list[ID]] = Field(None, alias="mediaIds")
    variant_id: Optional[ID] = Field(None, alias="variantId")
    typename__: Optional[Literal["ProductVariantDetachMediaInput"]] = Field(
        "ProductVariantDetachMediaInput", alias="__typename"
    )


class ProductVariantGroupRelationshipInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    quantity: Optional[Int] = None
    typename__: Optional[Literal["ProductVariantGroupRelationshipInput"]] = Field(
        "ProductVariantGroupRelationshipInput", alias="__typename"
    )


class ProductVariantInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    barcode: Optional[String] = None
    compare_at_price: Optional[Money] = Field(None, alias="compareAtPrice")
    id: Optional[ID] = None
    inventory_item: Optional[InventoryItemInput] = Field(None, alias="inventoryItem")
    inventory_policy: Optional[ProductVariantInventoryPolicy] = Field(None, alias="inventoryPolicy")
    inventory_quantities: Optional[list[InventoryLevelInput]] = Field(None, alias="inventoryQuantities")
    media_id: Optional[ID] = Field(None, alias="mediaId")
    media_src: Optional[list[String]] = Field(None, alias="mediaSrc")
    metafields: Optional[list[MetafieldInput]] = None
    options: Optional[list[String]] = None
    position: Optional[Int] = None
    price: Optional[Money] = None
    product_id: Optional[ID] = Field(None, alias="productId")
    requires_components: Optional[Boolean] = Field(None, alias="requiresComponents")
    tax_code: Optional[String] = Field(None, alias="taxCode")
    taxable: Optional[Boolean] = None
    typename__: Optional[Literal["ProductVariantInput"]] = Field("ProductVariantInput", alias="__typename")


class ProductVariantPositionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    position: Optional[Int] = None
    typename__: Optional[Literal["ProductVariantPositionInput"]] = Field(
        "ProductVariantPositionInput", alias="__typename"
    )


class ProductVariantRelationshipUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    parent_product_id: Optional[ID] = Field(None, alias="parentProductId")
    parent_product_variant_id: Optional[ID] = Field(None, alias="parentProductVariantId")
    price_input: Optional[PriceInput] = Field(None, alias="priceInput")
    product_variant_relationships_to_create: Optional[list[ProductVariantGroupRelationshipInput]] = Field(
        None, alias="productVariantRelationshipsToCreate"
    )
    product_variant_relationships_to_remove: Optional[list[ID]] = Field(
        None, alias="productVariantRelationshipsToRemove"
    )
    product_variant_relationships_to_update: Optional[list[ProductVariantGroupRelationshipInput]] = Field(
        None, alias="productVariantRelationshipsToUpdate"
    )
    remove_all_product_variant_relationships: Optional[Boolean] = Field(
        False, alias="removeAllProductVariantRelationships"
    )
    typename__: Optional[Literal["ProductVariantRelationshipUpdateInput"]] = Field(
        "ProductVariantRelationshipUpdateInput", alias="__typename"
    )


class ProductVariantSetInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    barcode: Optional[String] = None
    compare_at_price: Optional[Money] = Field(None, alias="compareAtPrice")
    id: Optional[ID] = None
    inventory_policy: Optional[ProductVariantInventoryPolicy] = Field(None, alias="inventoryPolicy")
    media_id: Optional[ID] = Field(None, alias="mediaId")
    metafields: Optional[list[MetafieldInput]] = None
    option_values: Optional[list[VariantOptionValueInput]] = Field(None, alias="optionValues")
    position: Optional[Int] = None
    price: Optional[Money] = None
    requires_components: Optional[Boolean] = Field(None, alias="requiresComponents")
    sku: Optional[String] = None
    tax_code: Optional[String] = Field(None, alias="taxCode")
    taxable: Optional[Boolean] = None
    typename__: Optional[Literal["ProductVariantSetInput"]] = Field("ProductVariantSetInput", alias="__typename")


class ProductVariantsBulkInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    barcode: Optional[String] = None
    compare_at_price: Optional[Money] = Field(None, alias="compareAtPrice")
    id: Optional[ID] = None
    inventory_item: Optional[InventoryItemInput] = Field(None, alias="inventoryItem")
    inventory_policy: Optional[ProductVariantInventoryPolicy] = Field(None, alias="inventoryPolicy")
    inventory_quantities: Optional[list[InventoryLevelInput]] = Field(None, alias="inventoryQuantities")
    media_id: Optional[ID] = Field(None, alias="mediaId")
    media_src: Optional[list[String]] = Field(None, alias="mediaSrc")
    metafields: Optional[list[MetafieldInput]] = None
    option_values: Optional[list[VariantOptionValueInput]] = Field(None, alias="optionValues")
    price: Optional[Money] = None
    tax_code: Optional[String] = Field(None, alias="taxCode")
    taxable: Optional[Boolean] = None
    typename__: Optional[Literal["ProductVariantsBulkInput"]] = Field("ProductVariantsBulkInput", alias="__typename")


class PubSubWebhookSubscriptionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    filter: Optional[String] = None
    format: Optional[WebhookSubscriptionFormat] = None
    include_fields: Optional[list[String]] = Field(None, alias="includeFields")
    metafield_namespaces: Optional[list[String]] = Field(None, alias="metafieldNamespaces")
    pub_sub_project: Optional[String] = Field(None, alias="pubSubProject")
    pub_sub_topic: Optional[String] = Field(None, alias="pubSubTopic")
    typename__: Optional[Literal["PubSubWebhookSubscriptionInput"]] = Field(
        "PubSubWebhookSubscriptionInput", alias="__typename"
    )


class PublicationCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_publish: Optional[Boolean] = Field(False, alias="autoPublish")
    catalog_id: Optional[ID] = Field(None, alias="catalogId")
    default_state: Optional[PublicationCreateInputPublicationDefaultState] = Field("EMPTY", alias="defaultState")
    typename__: Optional[Literal["PublicationCreateInput"]] = Field("PublicationCreateInput", alias="__typename")


class PublicationInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    publication_id: Optional[ID] = Field(None, alias="publicationId")
    publish_date: Optional[DateTime] = Field(None, alias="publishDate")
    typename__: Optional[Literal["PublicationInput"]] = Field("PublicationInput", alias="__typename")


class PublicationUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    auto_publish: Optional[Boolean] = Field(None, alias="autoPublish")
    publishables_to_add: Optional[list[ID]] = Field([], alias="publishablesToAdd")
    publishables_to_remove: Optional[list[ID]] = Field([], alias="publishablesToRemove")
    typename__: Optional[Literal["PublicationUpdateInput"]] = Field("PublicationUpdateInput", alias="__typename")


class PurchasingCompanyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_contact_id: Optional[ID] = Field(None, alias="companyContactId")
    company_id: Optional[ID] = Field(None, alias="companyId")
    company_location_id: Optional[ID] = Field(None, alias="companyLocationId")
    typename__: Optional[Literal["PurchasingCompanyInput"]] = Field("PurchasingCompanyInput", alias="__typename")


class PurchasingEntityInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_id: Optional[ID] = Field(None, alias="customerId")
    purchasing_company: Optional[PurchasingCompanyInput] = Field(None, alias="purchasingCompany")
    typename__: Optional[Literal["PurchasingEntityInput"]] = Field("PurchasingEntityInput", alias="__typename")


class QuantityPriceBreakInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    minimum_quantity: Optional[Int] = Field(None, alias="minimumQuantity")
    price: Optional[MoneyInput] = None
    variant_id: Optional[ID] = Field(None, alias="variantId")
    typename__: Optional[Literal["QuantityPriceBreakInput"]] = Field("QuantityPriceBreakInput", alias="__typename")


class QuantityPricingByVariantUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    prices_to_add: Optional[list[PriceListPriceInput]] = Field(None, alias="pricesToAdd")
    prices_to_delete_by_variant_id: Optional[list[ID]] = Field(None, alias="pricesToDeleteByVariantId")
    quantity_price_breaks_to_add: Optional[list[QuantityPriceBreakInput]] = Field(
        None, alias="quantityPriceBreaksToAdd"
    )
    quantity_price_breaks_to_delete: Optional[list[ID]] = Field(None, alias="quantityPriceBreaksToDelete")
    quantity_rules_to_add: Optional[list[QuantityRuleInput]] = Field(None, alias="quantityRulesToAdd")
    quantity_rules_to_delete_by_variant_id: Optional[list[ID]] = Field(None, alias="quantityRulesToDeleteByVariantId")
    typename__: Optional[Literal["QuantityPricingByVariantUpdateInput"]] = Field(
        "QuantityPricingByVariantUpdateInput", alias="__typename"
    )


class QuantityRuleInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    increment: Optional[Int] = None
    maximum: Optional[Int] = None
    minimum: Optional[Int] = None
    variant_id: Optional[ID] = Field(None, alias="variantId")
    typename__: Optional[Literal["QuantityRuleInput"]] = Field("QuantityRuleInput", alias="__typename")


class RefundDutyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    duty_id: Optional[ID] = Field(None, alias="dutyId")
    refund_type: Optional[RefundDutyRefundType] = Field(None, alias="refundType")
    typename__: Optional[Literal["RefundDutyInput"]] = Field("RefundDutyInput", alias="__typename")


class RefundInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    currency: Optional[CurrencyCode] = None
    note: Optional[String] = None
    notify: Optional[Boolean] = None
    order_id: Optional[ID] = Field(None, alias="orderId")
    refund_duties: Optional[list[RefundDutyInput]] = Field(None, alias="refundDuties")
    refund_line_items: Optional[list[RefundLineItemInput]] = Field(None, alias="refundLineItems")
    shipping: Optional[ShippingRefundInput] = None
    transactions: Optional[list[OrderTransactionInput]] = None
    typename__: Optional[Literal["RefundInput"]] = Field("RefundInput", alias="__typename")


class RefundLineItemInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    line_item_id: Optional[ID] = Field(None, alias="lineItemId")
    location_id: Optional[ID] = Field(None, alias="locationId")
    quantity: Optional[Int] = None
    restock_type: Optional[RefundLineItemRestockType] = Field(None, alias="restockType")
    typename__: Optional[Literal["RefundLineItemInput"]] = Field("RefundLineItemInput", alias="__typename")


class RefundShippingInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    full_refund: Optional[Boolean] = Field(False, alias="fullRefund")
    shipping_refund_amount: Optional[MoneyInput] = Field(None, alias="shippingRefundAmount")
    typename__: Optional[Literal["RefundShippingInput"]] = Field("RefundShippingInput", alias="__typename")


class RemoteAuthorizeNetCustomerPaymentProfileInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_payment_profile_id: Optional[String] = Field(None, alias="customerPaymentProfileId")
    customer_profile_id: Optional[String] = Field(None, alias="customerProfileId")
    typename__: Optional[Literal["RemoteAuthorizeNetCustomerPaymentProfileInput"]] = Field(
        "RemoteAuthorizeNetCustomerPaymentProfileInput", alias="__typename"
    )


class RemoteBraintreePaymentMethodInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_id: Optional[String] = Field(None, alias="customerId")
    payment_method_token: Optional[String] = Field(None, alias="paymentMethodToken")
    typename__: Optional[Literal["RemoteBraintreePaymentMethodInput"]] = Field(
        "RemoteBraintreePaymentMethodInput", alias="__typename"
    )


class RemoteStripePaymentMethodInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_id: Optional[String] = Field(None, alias="customerId")
    payment_method_id: Optional[String] = Field(None, alias="paymentMethodId")
    typename__: Optional[Literal["RemoteStripePaymentMethodInput"]] = Field(
        "RemoteStripePaymentMethodInput", alias="__typename"
    )


class ResourceFeedbackCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    feedback_generated_at: Optional[DateTime] = Field(None, alias="feedbackGeneratedAt")
    messages: Optional[list[String]] = None
    state: Optional[ResourceFeedbackState] = None
    typename__: Optional[Literal["ResourceFeedbackCreateInput"]] = Field(
        "ResourceFeedbackCreateInput", alias="__typename"
    )


class RestockingFeeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    percentage: Optional[Float] = None
    typename__: Optional[Literal["RestockingFeeInput"]] = Field("RestockingFeeInput", alias="__typename")


class ReturnApproveRequestInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    typename__: Optional[Literal["ReturnApproveRequestInput"]] = Field("ReturnApproveRequestInput", alias="__typename")


class ReturnDeclineRequestInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    decline_reason: Optional[ReturnDeclineReason] = Field(None, alias="declineReason")
    id: Optional[ID] = None
    typename__: Optional[Literal["ReturnDeclineRequestInput"]] = Field("ReturnDeclineRequestInput", alias="__typename")


class ReturnInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    exchange_line_items: Optional[list[ExchangeLineItemInput]] = Field(None, alias="exchangeLineItems")
    notify_customer: Optional[Boolean] = Field(False, alias="notifyCustomer")
    order_id: Optional[ID] = Field(None, alias="orderId")
    requested_at: Optional[DateTime] = Field(None, alias="requestedAt")
    return_line_items: Optional[list[ReturnLineItemInput]] = Field(None, alias="returnLineItems")
    return_shipping_fee: Optional[ReturnShippingFeeInput] = Field(None, alias="returnShippingFee")
    typename__: Optional[Literal["ReturnInput"]] = Field("ReturnInput", alias="__typename")


class ReturnLineItemInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fulfillment_line_item_id: Optional[ID] = Field(None, alias="fulfillmentLineItemId")
    quantity: Optional[Int] = None
    restocking_fee: Optional[RestockingFeeInput] = Field(None, alias="restockingFee")
    return_reason: Optional[ReturnReason] = Field(None, alias="returnReason")
    return_reason_note: Optional[String] = Field("", alias="returnReasonNote")
    typename__: Optional[Literal["ReturnLineItemInput"]] = Field("ReturnLineItemInput", alias="__typename")


class ReturnLineItemRemoveFromReturnInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    quantity: Optional[Int] = None
    return_line_item_id: Optional[ID] = Field(None, alias="returnLineItemId")
    typename__: Optional[Literal["ReturnLineItemRemoveFromReturnInput"]] = Field(
        "ReturnLineItemRemoveFromReturnInput", alias="__typename"
    )


class ReturnRefundInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    notify_customer: Optional[Boolean] = Field(False, alias="notifyCustomer")
    order_transactions: Optional[list[ReturnRefundOrderTransactionInput]] = Field([], alias="orderTransactions")
    refund_duties: Optional[list[RefundDutyInput]] = Field(None, alias="refundDuties")
    refund_shipping: Optional[RefundShippingInput] = Field(None, alias="refundShipping")
    return_id: Optional[ID] = Field(None, alias="returnId")
    return_refund_line_items: Optional[list[ReturnRefundLineItemInput]] = Field(None, alias="returnRefundLineItems")
    typename__: Optional[Literal["ReturnRefundInput"]] = Field("ReturnRefundInput", alias="__typename")


class ReturnRefundLineItemInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    quantity: Optional[Int] = None
    return_line_item_id: Optional[ID] = Field(None, alias="returnLineItemId")
    typename__: Optional[Literal["ReturnRefundLineItemInput"]] = Field("ReturnRefundLineItemInput", alias="__typename")


class ReturnRefundOrderTransactionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    parent_id: Optional[ID] = Field(None, alias="parentId")
    transaction_amount: Optional[MoneyInput] = Field(None, alias="transactionAmount")
    typename__: Optional[Literal["ReturnRefundOrderTransactionInput"]] = Field(
        "ReturnRefundOrderTransactionInput", alias="__typename"
    )


class ReturnRequestInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    order_id: Optional[ID] = Field(None, alias="orderId")
    return_line_items: Optional[list[ReturnRequestLineItemInput]] = Field(None, alias="returnLineItems")
    return_shipping_fee: Optional[ReturnShippingFeeInput] = Field(None, alias="returnShippingFee")
    typename__: Optional[Literal["ReturnRequestInput"]] = Field("ReturnRequestInput", alias="__typename")


class ReturnRequestLineItemInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    customer_note: Optional[String] = Field(None, alias="customerNote")
    fulfillment_line_item_id: Optional[ID] = Field(None, alias="fulfillmentLineItemId")
    quantity: Optional[Int] = None
    restocking_fee: Optional[RestockingFeeInput] = Field(None, alias="restockingFee")
    return_reason: Optional[ReturnReason] = Field(None, alias="returnReason")
    typename__: Optional[Literal["ReturnRequestLineItemInput"]] = Field(
        "ReturnRequestLineItemInput", alias="__typename"
    )


class ReturnShippingFeeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[MoneyInput] = None
    typename__: Optional[Literal["ReturnShippingFeeInput"]] = Field("ReturnShippingFeeInput", alias="__typename")


class ReverseDeliveryDisposeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    disposition_type: Optional[ReverseFulfillmentOrderDispositionType] = Field(None, alias="dispositionType")
    location_id: Optional[ID] = Field(None, alias="locationId")
    quantity: Optional[Int] = None
    reverse_delivery_line_item_id: Optional[ID] = Field(None, alias="reverseDeliveryLineItemId")
    typename__: Optional[Literal["ReverseDeliveryDisposeInput"]] = Field(
        "ReverseDeliveryDisposeInput", alias="__typename"
    )


class ReverseDeliveryLabelInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    file_url: Optional[URL] = Field(None, alias="fileUrl")
    typename__: Optional[Literal["ReverseDeliveryLabelInput"]] = Field("ReverseDeliveryLabelInput", alias="__typename")


class ReverseDeliveryLineItemInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    quantity: Optional[Int] = None
    reverse_fulfillment_order_line_item_id: Optional[ID] = Field(None, alias="reverseFulfillmentOrderLineItemId")
    typename__: Optional[Literal["ReverseDeliveryLineItemInput"]] = Field(
        "ReverseDeliveryLineItemInput", alias="__typename"
    )


class ReverseDeliveryTrackingInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    number: Optional[String] = None
    url: Optional[URL] = None
    typename__: Optional[Literal["ReverseDeliveryTrackingInput"]] = Field(
        "ReverseDeliveryTrackingInput", alias="__typename"
    )


class ReverseFulfillmentOrderDisposeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    disposition_type: Optional[ReverseFulfillmentOrderDispositionType] = Field(None, alias="dispositionType")
    location_id: Optional[ID] = Field(None, alias="locationId")
    quantity: Optional[Int] = None
    reverse_fulfillment_order_line_item_id: Optional[ID] = Field(None, alias="reverseFulfillmentOrderLineItemId")
    typename__: Optional[Literal["ReverseFulfillmentOrderDisposeInput"]] = Field(
        "ReverseFulfillmentOrderDisposeInput", alias="__typename"
    )


class SEOInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    description: Optional[String] = None
    title: Optional[String] = None
    typename__: Optional[Literal["SEOInput"]] = Field("SEOInput", alias="__typename")


class SavedSearchCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: Optional[String] = None
    query: Optional[String] = None
    resource_type: Optional[SearchResultType] = Field(None, alias="resourceType")
    typename__: Optional[Literal["SavedSearchCreateInput"]] = Field("SavedSearchCreateInput", alias="__typename")


class SavedSearchDeleteInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    typename__: Optional[Literal["SavedSearchDeleteInput"]] = Field("SavedSearchDeleteInput", alias="__typename")


class SavedSearchUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    name: Optional[String] = None
    query: Optional[String] = None
    typename__: Optional[Literal["SavedSearchUpdateInput"]] = Field("SavedSearchUpdateInput", alias="__typename")


class ScriptTagInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cache: Optional[Boolean] = False
    display_scope: Optional[ScriptTagDisplayScope] = Field(None, alias="displayScope")
    src: Optional[URL] = None
    typename__: Optional[Literal["ScriptTagInput"]] = Field("ScriptTagInput", alias="__typename")


class SelectedVariantOptionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    linked_metafield_value: Optional[String] = Field(None, alias="linkedMetafieldValue")
    name: Optional[String] = None
    value: Optional[String] = None
    typename__: Optional[Literal["SelectedVariantOptionInput"]] = Field(
        "SelectedVariantOptionInput", alias="__typename"
    )


class SellingPlanAnchorInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    cutoff_day: Optional[Int] = Field(None, alias="cutoffDay")
    day: Optional[Int] = None
    month: Optional[Int] = None
    type: Optional[SellingPlanAnchorType] = None
    typename__: Optional[Literal["SellingPlanAnchorInput"]] = Field("SellingPlanAnchorInput", alias="__typename")


class SellingPlanBillingPolicyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fixed: Optional[SellingPlanFixedBillingPolicyInput] = None
    recurring: Optional[SellingPlanRecurringBillingPolicyInput] = None
    typename__: Optional[Literal["SellingPlanBillingPolicyInput"]] = Field(
        "SellingPlanBillingPolicyInput", alias="__typename"
    )


class SellingPlanCheckoutChargeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: Optional[SellingPlanCheckoutChargeType] = None
    value: Optional[SellingPlanCheckoutChargeValueInput] = None
    typename__: Optional[Literal["SellingPlanCheckoutChargeInput"]] = Field(
        "SellingPlanCheckoutChargeInput", alias="__typename"
    )


class SellingPlanCheckoutChargeValueInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fixed_value: Optional[Decimal] = Field(None, alias="fixedValue")
    percentage: Optional[Float] = None
    typename__: Optional[Literal["SellingPlanCheckoutChargeValueInput"]] = Field(
        "SellingPlanCheckoutChargeValueInput", alias="__typename"
    )


class SellingPlanDeliveryPolicyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fixed: Optional[SellingPlanFixedDeliveryPolicyInput] = None
    recurring: Optional[SellingPlanRecurringDeliveryPolicyInput] = None
    typename__: Optional[Literal["SellingPlanDeliveryPolicyInput"]] = Field(
        "SellingPlanDeliveryPolicyInput", alias="__typename"
    )


class SellingPlanFixedBillingPolicyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    checkout_charge: Optional[SellingPlanCheckoutChargeInput] = Field(None, alias="checkoutCharge")
    remaining_balance_charge_exact_time: Optional[DateTime] = Field(None, alias="remainingBalanceChargeExactTime")
    remaining_balance_charge_time_after_checkout: Optional[String] = Field(
        None, alias="remainingBalanceChargeTimeAfterCheckout"
    )
    remaining_balance_charge_trigger: Optional[SellingPlanRemainingBalanceChargeTrigger] = Field(
        None, alias="remainingBalanceChargeTrigger"
    )
    typename__: Optional[Literal["SellingPlanFixedBillingPolicyInput"]] = Field(
        "SellingPlanFixedBillingPolicyInput", alias="__typename"
    )


class SellingPlanFixedDeliveryPolicyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    anchors: Optional[list[SellingPlanAnchorInput]] = None
    cutoff: Optional[Int] = None
    fulfillment_exact_time: Optional[DateTime] = Field(None, alias="fulfillmentExactTime")
    fulfillment_trigger: Optional[SellingPlanFulfillmentTrigger] = Field(None, alias="fulfillmentTrigger")
    intent: Optional[SellingPlanFixedDeliveryPolicyIntent] = None
    pre_anchor_behavior: Optional[SellingPlanFixedDeliveryPolicyPreAnchorBehavior] = Field(
        None, alias="preAnchorBehavior"
    )
    typename__: Optional[Literal["SellingPlanFixedDeliveryPolicyInput"]] = Field(
        "SellingPlanFixedDeliveryPolicyInput", alias="__typename"
    )


class SellingPlanFixedPricingPolicyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    adjustment_type: Optional[SellingPlanPricingPolicyAdjustmentType] = Field(None, alias="adjustmentType")
    adjustment_value: Optional[SellingPlanPricingPolicyValueInput] = Field(None, alias="adjustmentValue")
    id: Optional[ID] = None
    typename__: Optional[Literal["SellingPlanFixedPricingPolicyInput"]] = Field(
        "SellingPlanFixedPricingPolicyInput", alias="__typename"
    )


class SellingPlanGroupInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    app_id: Optional[String] = Field(None, alias="appId")
    description: Optional[String] = None
    merchant_code: Optional[String] = Field(None, alias="merchantCode")
    name: Optional[String] = None
    options: Optional[list[String]] = None
    position: Optional[Int] = None
    selling_plans_to_create: Optional[list[SellingPlanInput]] = Field(None, alias="sellingPlansToCreate")
    selling_plans_to_delete: Optional[list[ID]] = Field(None, alias="sellingPlansToDelete")
    selling_plans_to_update: Optional[list[SellingPlanInput]] = Field(None, alias="sellingPlansToUpdate")
    typename__: Optional[Literal["SellingPlanGroupInput"]] = Field("SellingPlanGroupInput", alias="__typename")


class SellingPlanGroupResourceInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product_ids: Optional[list[ID]] = Field(None, alias="productIds")
    product_variant_ids: Optional[list[ID]] = Field(None, alias="productVariantIds")
    typename__: Optional[Literal["SellingPlanGroupResourceInput"]] = Field(
        "SellingPlanGroupResourceInput", alias="__typename"
    )


class SellingPlanInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_policy: Optional[SellingPlanBillingPolicyInput] = Field(None, alias="billingPolicy")
    category: Optional[SellingPlanCategory] = None
    delivery_policy: Optional[SellingPlanDeliveryPolicyInput] = Field(None, alias="deliveryPolicy")
    description: Optional[String] = None
    id: Optional[ID] = None
    inventory_policy: Optional[SellingPlanInventoryPolicyInput] = Field(None, alias="inventoryPolicy")
    metafields: Optional[list[MetafieldInput]] = None
    name: Optional[String] = None
    options: Optional[list[String]] = None
    position: Optional[Int] = None
    pricing_policies: Optional[list[SellingPlanPricingPolicyInput]] = Field(None, alias="pricingPolicies")
    typename__: Optional[Literal["SellingPlanInput"]] = Field("SellingPlanInput", alias="__typename")


class SellingPlanInventoryPolicyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    reserve: Optional[SellingPlanReserve] = None
    typename__: Optional[Literal["SellingPlanInventoryPolicyInput"]] = Field(
        "SellingPlanInventoryPolicyInput", alias="__typename"
    )


class SellingPlanPricingPolicyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fixed: Optional[SellingPlanFixedPricingPolicyInput] = None
    recurring: Optional[SellingPlanRecurringPricingPolicyInput] = None
    typename__: Optional[Literal["SellingPlanPricingPolicyInput"]] = Field(
        "SellingPlanPricingPolicyInput", alias="__typename"
    )


class SellingPlanPricingPolicyValueInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fixed_value: Optional[Decimal] = Field(None, alias="fixedValue")
    percentage: Optional[Float] = None
    typename__: Optional[Literal["SellingPlanPricingPolicyValueInput"]] = Field(
        "SellingPlanPricingPolicyValueInput", alias="__typename"
    )


class SellingPlanRecurringBillingPolicyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    anchors: Optional[list[SellingPlanAnchorInput]] = None
    interval: Optional[SellingPlanInterval] = None
    interval_count: Optional[Int] = Field(None, alias="intervalCount")
    max_cycles: Optional[Int] = Field(None, alias="maxCycles")
    min_cycles: Optional[Int] = Field(None, alias="minCycles")
    typename__: Optional[Literal["SellingPlanRecurringBillingPolicyInput"]] = Field(
        "SellingPlanRecurringBillingPolicyInput", alias="__typename"
    )


class SellingPlanRecurringDeliveryPolicyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    anchors: Optional[list[SellingPlanAnchorInput]] = None
    cutoff: Optional[Int] = None
    intent: Optional[SellingPlanRecurringDeliveryPolicyIntent] = None
    interval: Optional[SellingPlanInterval] = None
    interval_count: Optional[Int] = Field(None, alias="intervalCount")
    pre_anchor_behavior: Optional[SellingPlanRecurringDeliveryPolicyPreAnchorBehavior] = Field(
        None, alias="preAnchorBehavior"
    )
    typename__: Optional[Literal["SellingPlanRecurringDeliveryPolicyInput"]] = Field(
        "SellingPlanRecurringDeliveryPolicyInput", alias="__typename"
    )


class SellingPlanRecurringPricingPolicyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    adjustment_type: Optional[SellingPlanPricingPolicyAdjustmentType] = Field(None, alias="adjustmentType")
    adjustment_value: Optional[SellingPlanPricingPolicyValueInput] = Field(None, alias="adjustmentValue")
    after_cycle: Optional[Int] = Field(None, alias="afterCycle")
    id: Optional[ID] = None
    typename__: Optional[Literal["SellingPlanRecurringPricingPolicyInput"]] = Field(
        "SellingPlanRecurringPricingPolicyInput", alias="__typename"
    )


class ShippingLineInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    price_with_currency: Optional[MoneyInput] = Field(None, alias="priceWithCurrency")
    shipping_rate_handle: Optional[String] = Field(None, alias="shippingRateHandle")
    title: Optional[String] = None
    typename__: Optional[Literal["ShippingLineInput"]] = Field("ShippingLineInput", alias="__typename")


class ShippingRefundInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[Money] = None
    full_refund: Optional[Boolean] = Field(None, alias="fullRefund")
    typename__: Optional[Literal["ShippingRefundInput"]] = Field("ShippingRefundInput", alias="__typename")


class ShopLocaleInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    market_web_presence_ids: Optional[list[ID]] = Field(None, alias="marketWebPresenceIds")
    published: Optional[Boolean] = None
    typename__: Optional[Literal["ShopLocaleInput"]] = Field("ShopLocaleInput", alias="__typename")


class ShopPolicyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    body: Optional[String] = None
    type: Optional[ShopPolicyType] = None
    typename__: Optional[Literal["ShopPolicyInput"]] = Field("ShopPolicyInput", alias="__typename")


class ShopifyPaymentsDisputeEvidenceUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    access_activity_log: Optional[String] = Field(None, alias="accessActivityLog")
    cancellation_policy_disclosure: Optional[String] = Field(None, alias="cancellationPolicyDisclosure")
    cancellation_policy_file: Optional[ShopifyPaymentsDisputeFileUploadUpdateInput] = Field(
        None, alias="cancellationPolicyFile"
    )
    cancellation_rebuttal: Optional[String] = Field(None, alias="cancellationRebuttal")
    customer_communication_file: Optional[ShopifyPaymentsDisputeFileUploadUpdateInput] = Field(
        None, alias="customerCommunicationFile"
    )
    customer_email_address: Optional[String] = Field(None, alias="customerEmailAddress")
    customer_first_name: Optional[String] = Field(None, alias="customerFirstName")
    customer_last_name: Optional[String] = Field(None, alias="customerLastName")
    refund_policy_disclosure: Optional[String] = Field(None, alias="refundPolicyDisclosure")
    refund_policy_file: Optional[ShopifyPaymentsDisputeFileUploadUpdateInput] = Field(None, alias="refundPolicyFile")
    refund_refusal_explanation: Optional[String] = Field(None, alias="refundRefusalExplanation")
    service_documentation_file: Optional[ShopifyPaymentsDisputeFileUploadUpdateInput] = Field(
        None, alias="serviceDocumentationFile"
    )
    shipping_address: Optional[MailingAddressInput] = Field(None, alias="shippingAddress")
    shipping_documentation_file: Optional[ShopifyPaymentsDisputeFileUploadUpdateInput] = Field(
        None, alias="shippingDocumentationFile"
    )
    submit_evidence: Optional[Boolean] = Field(False, alias="submitEvidence")
    uncategorized_file: Optional[ShopifyPaymentsDisputeFileUploadUpdateInput] = Field(None, alias="uncategorizedFile")
    uncategorized_text: Optional[String] = Field(None, alias="uncategorizedText")
    typename__: Optional[Literal["ShopifyPaymentsDisputeEvidenceUpdateInput"]] = Field(
        "ShopifyPaymentsDisputeEvidenceUpdateInput", alias="__typename"
    )


class ShopifyPaymentsDisputeFileUploadUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    destroy: Optional[Boolean] = False
    id: Optional[ID] = None
    typename__: Optional[Literal["ShopifyPaymentsDisputeFileUploadUpdateInput"]] = Field(
        "ShopifyPaymentsDisputeFileUploadUpdateInput", alias="__typename"
    )


class StageImageInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    filename: Optional[String] = None
    http_method: Optional[StagedUploadHttpMethodType] = Field("PUT", alias="httpMethod")
    mime_type: Optional[String] = Field(None, alias="mimeType")
    resource: Optional[StagedUploadTargetGenerateUploadResource] = None
    typename__: Optional[Literal["StageImageInput"]] = Field("StageImageInput", alias="__typename")


class StagedUploadInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    file_size: Optional[UnsignedInt64] = Field(None, alias="fileSize")
    filename: Optional[String] = None
    http_method: Optional[StagedUploadHttpMethodType] = Field("PUT", alias="httpMethod")
    mime_type: Optional[String] = Field(None, alias="mimeType")
    resource: Optional[StagedUploadTargetGenerateUploadResource] = None
    typename__: Optional[Literal["StagedUploadInput"]] = Field("StagedUploadInput", alias="__typename")


class StagedUploadTargetGenerateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    file_size: Optional[UnsignedInt64] = Field(None, alias="fileSize")
    filename: Optional[String] = None
    http_method: Optional[StagedUploadHttpMethodType] = Field("PUT", alias="httpMethod")
    mime_type: Optional[String] = Field(None, alias="mimeType")
    resource: Optional[StagedUploadTargetGenerateUploadResource] = None
    typename__: Optional[Literal["StagedUploadTargetGenerateInput"]] = Field(
        "StagedUploadTargetGenerateInput", alias="__typename"
    )


class StandardizedProductTypeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    product_taxonomy_node_id: Optional[ID] = Field(None, alias="productTaxonomyNodeId")
    typename__: Optional[Literal["StandardizedProductTypeInput"]] = Field(
        "StandardizedProductTypeInput", alias="__typename"
    )


class StoreCreditAccountCreditInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    credit_amount: Optional[MoneyInput] = Field(None, alias="creditAmount")
    expires_at: Optional[DateTime] = Field(None, alias="expiresAt")
    typename__: Optional[Literal["StoreCreditAccountCreditInput"]] = Field(
        "StoreCreditAccountCreditInput", alias="__typename"
    )


class StoreCreditAccountDebitInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    debit_amount: Optional[MoneyInput] = Field(None, alias="debitAmount")
    typename__: Optional[Literal["StoreCreditAccountDebitInput"]] = Field(
        "StoreCreditAccountDebitInput", alias="__typename"
    )


class StorefrontAccessTokenDeleteInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    typename__: Optional[Literal["StorefrontAccessTokenDeleteInput"]] = Field(
        "StorefrontAccessTokenDeleteInput", alias="__typename"
    )


class StorefrontAccessTokenInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    title: Optional[String] = None
    typename__: Optional[Literal["StorefrontAccessTokenInput"]] = Field(
        "StorefrontAccessTokenInput", alias="__typename"
    )


class SubscriptionAtomicLineInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    discounts: Optional[list[SubscriptionAtomicManualDiscountInput]] = None
    line: Optional[SubscriptionLineInput] = None
    typename__: Optional[Literal["SubscriptionAtomicLineInput"]] = Field(
        "SubscriptionAtomicLineInput", alias="__typename"
    )


class SubscriptionAtomicManualDiscountInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    recurring_cycle_limit: Optional[Int] = Field(None, alias="recurringCycleLimit")
    title: Optional[String] = None
    value: Optional[SubscriptionManualDiscountValueInput] = None
    typename__: Optional[Literal["SubscriptionAtomicManualDiscountInput"]] = Field(
        "SubscriptionAtomicManualDiscountInput", alias="__typename"
    )


class SubscriptionBillingAttemptInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_cycle_selector: Optional[SubscriptionBillingCycleSelector] = Field(None, alias="billingCycleSelector")
    idempotency_key: Optional[String] = Field(None, alias="idempotencyKey")
    origin_time: Optional[DateTime] = Field(None, alias="originTime")
    typename__: Optional[Literal["SubscriptionBillingAttemptInput"]] = Field(
        "SubscriptionBillingAttemptInput", alias="__typename"
    )


class SubscriptionBillingCycleBulkFilters(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_attempt_status: Optional[SubscriptionBillingCycleBillingAttemptStatus] = Field(
        "ANY", alias="billingAttemptStatus"
    )
    billing_cycle_status: Optional[list[SubscriptionBillingCycleBillingCycleStatus]] = Field(
        None, alias="billingCycleStatus"
    )
    contract_status: Optional[list[SubscriptionContractSubscriptionStatus]] = Field(None, alias="contractStatus")
    typename__: Optional[Literal["SubscriptionBillingCycleBulkFilters"]] = Field(
        "SubscriptionBillingCycleBulkFilters", alias="__typename"
    )


class SubscriptionBillingCycleInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contract_id: Optional[ID] = Field(None, alias="contractId")
    selector: Optional[SubscriptionBillingCycleSelector] = None
    typename__: Optional[Literal["SubscriptionBillingCycleInput"]] = Field(
        "SubscriptionBillingCycleInput", alias="__typename"
    )


class SubscriptionBillingCycleScheduleEditInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_date: Optional[DateTime] = Field(None, alias="billingDate")
    reason: Optional[SubscriptionBillingCycleScheduleEditInputScheduleEditReason] = None
    skip: Optional[Boolean] = None
    typename__: Optional[Literal["SubscriptionBillingCycleScheduleEditInput"]] = Field(
        "SubscriptionBillingCycleScheduleEditInput", alias="__typename"
    )


class SubscriptionBillingCycleSelector(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    date: Optional[DateTime] = None
    index: Optional[Int] = None
    typename__: Optional[Literal["SubscriptionBillingCycleSelector"]] = Field(
        "SubscriptionBillingCycleSelector", alias="__typename"
    )


class SubscriptionBillingCyclesDateRangeSelector(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    end_date: Optional[DateTime] = Field(None, alias="endDate")
    start_date: Optional[DateTime] = Field(None, alias="startDate")
    typename__: Optional[Literal["SubscriptionBillingCyclesDateRangeSelector"]] = Field(
        "SubscriptionBillingCyclesDateRangeSelector", alias="__typename"
    )


class SubscriptionBillingCyclesIndexRangeSelector(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    end_index: Optional[Int] = Field(None, alias="endIndex")
    start_index: Optional[Int] = Field(None, alias="startIndex")
    typename__: Optional[Literal["SubscriptionBillingCyclesIndexRangeSelector"]] = Field(
        "SubscriptionBillingCyclesIndexRangeSelector", alias="__typename"
    )


class SubscriptionBillingPolicyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    anchors: Optional[list[SellingPlanAnchorInput]] = []
    interval: Optional[SellingPlanInterval] = None
    interval_count: Optional[Int] = Field(None, alias="intervalCount")
    max_cycles: Optional[Int] = Field(None, alias="maxCycles")
    min_cycles: Optional[Int] = Field(None, alias="minCycles")
    typename__: Optional[Literal["SubscriptionBillingPolicyInput"]] = Field(
        "SubscriptionBillingPolicyInput", alias="__typename"
    )


class SubscriptionContractAtomicCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contract: Optional[SubscriptionDraftInput] = None
    currency_code: Optional[CurrencyCode] = Field(None, alias="currencyCode")
    customer_id: Optional[ID] = Field(None, alias="customerId")
    discount_codes: Optional[list[String]] = Field([], alias="discountCodes")
    lines: Optional[list[SubscriptionAtomicLineInput]] = None
    next_billing_date: Optional[DateTime] = Field(None, alias="nextBillingDate")
    typename__: Optional[Literal["SubscriptionContractAtomicCreateInput"]] = Field(
        "SubscriptionContractAtomicCreateInput", alias="__typename"
    )


class SubscriptionContractCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    contract: Optional[SubscriptionDraftInput] = None
    currency_code: Optional[CurrencyCode] = Field(None, alias="currencyCode")
    customer_id: Optional[ID] = Field(None, alias="customerId")
    next_billing_date: Optional[DateTime] = Field(None, alias="nextBillingDate")
    typename__: Optional[Literal["SubscriptionContractCreateInput"]] = Field(
        "SubscriptionContractCreateInput", alias="__typename"
    )


class SubscriptionContractProductChangeInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    current_price: Optional[Decimal] = Field(None, alias="currentPrice")
    product_variant_id: Optional[ID] = Field(None, alias="productVariantId")
    typename__: Optional[Literal["SubscriptionContractProductChangeInput"]] = Field(
        "SubscriptionContractProductChangeInput", alias="__typename"
    )


class SubscriptionDeliveryMethodInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    local_delivery: Optional[SubscriptionDeliveryMethodLocalDeliveryInput] = Field(None, alias="localDelivery")
    pickup: Optional[SubscriptionDeliveryMethodPickupInput] = None
    shipping: Optional[SubscriptionDeliveryMethodShippingInput] = None
    typename__: Optional[Literal["SubscriptionDeliveryMethodInput"]] = Field(
        "SubscriptionDeliveryMethodInput", alias="__typename"
    )


class SubscriptionDeliveryMethodLocalDeliveryInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address: Optional[MailingAddressInput] = None
    local_delivery_option: Optional[SubscriptionDeliveryMethodLocalDeliveryOptionInput] = Field(
        None, alias="localDeliveryOption"
    )
    typename__: Optional[Literal["SubscriptionDeliveryMethodLocalDeliveryInput"]] = Field(
        "SubscriptionDeliveryMethodLocalDeliveryInput", alias="__typename"
    )


class SubscriptionDeliveryMethodLocalDeliveryOptionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[String] = None
    description: Optional[String] = None
    instructions: Optional[String] = None
    phone: Optional[String] = None
    presentment_title: Optional[String] = Field(None, alias="presentmentTitle")
    title: Optional[String] = None
    typename__: Optional[Literal["SubscriptionDeliveryMethodLocalDeliveryOptionInput"]] = Field(
        "SubscriptionDeliveryMethodLocalDeliveryOptionInput", alias="__typename"
    )


class SubscriptionDeliveryMethodPickupInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    pickup_option: Optional[SubscriptionDeliveryMethodPickupOptionInput] = Field(None, alias="pickupOption")
    typename__: Optional[Literal["SubscriptionDeliveryMethodPickupInput"]] = Field(
        "SubscriptionDeliveryMethodPickupInput", alias="__typename"
    )


class SubscriptionDeliveryMethodPickupOptionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    code: Optional[String] = None
    description: Optional[String] = None
    location_id: Optional[ID] = Field(None, alias="locationId")
    presentment_title: Optional[String] = Field(None, alias="presentmentTitle")
    title: Optional[String] = None
    typename__: Optional[Literal["SubscriptionDeliveryMethodPickupOptionInput"]] = Field(
        "SubscriptionDeliveryMethodPickupOptionInput", alias="__typename"
    )


class SubscriptionDeliveryMethodShippingInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    address: Optional[MailingAddressInput] = None
    shipping_option: Optional[SubscriptionDeliveryMethodShippingOptionInput] = Field(None, alias="shippingOption")
    typename__: Optional[Literal["SubscriptionDeliveryMethodShippingInput"]] = Field(
        "SubscriptionDeliveryMethodShippingInput", alias="__typename"
    )


class SubscriptionDeliveryMethodShippingOptionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    carrier_service_id: Optional[ID] = Field(None, alias="carrierServiceId")
    code: Optional[String] = None
    description: Optional[String] = None
    presentment_title: Optional[String] = Field(None, alias="presentmentTitle")
    title: Optional[String] = None
    typename__: Optional[Literal["SubscriptionDeliveryMethodShippingOptionInput"]] = Field(
        "SubscriptionDeliveryMethodShippingOptionInput", alias="__typename"
    )


class SubscriptionDeliveryPolicyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    anchors: Optional[list[SellingPlanAnchorInput]] = []
    interval: Optional[SellingPlanInterval] = None
    interval_count: Optional[Int] = Field(None, alias="intervalCount")
    typename__: Optional[Literal["SubscriptionDeliveryPolicyInput"]] = Field(
        "SubscriptionDeliveryPolicyInput", alias="__typename"
    )


class SubscriptionDraftInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    billing_policy: Optional[SubscriptionBillingPolicyInput] = Field(None, alias="billingPolicy")
    custom_attributes: Optional[list[AttributeInput]] = Field(None, alias="customAttributes")
    delivery_method: Optional[SubscriptionDeliveryMethodInput] = Field(None, alias="deliveryMethod")
    delivery_policy: Optional[SubscriptionDeliveryPolicyInput] = Field(None, alias="deliveryPolicy")
    delivery_price: Optional[Decimal] = Field(None, alias="deliveryPrice")
    next_billing_date: Optional[DateTime] = Field(None, alias="nextBillingDate")
    note: Optional[String] = None
    payment_method_id: Optional[ID] = Field(None, alias="paymentMethodId")
    status: Optional[SubscriptionContractSubscriptionStatus] = None
    typename__: Optional[Literal["SubscriptionDraftInput"]] = Field("SubscriptionDraftInput", alias="__typename")


class SubscriptionFreeShippingDiscountInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    recurring_cycle_limit: Optional[Int] = Field(None, alias="recurringCycleLimit")
    title: Optional[String] = None
    typename__: Optional[Literal["SubscriptionFreeShippingDiscountInput"]] = Field(
        "SubscriptionFreeShippingDiscountInput", alias="__typename"
    )


class SubscriptionLineInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    current_price: Optional[Decimal] = Field(None, alias="currentPrice")
    custom_attributes: Optional[list[AttributeInput]] = Field(None, alias="customAttributes")
    pricing_policy: Optional[SubscriptionPricingPolicyInput] = Field(None, alias="pricingPolicy")
    product_variant_id: Optional[ID] = Field(None, alias="productVariantId")
    quantity: Optional[Int] = None
    selling_plan_id: Optional[ID] = Field(None, alias="sellingPlanId")
    selling_plan_name: Optional[String] = Field(None, alias="sellingPlanName")
    typename__: Optional[Literal["SubscriptionLineInput"]] = Field("SubscriptionLineInput", alias="__typename")


class SubscriptionLineUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    current_price: Optional[Decimal] = Field(None, alias="currentPrice")
    custom_attributes: Optional[list[AttributeInput]] = Field(None, alias="customAttributes")
    pricing_policy: Optional[SubscriptionPricingPolicyInput] = Field(None, alias="pricingPolicy")
    product_variant_id: Optional[ID] = Field(None, alias="productVariantId")
    quantity: Optional[Int] = None
    selling_plan_id: Optional[ID] = Field(None, alias="sellingPlanId")
    selling_plan_name: Optional[String] = Field(None, alias="sellingPlanName")
    typename__: Optional[Literal["SubscriptionLineUpdateInput"]] = Field(
        "SubscriptionLineUpdateInput", alias="__typename"
    )


class SubscriptionManualDiscountEntitledLinesInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    all: Optional[Boolean] = None
    lines: Optional[SubscriptionManualDiscountLinesInput] = None
    typename__: Optional[Literal["SubscriptionManualDiscountEntitledLinesInput"]] = Field(
        "SubscriptionManualDiscountEntitledLinesInput", alias="__typename"
    )


class SubscriptionManualDiscountFixedAmountInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    amount: Optional[Float] = None
    applies_on_each_item: Optional[Boolean] = Field(None, alias="appliesOnEachItem")
    typename__: Optional[Literal["SubscriptionManualDiscountFixedAmountInput"]] = Field(
        "SubscriptionManualDiscountFixedAmountInput", alias="__typename"
    )


class SubscriptionManualDiscountInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    entitled_lines: Optional[SubscriptionManualDiscountEntitledLinesInput] = Field(None, alias="entitledLines")
    recurring_cycle_limit: Optional[Int] = Field(None, alias="recurringCycleLimit")
    title: Optional[String] = None
    value: Optional[SubscriptionManualDiscountValueInput] = None
    typename__: Optional[Literal["SubscriptionManualDiscountInput"]] = Field(
        "SubscriptionManualDiscountInput", alias="__typename"
    )


class SubscriptionManualDiscountLinesInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    add: Optional[list[ID]] = None
    remove: Optional[list[ID]] = None
    typename__: Optional[Literal["SubscriptionManualDiscountLinesInput"]] = Field(
        "SubscriptionManualDiscountLinesInput", alias="__typename"
    )


class SubscriptionManualDiscountValueInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    fixed_amount: Optional[SubscriptionManualDiscountFixedAmountInput] = Field(None, alias="fixedAmount")
    percentage: Optional[Int] = None
    typename__: Optional[Literal["SubscriptionManualDiscountValueInput"]] = Field(
        "SubscriptionManualDiscountValueInput", alias="__typename"
    )


class SubscriptionPricingPolicyCycleDiscountsInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    adjustment_type: Optional[SellingPlanPricingPolicyAdjustmentType] = Field(None, alias="adjustmentType")
    adjustment_value: Optional[SellingPlanPricingPolicyValueInput] = Field(None, alias="adjustmentValue")
    after_cycle: Optional[Int] = Field(None, alias="afterCycle")
    computed_price: Optional[Decimal] = Field(None, alias="computedPrice")
    typename__: Optional[Literal["SubscriptionPricingPolicyCycleDiscountsInput"]] = Field(
        "SubscriptionPricingPolicyCycleDiscountsInput", alias="__typename"
    )


class SubscriptionPricingPolicyInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    base_price: Optional[Decimal] = Field(None, alias="basePrice")
    cycle_discounts: Optional[list[SubscriptionPricingPolicyCycleDiscountsInput]] = Field(None, alias="cycleDiscounts")
    typename__: Optional[Literal["SubscriptionPricingPolicyInput"]] = Field(
        "SubscriptionPricingPolicyInput", alias="__typename"
    )


class TranslationInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    key: Optional[String] = None
    locale: Optional[String] = None
    market_id: Optional[ID] = Field(None, alias="marketId")
    translatable_content_digest: Optional[String] = Field(None, alias="translatableContentDigest")
    value: Optional[String] = None
    typename__: Optional[Literal["TranslationInput"]] = Field("TranslationInput", alias="__typename")


class UTMInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    campaign: Optional[String] = None
    medium: Optional[String] = None
    source: Optional[String] = None
    typename__: Optional[Literal["UTMInput"]] = Field("UTMInput", alias="__typename")


class UpdateMediaInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alt: Optional[String] = None
    id: Optional[ID] = None
    preview_image_source: Optional[String] = Field(None, alias="previewImageSource")
    typename__: Optional[Literal["UpdateMediaInput"]] = Field("UpdateMediaInput", alias="__typename")


class UrlRedirectInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    path: Optional[String] = None
    target: Optional[String] = None
    typename__: Optional[Literal["UrlRedirectInput"]] = Field("UrlRedirectInput", alias="__typename")


class ValidationCreateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    block_on_failure: Optional[Boolean] = Field(False, alias="blockOnFailure")
    enable: Optional[Boolean] = False
    function_id: Optional[String] = Field(None, alias="functionId")
    metafields: Optional[list[MetafieldInput]] = []
    title: Optional[String] = None
    typename__: Optional[Literal["ValidationCreateInput"]] = Field("ValidationCreateInput", alias="__typename")


class ValidationUpdateInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    block_on_failure: Optional[Boolean] = Field(False, alias="blockOnFailure")
    enable: Optional[Boolean] = False
    metafields: Optional[list[MetafieldInput]] = []
    title: Optional[String] = None
    typename__: Optional[Literal["ValidationUpdateInput"]] = Field("ValidationUpdateInput", alias="__typename")


class VariantOptionValueInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    linked_metafield_value: Optional[String] = Field(None, alias="linkedMetafieldValue")
    name: Optional[String] = None
    option_id: Optional[ID] = Field(None, alias="optionId")
    option_name: Optional[String] = Field(None, alias="optionName")
    typename__: Optional[Literal["VariantOptionValueInput"]] = Field("VariantOptionValueInput", alias="__typename")


class WebPixelInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    settings: Optional[JSON] = None
    typename__: Optional[Literal["WebPixelInput"]] = Field("WebPixelInput", alias="__typename")


class WebhookSubscriptionInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    callback_url: Optional[URL] = Field(None, alias="callbackUrl")
    filter: Optional[String] = None
    format: Optional[WebhookSubscriptionFormat] = None
    include_fields: Optional[list[String]] = Field(None, alias="includeFields")
    metafield_namespaces: Optional[list[String]] = Field(None, alias="metafieldNamespaces")
    typename__: Optional[Literal["WebhookSubscriptionInput"]] = Field("WebhookSubscriptionInput", alias="__typename")


class WeightInput(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    unit: Optional[WeightUnit] = None
    value: Optional[Float] = None
    typename__: Optional[Literal["WeightInput"]] = Field("WeightInput", alias="__typename")


AppPricingDetails: TypeAlias = Union[
    "AppRecurringPricing",
    "AppUsagePricing",
]
AppSubscriptionDiscountValue: TypeAlias = Union[
    "AppSubscriptionDiscountAmount",
    "AppSubscriptionDiscountPercentage",
]
CollectionRuleConditionObject: TypeAlias = Union[
    "CollectionRuleMetafieldCondition",
    "CollectionRuleProductCategoryCondition",
    "CollectionRuleTextCondition",
]
CollectionRuleConditionsRuleObject: TypeAlias = CollectionRuleMetafieldCondition
CommentEventEmbed: TypeAlias = Union[
    "Customer",
    "DraftOrder",
    "Order",
    "Product",
    "ProductVariant",
]
CustomerPaymentInstrument: TypeAlias = Union[
    "CustomerCreditCard",
    "CustomerPaypalBillingAgreement",
    "CustomerShopPayAgreement",
]
DeliveryConditionCriteria: TypeAlias = Union[
    "MoneyV2",
    "Weight",
]
DeliveryRateProvider: TypeAlias = Union[
    "DeliveryParticipant",
    "DeliveryRateDefinition",
]
Discount: TypeAlias = Union[
    "DiscountAutomaticApp",
    "DiscountAutomaticBasic",
    "DiscountAutomaticBxgy",
    "DiscountAutomaticFreeShipping",
    "DiscountCodeApp",
    "DiscountCodeBasic",
    "DiscountCodeBxgy",
    "DiscountCodeFreeShipping",
]
DiscountAutomatic: TypeAlias = Union[
    "DiscountAutomaticApp",
    "DiscountAutomaticBasic",
    "DiscountAutomaticBxgy",
    "DiscountAutomaticFreeShipping",
]
DiscountCode: TypeAlias = Union[
    "DiscountCodeApp",
    "DiscountCodeBasic",
    "DiscountCodeBxgy",
    "DiscountCodeFreeShipping",
]
DiscountCustomerBuysValue: TypeAlias = Union[
    "DiscountPurchaseAmount",
    "DiscountQuantity",
]
DiscountCustomerGetsValue: TypeAlias = Union[
    "DiscountAmount",
    "DiscountOnQuantity",
    "DiscountPercentage",
]
DiscountCustomerSelection: TypeAlias = Union[
    "DiscountCustomerAll",
    "DiscountCustomerSegments",
    "DiscountCustomers",
]
DiscountEffect: TypeAlias = Union[
    "DiscountAmount",
    "DiscountPercentage",
]
DiscountItems: TypeAlias = Union[
    "AllDiscountItems",
    "DiscountCollections",
    "DiscountProducts",
]
DiscountMinimumRequirement: TypeAlias = Union[
    "DiscountMinimumQuantity",
    "DiscountMinimumSubtotal",
]
DiscountShippingDestinationSelection: TypeAlias = Union[
    "DiscountCountries",
    "DiscountCountryAll",
]
DraftOrderPlatformDiscountAllocationTarget: TypeAlias = Union[
    "CalculatedDraftOrderLineItem",
    "DraftOrderLineItem",
    "ShippingLine",
]
MetafieldReference: TypeAlias = Union[
    "Collection",
    "GenericFile",
    "MediaImage",
    "Metaobject",
    "Model3d",
    "OnlineStorePage",
    "Product",
    "ProductVariant",
    "TaxonomyValue",
    "Video",
]
MetafieldReferencer: TypeAlias = Union[
    "AppInstallation",
    "Collection",
    "Company",
    "CompanyLocation",
    "Customer",
    "DeliveryCustomization",
    "DiscountAutomaticNode",
    "DiscountCodeNode",
    "DiscountNode",
    "DraftOrder",
    "FulfillmentOrder",
    "Location",
    "Market",
    "Metaobject",
    "OnlineStoreArticle",
    "OnlineStoreBlog",
    "OnlineStorePage",
    "Order",
    "PaymentCustomization",
    "Product",
    "ProductVariant",
    "Shop",
]
MobilePlatformApplication: TypeAlias = Union[
    "AndroidApplication",
    "AppleApplication",
]
OrderStagedChange: TypeAlias = Union[
    "OrderStagedChangeAddCustomItem",
    "OrderStagedChangeAddLineItemDiscount",
    "OrderStagedChangeAddShippingLine",
    "OrderStagedChangeAddVariant",
    "OrderStagedChangeDecrementItem",
    "OrderStagedChangeIncrementItem",
    "OrderStagedChangeRemoveShippingLine",
]
PaymentDetails: TypeAlias = Union[
    "CardPaymentDetails",
    "ShopPayInstallmentsPaymentDetails",
]
PaymentInstrument: TypeAlias = Union[
    "VaultCreditCard",
    "VaultPaypalBillingAgreement",
]
PriceRuleValue: TypeAlias = Union[
    "PriceRuleFixedAmountValue",
    "PriceRulePercentValue",
]
PricingValue: TypeAlias = Union[
    "MoneyV2",
    "PricingPercentageValue",
]
PublicationOperation: TypeAlias = Union[
    "AddAllProductsOperation",
    "CatalogCsvOperation",
    "PublicationResourceOperation",
]
PurchasingEntity: TypeAlias = Union[
    "Customer",
    "PurchasingCompany",
]
ReverseDeliveryDeliverable: TypeAlias = ReverseDeliveryShippingDeliverable
SellingPlanBillingPolicy: TypeAlias = Union[
    "SellingPlanFixedBillingPolicy",
    "SellingPlanRecurringBillingPolicy",
]
SellingPlanCheckoutChargeValue: TypeAlias = Union[
    "MoneyV2",
    "SellingPlanCheckoutChargePercentageValue",
]
SellingPlanDeliveryPolicy: TypeAlias = Union[
    "SellingPlanFixedDeliveryPolicy",
    "SellingPlanRecurringDeliveryPolicy",
]
SellingPlanPricingPolicy: TypeAlias = Union[
    "SellingPlanFixedPricingPolicy",
    "SellingPlanRecurringPricingPolicy",
]
SellingPlanPricingPolicyAdjustmentValue: TypeAlias = Union[
    "MoneyV2",
    "SellingPlanPricingPolicyPercentageValue",
]
SubscriptionDeliveryMethod: TypeAlias = Union[
    "SubscriptionDeliveryMethodLocalDelivery",
    "SubscriptionDeliveryMethodPickup",
    "SubscriptionDeliveryMethodShipping",
]
SubscriptionDeliveryOption: TypeAlias = Union[
    "SubscriptionLocalDeliveryOption",
    "SubscriptionPickupOption",
    "SubscriptionShippingOption",
]
SubscriptionDeliveryOptionResult: TypeAlias = Union[
    "SubscriptionDeliveryOptionResultFailure",
    "SubscriptionDeliveryOptionResultSuccess",
]
SubscriptionDiscount: TypeAlias = Union[
    "SubscriptionAppliedCodeDiscount",
    "SubscriptionManualDiscount",
]
SubscriptionDiscountValue: TypeAlias = Union[
    "SubscriptionDiscountFixedAmountValue",
    "SubscriptionDiscountPercentageValue",
]
SubscriptionShippingOptionResult: TypeAlias = Union[
    "SubscriptionShippingOptionResultFailure",
    "SubscriptionShippingOptionResultSuccess",
]
TaxonomyCategoryAttribute: TypeAlias = Union[
    "TaxonomyAttribute",
    "TaxonomyChoiceListAttribute",
    "TaxonomyMeasurementAttribute",
]
TenderTransactionDetails: TypeAlias = TenderTransactionCreditCardDetails
WebhookSubscriptionEndpoint: TypeAlias = Union[
    "WebhookEventBridgeEndpoint",
    "WebhookHttpEndpoint",
    "WebhookPubSubEndpoint",
]


class Catalog(ShopifyBase):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    operations: list[ResourceOperation] = Field(default_factory=list)
    price_list: Optional[PriceList] = Field(None, alias="priceList")
    publication: Optional[Publication] = None
    status: Optional[CatalogStatus] = None
    title: Optional[String] = None
    typename__: Optional[Literal["Catalog"]] = Field("Catalog", alias="__typename")


class AppCatalog(Catalog, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    apps: Optional[AppConnection] = None
    id: Optional[ID] = None
    operations: list[ResourceOperation] = Field(default_factory=list)
    price_list: Optional[PriceList] = Field(None, alias="priceList")
    publication: Optional[Publication] = None
    status: Optional[CatalogStatus] = None
    title: Optional[String] = None
    typename__: Optional[Literal["AppCatalog"]] = Field("AppCatalog", alias="__typename")


class CompanyLocationCatalog(Catalog, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    company_locations: Optional[CompanyLocationConnection] = Field(None, alias="companyLocations")
    company_locations_count: Optional[Count] = Field(None, alias="companyLocationsCount")
    id: Optional[ID] = None
    operations: list[ResourceOperation] = Field(default_factory=list)
    price_list: Optional[PriceList] = Field(None, alias="priceList")
    publication: Optional[Publication] = None
    status: Optional[CatalogStatus] = None
    title: Optional[String] = None
    typename__: Optional[Literal["CompanyLocationCatalog"]] = Field("CompanyLocationCatalog", alias="__typename")


class MarketCatalog(Catalog, Node):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: Optional[ID] = None
    markets: Optional[MarketConnection] = None
    operations: list[ResourceOperation] = Field(default_factory=list)
    price_list: Optional[PriceList] = Field(None, alias="priceList")
    publication: Optional[Publication] = None
    status: Optional[CatalogStatus] = None
    title: Optional[String] = None
    typename__: Optional[Literal["MarketCatalog"]] = Field("MarketCatalog", alias="__typename")
